   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB9:
  15               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/power.h>
   5:main.c        **** 
   6:main.c        **** 
   7:main.c        **** volatile unsigned int cnt=0;
   8:main.c        **** uint8_t level[12];
   9:main.c        **** uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 }; //Brightness levels of each led.
  10:main.c        **** uint8_t order[12] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};     //Map from left to right from top (
  11:main.c        **** 
  12:main.c        **** int main(void){
  16               		.loc 1 12 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  13:main.c        ****       
  14:main.c        ****     //Timer1 for LED charlieplexing
  15:main.c        ****     TCCR1 = 1<<CTC1 | 2<<CS10;          //Divide clock by 2
  22               		.loc 1 15 0
  23 0000 82E8      		ldi r24,lo8(-126)
  24 0002 80BF      		out 0x30,r24
  16:main.c        ****     GTCCR = 0;                          //No PWM
  25               		.loc 1 16 0
  26 0004 1CBC      		out 0x2c,__zero_reg__
  17:main.c        ****     OCR1A = 0;                          //No PWM
  27               		.loc 1 17 0
  28 0006 1EBC      		out 0x2e,__zero_reg__
  18:main.c        ****     OCR1C = 250-1;                      //16kHz for good POV (16k/64/12=20Hz)
  29               		.loc 1 18 0
  30 0008 89EF      		ldi r24,lo8(-7)
  31 000a 8DBD      		out 0x2d,r24
  19:main.c        ****     TIMSK = TIMSK | 1<<OCIE1A;          //Compare Match A interrupt
  32               		.loc 1 19 0
  33 000c 89B7      		in r24,0x39
  34 000e 8064      		ori r24,lo8(64)
  35 0010 89BF      		out 0x39,r24
  20:main.c        ****     sei();                              //Enable interrupts
  36               		.loc 1 20 0
  37               	/* #APP */
  38               	 ;  20 "main.c" 1
  39 0012 7894      		sei
  40               	 ;  0 "" 2
  41               	/* #NOAPP */
  42               	.L3:
  43               	.LBB6:
  21:main.c        ****     while(1){
  22:main.c        ****        /*for (uint8_t i=0;i<12;i++){
  23:main.c        ****         level[i]=63;
  24:main.c        ****         }
  25:main.c        ****         _delay_ms(1500);
  26:main.c        ****         
  27:main.c        ****        for (uint8_t i=0;i<12;i++){
  28:main.c        ****         level[i]=0;
  29:main.c        ****         }
  30:main.c        ****         _delay_ms(1500);*/
  31:main.c        ****         
  32:main.c        ****          uint8_t temp = level[11];
  44               		.loc 1 32 0
  45 0014 8091 0000 		lds r24,level+11
  46               	.LVL0:
  47 0018 E0E0      		ldi r30,lo8(level+11)
  48 001a F0E0      		ldi r31,hi8(level+11)
  49               	.LVL1:
  50               	.L2:
  51               	.LBB7:
  33:main.c        ****         for (int i=11; i>0; i--) level[i] = level[i-1];
  52               		.loc 1 33 0 discriminator 3
  53 001c 9291      		ld r25,-Z
  54               	.LVL2:
  55 001e 9183      		std Z+1,r25
  56               	.LVL3:
  57 0020 20E0      		ldi r18,hi8(level)
  58 0022 E030      		cpi r30,lo8(level)
  59 0024 F207      		cpc r31,r18
  60 0026 01F4      		brne .L2
  61               	.LBE7:
  34:main.c        ****         level[0] = temp;
  62               		.loc 1 34 0
  63 0028 8093 0000 		sts level,r24
  64               	.LVL4:
  65               	.LBB8:
  66               	.LBB9:
  67               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  68               		.loc 2 187 0
  69 002c 8FEF      		ldi r24,lo8(1599999)
  70 002e 99E6      		ldi r25,hi8(1599999)
  71 0030 28E1      		ldi r18,hlo8(1599999)
  72 0032 8150      	1:	subi r24,1
  73 0034 9040      		sbci r25,0
  74 0036 2040      		sbci r18,0
  75 0038 01F4      		brne 1b
  76               	.LVL5:
  77 003a 00C0      		rjmp .
  78 003c 0000      		nop
  79 003e 00C0      		rjmp .L3
  80               	.LBE9:
  81               	.LBE8:
  82               	.LBE6:
  83               		.cfi_endproc
  84               	.LFE9:
  86               		.text
  87               	.global	__vector_3
  89               	__vector_3:
  90               	.LFB10:
  35:main.c        ****          _delay_ms(1000);
  36:main.c        ****     }
  37:main.c        ****     return 0;
  38:main.c        **** }     
  39:main.c        **** 
  40:main.c        **** ISR(TIM1_COMPA_vect) {
  91               		.loc 1 40 0
  92               		.cfi_startproc
  93 0000 1F92      		push r1
  94               	.LCFI0:
  95               		.cfi_def_cfa_offset 3
  96               		.cfi_offset 1, -2
  97 0002 0F92      		push r0
  98               	.LCFI1:
  99               		.cfi_def_cfa_offset 4
 100               		.cfi_offset 0, -3
 101 0004 0FB6      		in r0,__SREG__
 102 0006 0F92      		push r0
 103 0008 1124      		clr __zero_reg__
 104 000a 2F93      		push r18
 105               	.LCFI2:
 106               		.cfi_def_cfa_offset 5
 107               		.cfi_offset 18, -4
 108 000c 3F93      		push r19
 109               	.LCFI3:
 110               		.cfi_def_cfa_offset 6
 111               		.cfi_offset 19, -5
 112 000e 4F93      		push r20
 113               	.LCFI4:
 114               		.cfi_def_cfa_offset 7
 115               		.cfi_offset 20, -6
 116 0010 5F93      		push r21
 117               	.LCFI5:
 118               		.cfi_def_cfa_offset 8
 119               		.cfi_offset 21, -7
 120 0012 6F93      		push r22
 121               	.LCFI6:
 122               		.cfi_def_cfa_offset 9
 123               		.cfi_offset 22, -8
 124 0014 7F93      		push r23
 125               	.LCFI7:
 126               		.cfi_def_cfa_offset 10
 127               		.cfi_offset 23, -9
 128 0016 8F93      		push r24
 129               	.LCFI8:
 130               		.cfi_def_cfa_offset 11
 131               		.cfi_offset 24, -10
 132 0018 9F93      		push r25
 133               	.LCFI9:
 134               		.cfi_def_cfa_offset 12
 135               		.cfi_offset 25, -11
 136 001a EF93      		push r30
 137               	.LCFI10:
 138               		.cfi_def_cfa_offset 13
 139               		.cfi_offset 30, -12
 140 001c FF93      		push r31
 141               	.LCFI11:
 142               		.cfi_def_cfa_offset 14
 143               		.cfi_offset 31, -13
 144               	/* prologue: Signal */
 145               	/* frame size = 0 */
 146               	/* stack size = 13 */
 147               	.L__stack_usage = 13
  41:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
  42:main.c        ****   ramp = (ramp+1) & 0x3F;
 148               		.loc 1 42 0
 149 001e 9091 0000 		lds r25,ramp.1636
 150 0022 9F5F      		subi r25,lo8(-(1))
 151 0024 9F73      		andi r25,lo8(63)
 152 0026 9093 0000 		sts ramp.1636,r25
  43:main.c        ****   if (ramp == 0) {
 153               		.loc 1 43 0
 154 002a 9111      		cpse r25,__zero_reg__
 155 002c 00C0      		rjmp .L7
  44:main.c        ****     bits = 0x07;
 156               		.loc 1 44 0
 157 002e 87E0      		ldi r24,lo8(7)
 158 0030 8093 0000 		sts bits.1638,r24
  45:main.c        ****     column = (column + 1) & 0x03;
 159               		.loc 1 45 0
 160 0034 2091 0000 		lds r18,column.1637
 161 0038 2F5F      		subi r18,lo8(-(1))
 162 003a 2370      		andi r18,lo8(3)
 163 003c 2093 0000 		sts column.1637,r18
  46:main.c        ****     first = column * 3;
 164               		.loc 1 46 0
 165 0040 822F      		mov r24,r18
 166 0042 63E0      		ldi r22,lo8(3)
 167 0044 00D0      		rcall __mulqi3
 168 0046 8093 0000 		sts first.1635,r24
  47:main.c        ****     colbit = 1<<column;
 169               		.loc 1 47 0
 170 004a 41E0      		ldi r20,lo8(1)
 171 004c 50E0      		ldi r21,0
 172 004e BA01      		movw r22,r20
 173 0050 00C0      		rjmp 2f
 174               		1:
 175 0052 660F      		lsl r22
 176 0054 771F      		rol r23
 177               		2:
 178 0056 2A95      		dec r18
 179 0058 02F4      		brpl 1b
 180 005a 6093 0000 		sts colbit.1639,r22
 181               	.L7:
  48:main.c        ****   }
  49:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 182               		.loc 1 49 0
 183 005e E091 0000 		lds r30,first.1635
 184 0062 F0E0      		ldi r31,0
 185 0064 E050      		subi r30,lo8(-(level))
 186 0066 F040      		sbci r31,hi8(-(level))
 187 0068 8081      		ld r24,Z
 188 006a 9813      		cpse r25,r24
 189 006c 00C0      		rjmp .L8
 190               		.loc 1 49 0 is_stmt 0 discriminator 1
 191 006e 8091 0000 		lds r24,bits.1638
 192 0072 8670      		andi r24,lo8(6)
 193 0074 8093 0000 		sts bits.1638,r24
 194               	.L8:
  50:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 195               		.loc 1 50 0 is_stmt 1
 196 0078 8181      		ldd r24,Z+1
 197 007a 9813      		cpse r25,r24
 198 007c 00C0      		rjmp .L9
 199               		.loc 1 50 0 is_stmt 0 discriminator 1
 200 007e 8091 0000 		lds r24,bits.1638
 201 0082 8570      		andi r24,lo8(5)
 202 0084 8093 0000 		sts bits.1638,r24
 203               	.L9:
  51:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 204               		.loc 1 51 0 is_stmt 1
 205 0088 8281      		ldd r24,Z+2
 206 008a 9813      		cpse r25,r24
 207 008c 00C0      		rjmp .L10
 208               		.loc 1 51 0 is_stmt 0 discriminator 1
 209 008e 8091 0000 		lds r24,bits.1638
 210 0092 8370      		andi r24,lo8(3)
 211 0094 8093 0000 		sts bits.1638,r24
 212               	.L10:
  52:main.c        ****   uint8_t mask = colbit - 1;
 213               		.loc 1 52 0 is_stmt 1
 214 0098 4091 0000 		lds r20,colbit.1639
 215 009c 6FEF      		ldi r22,lo8(-1)
 216 009e 640F      		add r22,r20
 217               	.LVL6:
  53:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 218               		.loc 1 53 0
 219 00a0 5091 0000 		lds r21,bits.1638
 220 00a4 862F      		mov r24,r22
 221 00a6 90E0      		ldi r25,0
 222 00a8 8095      		com r24
 223 00aa 9095      		com r25
 224 00ac 252F      		mov r18,r21
 225 00ae 30E0      		ldi r19,0
 226 00b0 8223      		and r24,r18
 227 00b2 9323      		and r25,r19
 228 00b4 880F      		lsl r24
 229 00b6 991F      		rol r25
 230 00b8 5623      		and r21,r22
 231 00ba 852B      		or r24,r21
 232               	.LVL7:
  54:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 233               		.loc 1 54 0
 234 00bc 97B3      		in r25,0x17
 235 00be 907F      		andi r25,lo8(-16)
 236 00c0 492B      		or r20,r25
 237 00c2 482B      		or r20,r24
 238 00c4 47BB      		out 0x17,r20
  55:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 239               		.loc 1 55 0
 240 00c6 98B3      		in r25,0x18
 241 00c8 907F      		andi r25,lo8(-16)
 242 00ca 892B      		or r24,r25
 243               	.LVL8:
 244 00cc 88BB      		out 0x18,r24
 245               	/* epilogue start */
  56:main.c        **** }
 246               		.loc 1 56 0
 247 00ce FF91      		pop r31
 248 00d0 EF91      		pop r30
 249 00d2 9F91      		pop r25
 250 00d4 8F91      		pop r24
 251 00d6 7F91      		pop r23
 252 00d8 6F91      		pop r22
 253               	.LVL9:
 254 00da 5F91      		pop r21
 255 00dc 4F91      		pop r20
 256 00de 3F91      		pop r19
 257 00e0 2F91      		pop r18
 258 00e2 0F90      		pop r0
 259 00e4 0FBE      		out __SREG__,r0
 260 00e6 0F90      		pop r0
 261 00e8 1F90      		pop r1
 262 00ea 1895      		reti
 263               		.cfi_endproc
 264               	.LFE10:
 266               		.local	colbit.1639
 267               		.comm	colbit.1639,1,1
 268               		.local	first.1635
 269               		.comm	first.1635,1,1
 270               		.local	column.1637
 271               		.comm	column.1637,1,1
 272               		.local	bits.1638
 273               		.comm	bits.1638,1,1
 274               		.local	ramp.1636
 275               		.comm	ramp.1636,1,1
 276               	.global	order
 277               		.data
 280               	order:
 281 0000 00        		.byte	0
 282 0001 01        		.byte	1
 283 0002 02        		.byte	2
 284 0003 03        		.byte	3
 285 0004 04        		.byte	4
 286 0005 05        		.byte	5
 287 0006 06        		.byte	6
 288 0007 07        		.byte	7
 289 0008 08        		.byte	8
 290 0009 09        		.byte	9
 291 000a 0A        		.byte	10
 292 000b 0B        		.byte	11
 293               	.global	level
 296               	level:
 297 000c 01        		.byte	1
 298 000d 01        		.byte	1
 299 000e 03        		.byte	3
 300 000f 07        		.byte	7
 301 0010 0F        		.byte	15
 302 0011 1F        		.byte	31
 303 0012 3F        		.byte	63
 304 0013 1F        		.byte	31
 305 0014 0F        		.byte	15
 306 0015 07        		.byte	7
 307 0016 03        		.byte	3
 308 0017 01        		.byte	1
 309               	.global	cnt
 310               		.section .bss
 313               	cnt:
 314 0000 0000      		.zero	2
 315               		.text
 316               	.Letext0:
 317               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccUudNp0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccUudNp0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccUudNp0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccUudNp0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccUudNp0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccUudNp0.s:13     .text.startup:0000000000000000 main
     /tmp/ccUudNp0.s:296    .data:000000000000000c level
     /tmp/ccUudNp0.s:89     .text:0000000000000000 __vector_3
     /tmp/ccUudNp0.s:273    .bss:0000000000000006 ramp.1636
     /tmp/ccUudNp0.s:271    .bss:0000000000000005 bits.1638
     /tmp/ccUudNp0.s:269    .bss:0000000000000004 column.1637
     /tmp/ccUudNp0.s:267    .bss:0000000000000003 first.1635
                             .bss:0000000000000002 colbit.1639
     /tmp/ccUudNp0.s:280    .data:0000000000000000 order
     /tmp/ccUudNp0.s:313    .bss:0000000000000000 cnt

UNDEFINED SYMBOLS
__mulqi3
__do_copy_data
__do_clear_bss
