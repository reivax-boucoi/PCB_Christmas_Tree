   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB9:
  15               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/power.h>
   5:main.c        **** 
   6:main.c        **** #define ALL 0
   7:main.c        **** #define PIXIE 1
   8:main.c        **** #define SCROLL 2
   9:main.c        **** #define DEBUG 3
  10:main.c        **** #define NB_MODES 4
  11:main.c        **** 
  12:main.c        **** #define TOUCH_FLAG 0
  13:main.c        **** //#define ADC_FLAG 1
  14:main.c        **** #define DEBUG_FLAG 2
  15:main.c        **** #define DIR_FLAG 2
  16:main.c        **** 
  17:main.c        **** volatile uint8_t cnt=1;
  18:main.c        **** volatile uint8_t level[12];
  19:main.c        **** //uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 }; //Brightness levels of each led.
  20:main.c        **** //uint8_t order[12] = {0,11,9,4,2,10,7,6,3,1,8,5};//Reverse
  21:main.c        **** const uint8_t order[12] = {3,8,2,7,9,4,5,1,0,6,11,10};//Right
  22:main.c        **** volatile uint8_t blinkMode = ALL;
  23:main.c        **** volatile uint8_t pstate=0;
  24:main.c        **** /*
  25:main.c        **** static	long	randx;
  26:main.c        **** static	char	randf;
  27:main.c        **** 
  28:main.c        **** void srand(unsigned x){
  29:main.c        **** 	randx = x;
  30:main.c        **** 	randf = 1;
  31:main.c        **** }
  32:main.c        **** 
  33:main.c        **** int rand(void){
  34:main.c        **** 	if(!randf)srand(1);
  35:main.c        **** 	return((int)((randx = randx*1103515245L + 12345)>>16) & 077777);
  36:main.c        **** }
  37:main.c        **** */
  38:main.c        **** volatile uint8_t brightness=5;
  39:main.c        **** volatile uint8_t speed=63;
  40:main.c        **** volatile uint8_t index=1;
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** int main(void){
  16               		.loc 1 43 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  44:main.c        ****       
  45:main.c        ****     //Timer1 for LED charlieplexing
  46:main.c        ****     TCCR1=(1<<CTC1)|(1<<CS12);//|(1<<CS10)|(1<<CS11);        //Divide clock by 1, was 2<<CS10
  22               		.loc 1 46 0
  23 0000 84E8      		ldi r24,lo8(-124)
  24 0002 80BF      		out 0x30,r24
  47:main.c        ****     GTCCR=0;                          //No PWM
  25               		.loc 1 47 0
  26 0004 1CBC      		out 0x2c,__zero_reg__
  48:main.c        ****     OCR1A=0;                          //No PWM
  27               		.loc 1 48 0
  28 0006 1EBC      		out 0x2e,__zero_reg__
  49:main.c        ****     OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
  29               		.loc 1 49 0
  30 0008 89EF      		ldi r24,lo8(-7)
  31 000a 8DBD      		out 0x2d,r24
  50:main.c        ****     TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
  32               		.loc 1 50 0
  33 000c 89B7      		in r24,0x39
  34 000e 8064      		ori r24,lo8(64)
  35 0010 89BF      		out 0x39,r24
  51:main.c        ****     /*
  52:main.c        ****     TCCR0A=(1<<WGM01);
  53:main.c        ****     OCR0A=255;
  54:main.c        ****     TCCR0B=(1<<CS02)|(1<<CS00);
  55:main.c        ****     TIMSK|=(1<<OCIE0A);
  56:main.c        ****     */
  57:main.c        ****     /*
  58:main.c        ****     ADMUX=(1<<MUX3)|(1<<MUX2);
  59:main.c        ****     ADCSRA |= (1<<ADEN) | (1<<ADIE);
  60:main.c        ****     */
  61:main.c        ****     PCMSK|=(1<<PCINT4);
  36               		.loc 1 61 0
  37 0012 AC9A      		sbi 0x15,4
  62:main.c        ****     GIMSK|=(1<<PCIE);
  38               		.loc 1 62 0
  39 0014 8BB7      		in r24,0x3b
  40 0016 8062      		ori r24,lo8(32)
  41 0018 8BBF      		out 0x3b,r24
  63:main.c        ****     
  64:main.c        ****     sei();                              //Enable interrupts
  42               		.loc 1 64 0
  43               	/* #APP */
  44               	 ;  64 "main.c" 1
  45 001a 7894      		sei
  46               	 ;  0 "" 2
  47               	/* #NOAPP */
  48               	.L2:
  49 001c 00C0      		rjmp .L2
  50               		.cfi_endproc
  51               	.LFE9:
  53               		.text
  54               	.global	__vector_2
  56               	__vector_2:
  57               	.LFB10:
  65:main.c        ****     while(1){
  66:main.c        ****         
  67:main.c        **** 
  68:main.c        ****         /*if(pstate&(1<<DEBUG_FLAG)){
  69:main.c        ****             //pstate&=~(1<<DEBUG_FLAG);  
  70:main.c        ****         }  */
  71:main.c        **** /*
  72:main.c        ****         if(pstate&(1<<ADC_FLAG)){
  73:main.c        ****             pstate&=~(1<<ADC_FLAG);   
  74:main.c        ****             ADCSRA |= (1<<ADSC);
  75:main.c        ****         }*/
  76:main.c        **** 
  77:main.c        ****     }
  78:main.c        ****     return 0;
  79:main.c        **** }     
  80:main.c        **** /*
  81:main.c        **** ISR(ADC_vect){
  82:main.c        ****     uint16_t res=ADCL;
  83:main.c        ****     res|=(ADCH<<8);
  84:main.c        ****     blinkMode=2753/res-3;   //Vcc=1024*1.1/ADC
  85:main.c        **** }*/
  86:main.c        **** /*
  87:main.c        **** ISR(TIM0_COMPA_vect) {
  88:main.c        ****     
  89:main.c        **** }*/
  90:main.c        **** 
  91:main.c        **** ISR(PCINT0_vect){
  58               		.loc 1 91 0
  59               		.cfi_startproc
  60 0000 1F92      		push r1
  61               	.LCFI0:
  62               		.cfi_def_cfa_offset 3
  63               		.cfi_offset 1, -2
  64 0002 0F92      		push r0
  65               	.LCFI1:
  66               		.cfi_def_cfa_offset 4
  67               		.cfi_offset 0, -3
  68 0004 0FB6      		in r0,__SREG__
  69 0006 0F92      		push r0
  70 0008 1124      		clr __zero_reg__
  71 000a 8F93      		push r24
  72               	.LCFI2:
  73               		.cfi_def_cfa_offset 5
  74               		.cfi_offset 24, -4
  75 000c 9F93      		push r25
  76               	.LCFI3:
  77               		.cfi_def_cfa_offset 6
  78               		.cfi_offset 25, -5
  79 000e EF93      		push r30
  80               	.LCFI4:
  81               		.cfi_def_cfa_offset 7
  82               		.cfi_offset 30, -6
  83 0010 FF93      		push r31
  84               	.LCFI5:
  85               		.cfi_def_cfa_offset 8
  86               		.cfi_offset 31, -7
  87               	/* prologue: Signal */
  88               	/* frame size = 0 */
  89               	/* stack size = 7 */
  90               	.L__stack_usage = 7
  92:main.c        ****     if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
  91               		.loc 1 92 0
  92 0012 B49B      		sbis 0x16,4
  93 0014 00C0      		rjmp .L5
  94               		.loc 1 92 0 is_stmt 0 discriminator 1
  95 0016 8091 0000 		lds r24,pstate
  96 001a 80FF      		sbrs r24,0
  97 001c 00C0      		rjmp .L5
  93:main.c        ****     pstate&=~(1<<TOUCH_FLAG);   
  98               		.loc 1 93 0 is_stmt 1
  99 001e 8091 0000 		lds r24,pstate
 100 0022 8E7F      		andi r24,lo8(-2)
 101 0024 8093 0000 		sts pstate,r24
  94:main.c        ****     blinkMode++;
 102               		.loc 1 94 0
 103 0028 8091 0000 		lds r24,blinkMode
 104 002c 8F5F      		subi r24,lo8(-(1))
 105 002e 8093 0000 		sts blinkMode,r24
  95:main.c        ****     if(blinkMode>=NB_MODES)blinkMode=0;
 106               		.loc 1 95 0
 107 0032 8091 0000 		lds r24,blinkMode
 108 0036 8430      		cpi r24,lo8(4)
 109 0038 00F0      		brlo .L6
 110               		.loc 1 95 0 is_stmt 0 discriminator 1
 111 003a 1092 0000 		sts blinkMode,__zero_reg__
 112               	.L6:
  96:main.c        ****     brightness=0;
 113               		.loc 1 96 0 is_stmt 1
 114 003e 1092 0000 		sts brightness,__zero_reg__
  97:main.c        ****     pstate|=(1<<DIR_FLAG);
 115               		.loc 1 97 0
 116 0042 8091 0000 		lds r24,pstate
 117 0046 8460      		ori r24,lo8(4)
 118 0048 8093 0000 		sts pstate,r24
  98:main.c        ****     index=0;
 119               		.loc 1 98 0
 120 004c 1092 0000 		sts index,__zero_reg__
 121               	.LVL0:
 122 0050 80E0      		ldi r24,0
 123 0052 90E0      		ldi r25,0
 124               	.LVL1:
 125               	.L7:
 126               	.LBB2:
  99:main.c        ****     for(uint8_t i=0;i<12;i++){
 100:main.c        ****         level[i]=0;
 127               		.loc 1 100 0 discriminator 3
 128 0054 FC01      		movw r30,r24
 129 0056 E050      		subi r30,lo8(-(level))
 130 0058 F040      		sbci r31,hi8(-(level))
 131 005a 1082      		st Z,__zero_reg__
 132               	.LVL2:
 133 005c 0196      		adiw r24,1
 134               	.LVL3:
  99:main.c        ****     for(uint8_t i=0;i<12;i++){
 135               		.loc 1 99 0 discriminator 3
 136 005e 8C30      		cpi r24,12
 137 0060 9105      		cpc r25,__zero_reg__
 138 0062 01F4      		brne .L7
 139 0064 00C0      		rjmp .L4
 140               	.LVL4:
 141               	.L5:
 142               	.LBE2:
 101:main.c        ****     }
 102:main.c        **** }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 143               		.loc 1 102 0
 144 0066 B499      		sbic 0x16,4
 145 0068 00C0      		rjmp .L4
 146               		.loc 1 102 0 is_stmt 0 discriminator 1
 147 006a 8091 0000 		lds r24,pstate
 148 006e 80FD      		sbrc r24,0
 149 0070 00C0      		rjmp .L4
 103:main.c        ****     pstate|=(1<<TOUCH_FLAG);            
 150               		.loc 1 103 0 is_stmt 1
 151 0072 8091 0000 		lds r24,pstate
 152 0076 8160      		ori r24,lo8(1)
 153 0078 8093 0000 		sts pstate,r24
 154               	.L4:
 155               	/* epilogue start */
 104:main.c        **** }
 105:main.c        **** }
 156               		.loc 1 105 0
 157 007c FF91      		pop r31
 158 007e EF91      		pop r30
 159 0080 9F91      		pop r25
 160 0082 8F91      		pop r24
 161 0084 0F90      		pop r0
 162 0086 0FBE      		out __SREG__,r0
 163 0088 0F90      		pop r0
 164 008a 1F90      		pop r1
 165 008c 1895      		reti
 166               		.cfi_endproc
 167               	.LFE10:
 169               	.global	__vector_3
 171               	__vector_3:
 172               	.LFB11:
 106:main.c        **** 
 107:main.c        **** 
 108:main.c        **** ISR(TIM1_COMPA_vect) {
 173               		.loc 1 108 0
 174               		.cfi_startproc
 175 008e 1F92      		push r1
 176               	.LCFI6:
 177               		.cfi_def_cfa_offset 3
 178               		.cfi_offset 1, -2
 179 0090 0F92      		push r0
 180               	.LCFI7:
 181               		.cfi_def_cfa_offset 4
 182               		.cfi_offset 0, -3
 183 0092 0FB6      		in r0,__SREG__
 184 0094 0F92      		push r0
 185 0096 1124      		clr __zero_reg__
 186 0098 2F93      		push r18
 187               	.LCFI8:
 188               		.cfi_def_cfa_offset 5
 189               		.cfi_offset 18, -4
 190 009a 3F93      		push r19
 191               	.LCFI9:
 192               		.cfi_def_cfa_offset 6
 193               		.cfi_offset 19, -5
 194 009c 4F93      		push r20
 195               	.LCFI10:
 196               		.cfi_def_cfa_offset 7
 197               		.cfi_offset 20, -6
 198 009e 5F93      		push r21
 199               	.LCFI11:
 200               		.cfi_def_cfa_offset 8
 201               		.cfi_offset 21, -7
 202 00a0 6F93      		push r22
 203               	.LCFI12:
 204               		.cfi_def_cfa_offset 9
 205               		.cfi_offset 22, -8
 206 00a2 7F93      		push r23
 207               	.LCFI13:
 208               		.cfi_def_cfa_offset 10
 209               		.cfi_offset 23, -9
 210 00a4 8F93      		push r24
 211               	.LCFI14:
 212               		.cfi_def_cfa_offset 11
 213               		.cfi_offset 24, -10
 214 00a6 9F93      		push r25
 215               	.LCFI15:
 216               		.cfi_def_cfa_offset 12
 217               		.cfi_offset 25, -11
 218 00a8 EF93      		push r30
 219               	.LCFI16:
 220               		.cfi_def_cfa_offset 13
 221               		.cfi_offset 30, -12
 222 00aa FF93      		push r31
 223               	.LCFI17:
 224               		.cfi_def_cfa_offset 14
 225               		.cfi_offset 31, -13
 226               	/* prologue: Signal */
 227               	/* frame size = 0 */
 228               	/* stack size = 13 */
 229               	.L__stack_usage = 13
 109:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
 110:main.c        ****   ramp = (ramp+1) & 0x07;
 230               		.loc 1 110 0
 231 00ac 9091 0000 		lds r25,ramp.1644
 232 00b0 9F5F      		subi r25,lo8(-(1))
 233 00b2 9770      		andi r25,lo8(7)
 234 00b4 9093 0000 		sts ramp.1644,r25
 111:main.c        ****   if (ramp == 0) {
 235               		.loc 1 111 0
 236 00b8 9111      		cpse r25,__zero_reg__
 237 00ba 00C0      		rjmp .L18
 112:main.c        ****     bits = 0x07;
 238               		.loc 1 112 0
 239 00bc 87E0      		ldi r24,lo8(7)
 240 00be 8093 0000 		sts bits.1646,r24
 113:main.c        ****     column = (column + 1) & 0x03;
 241               		.loc 1 113 0
 242 00c2 2091 0000 		lds r18,column.1645
 243 00c6 2F5F      		subi r18,lo8(-(1))
 244 00c8 2370      		andi r18,lo8(3)
 245 00ca 2093 0000 		sts column.1645,r18
 114:main.c        ****     first = column * 3;
 246               		.loc 1 114 0
 247 00ce 822F      		mov r24,r18
 248 00d0 63E0      		ldi r22,lo8(3)
 249 00d2 00D0      		rcall __mulqi3
 250 00d4 8093 0000 		sts first.1643,r24
 115:main.c        ****     colbit = 1<<column;
 251               		.loc 1 115 0
 252 00d8 41E0      		ldi r20,lo8(1)
 253 00da 50E0      		ldi r21,0
 254 00dc BA01      		movw r22,r20
 255 00de 00C0      		rjmp 2f
 256               		1:
 257 00e0 660F      		lsl r22
 258 00e2 771F      		rol r23
 259               		2:
 260 00e4 2A95      		dec r18
 261 00e6 02F4      		brpl 1b
 262 00e8 6093 0000 		sts colbit.1647,r22
 263               	.L18:
 116:main.c        ****   }
 117:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 264               		.loc 1 117 0
 265 00ec 2091 0000 		lds r18,first.1643
 266 00f0 30E0      		ldi r19,0
 267 00f2 F901      		movw r30,r18
 268 00f4 E050      		subi r30,lo8(-(level))
 269 00f6 F040      		sbci r31,hi8(-(level))
 270 00f8 8081      		ld r24,Z
 271 00fa 9813      		cpse r25,r24
 272 00fc 00C0      		rjmp .L19
 273               		.loc 1 117 0 is_stmt 0 discriminator 1
 274 00fe 8091 0000 		lds r24,bits.1646
 275 0102 8670      		andi r24,lo8(6)
 276 0104 8093 0000 		sts bits.1646,r24
 277               	.L19:
 118:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 278               		.loc 1 118 0 is_stmt 1
 279 0108 F901      		movw r30,r18
 280 010a E050      		subi r30,lo8(-(level+1))
 281 010c F040      		sbci r31,hi8(-(level+1))
 282 010e 8081      		ld r24,Z
 283 0110 9813      		cpse r25,r24
 284 0112 00C0      		rjmp .L20
 285               		.loc 1 118 0 is_stmt 0 discriminator 1
 286 0114 8091 0000 		lds r24,bits.1646
 287 0118 8570      		andi r24,lo8(5)
 288 011a 8093 0000 		sts bits.1646,r24
 289               	.L20:
 119:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 290               		.loc 1 119 0 is_stmt 1
 291 011e F901      		movw r30,r18
 292 0120 E050      		subi r30,lo8(-(level+2))
 293 0122 F040      		sbci r31,hi8(-(level+2))
 294 0124 8081      		ld r24,Z
 295 0126 9813      		cpse r25,r24
 296 0128 00C0      		rjmp .L21
 297               		.loc 1 119 0 is_stmt 0 discriminator 1
 298 012a 8091 0000 		lds r24,bits.1646
 299 012e 8370      		andi r24,lo8(3)
 300 0130 8093 0000 		sts bits.1646,r24
 301               	.L21:
 120:main.c        ****   uint8_t mask = colbit - 1;
 302               		.loc 1 120 0 is_stmt 1
 303 0134 4091 0000 		lds r20,colbit.1647
 304 0138 6FEF      		ldi r22,lo8(-1)
 305 013a 640F      		add r22,r20
 306               	.LVL5:
 121:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 307               		.loc 1 121 0
 308 013c 5091 0000 		lds r21,bits.1646
 309 0140 862F      		mov r24,r22
 310 0142 90E0      		ldi r25,0
 311 0144 8095      		com r24
 312 0146 9095      		com r25
 313 0148 252F      		mov r18,r21
 314 014a 30E0      		ldi r19,0
 315 014c 8223      		and r24,r18
 316 014e 9323      		and r25,r19
 317 0150 880F      		lsl r24
 318 0152 991F      		rol r25
 319 0154 5623      		and r21,r22
 320 0156 852B      		or r24,r21
 321               	.LVL6:
 122:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 322               		.loc 1 122 0
 323 0158 97B3      		in r25,0x17
 324 015a 907F      		andi r25,lo8(-16)
 325 015c 492B      		or r20,r25
 326 015e 482B      		or r20,r24
 327 0160 47BB      		out 0x17,r20
 123:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 328               		.loc 1 123 0
 329 0162 98B3      		in r25,0x18
 330 0164 907F      		andi r25,lo8(-16)
 331 0166 892B      		or r24,r25
 332               	.LVL7:
 333 0168 88BB      		out 0x18,r24
 124:main.c        ****     
 125:main.c        ****     cnt++;
 334               		.loc 1 125 0
 335 016a 8091 0000 		lds r24,cnt
 336 016e 8F5F      		subi r24,lo8(-(1))
 337 0170 8093 0000 		sts cnt,r24
 126:main.c        ****     if(cnt==speed){
 338               		.loc 1 126 0
 339 0174 9091 0000 		lds r25,cnt
 340 0178 8091 0000 		lds r24,speed
 341 017c 9813      		cpse r25,r24
 342 017e 00C0      		rjmp .L17
 127:main.c        ****         cnt=0;
 343               		.loc 1 127 0
 344 0180 1092 0000 		sts cnt,__zero_reg__
 128:main.c        ****     switch(blinkMode){
 345               		.loc 1 128 0
 346 0184 8091 0000 		lds r24,blinkMode
 347 0188 8130      		cpi r24,lo8(1)
 348 018a 01F4      		brne .+2
 349 018c 00C0      		rjmp .L24
 350 018e 00F4      		brsh .+2
 351 0190 00C0      		rjmp .L25
 352 0192 8230      		cpi r24,lo8(2)
 353 0194 01F0      		breq .+2
 354 0196 00C0      		rjmp .L17
 129:main.c        ****         case SCROLL:
 130:main.c        ****             if(pstate&(1<<DIR_FLAG)){
 355               		.loc 1 130 0
 356 0198 8091 0000 		lds r24,pstate
 131:main.c        ****                 level[order[index]]=brightness++;
 357               		.loc 1 131 0
 358 019c E091 0000 		lds r30,index
 359 01a0 F0E0      		ldi r31,0
 360 01a2 E050      		subi r30,lo8(-(order))
 361 01a4 F040      		sbci r31,hi8(-(order))
 362 01a6 E081      		ld r30,Z
 363 01a8 F0E0      		ldi r31,0
 130:main.c        ****                 level[order[index]]=brightness++;
 364               		.loc 1 130 0
 365 01aa 82FF      		sbrs r24,2
 366 01ac 00C0      		rjmp .L27
 367               		.loc 1 131 0
 368 01ae 8091 0000 		lds r24,brightness
 369 01b2 91E0      		ldi r25,lo8(1)
 370 01b4 980F      		add r25,r24
 371 01b6 9093 0000 		sts brightness,r25
 372 01ba E050      		subi r30,lo8(-(level))
 373 01bc F040      		sbci r31,hi8(-(level))
 374 01be 8083      		st Z,r24
 132:main.c        ****                 if(brightness>7){
 375               		.loc 1 132 0
 376 01c0 8091 0000 		lds r24,brightness
 377 01c4 8830      		cpi r24,lo8(8)
 378 01c6 00F4      		brsh .+2
 379 01c8 00C0      		rjmp .L17
 133:main.c        ****                     brightness=0;
 380               		.loc 1 133 0
 381 01ca 1092 0000 		sts brightness,__zero_reg__
 134:main.c        ****                     index++;
 382               		.loc 1 134 0
 383 01ce 8091 0000 		lds r24,index
 384 01d2 8F5F      		subi r24,lo8(-(1))
 385 01d4 8093 0000 		sts index,r24
 135:main.c        ****                     if(index>11){
 386               		.loc 1 135 0
 387 01d8 8091 0000 		lds r24,index
 388 01dc 8C30      		cpi r24,lo8(12)
 389 01de 00F4      		brsh .+2
 390 01e0 00C0      		rjmp .L17
 136:main.c        ****                         index=11;
 391               		.loc 1 136 0
 392 01e2 8BE0      		ldi r24,lo8(11)
 393 01e4 8093 0000 		sts index,r24
 137:main.c        ****                         brightness=7;
 394               		.loc 1 137 0
 395 01e8 87E0      		ldi r24,lo8(7)
 396 01ea 8093 0000 		sts brightness,r24
 138:main.c        ****                         pstate&=~(1<<DIR_FLAG);
 397               		.loc 1 138 0
 398 01ee 8091 0000 		lds r24,pstate
 399 01f2 8B7F      		andi r24,lo8(-5)
 400 01f4 00C0      		rjmp .L32
 401               	.L27:
 139:main.c        ****                     }
 140:main.c        ****                 }
 141:main.c        ****             }else{
 142:main.c        ****                 level[order[index]]=brightness--;
 402               		.loc 1 142 0
 403 01f6 8091 0000 		lds r24,brightness
 404 01fa 9FEF      		ldi r25,lo8(-1)
 405 01fc 980F      		add r25,r24
 406 01fe 9093 0000 		sts brightness,r25
 407 0202 E050      		subi r30,lo8(-(level))
 408 0204 F040      		sbci r31,hi8(-(level))
 409 0206 8083      		st Z,r24
 143:main.c        ****                 if(brightness==0){
 410               		.loc 1 143 0
 411 0208 8091 0000 		lds r24,brightness
 412 020c 8111      		cpse r24,__zero_reg__
 413 020e 00C0      		rjmp .L17
 144:main.c        ****                     brightness=7;
 414               		.loc 1 144 0
 415 0210 87E0      		ldi r24,lo8(7)
 416 0212 8093 0000 		sts brightness,r24
 145:main.c        ****                     index--;
 417               		.loc 1 145 0
 418 0216 8091 0000 		lds r24,index
 419 021a 8150      		subi r24,lo8(-(-1))
 420 021c 8093 0000 		sts index,r24
 146:main.c        ****                     if(index==0){
 421               		.loc 1 146 0
 422 0220 8091 0000 		lds r24,index
 423 0224 8111      		cpse r24,__zero_reg__
 424 0226 00C0      		rjmp .L17
 147:main.c        ****                         index=0;
 425               		.loc 1 147 0
 426 0228 1092 0000 		sts index,__zero_reg__
 148:main.c        ****                         brightness=0;
 427               		.loc 1 148 0
 428 022c 1092 0000 		sts brightness,__zero_reg__
 149:main.c        ****                         pstate|=(1<<DIR_FLAG);
 429               		.loc 1 149 0
 430 0230 8091 0000 		lds r24,pstate
 431 0234 8460      		ori r24,lo8(4)
 432               	.L32:
 433 0236 8093 0000 		sts pstate,r24
 434 023a 00C0      		rjmp .L17
 435               	.L25:
 150:main.c        ****                     }
 151:main.c        ****                 }
 152:main.c        ****             }
 153:main.c        ****             
 154:main.c        ****             break;
 155:main.c        ****         case ALL:
 156:main.c        ****             level[order[index]]=brightness;
 436               		.loc 1 156 0
 437 023c E091 0000 		lds r30,index
 438 0240 F0E0      		ldi r31,0
 439 0242 E050      		subi r30,lo8(-(order))
 440 0244 F040      		sbci r31,hi8(-(order))
 441 0246 E081      		ld r30,Z
 442 0248 F0E0      		ldi r31,0
 443 024a 8091 0000 		lds r24,brightness
 444 024e E050      		subi r30,lo8(-(level))
 445 0250 F040      		sbci r31,hi8(-(level))
 446 0252 8083      		st Z,r24
 157:main.c        ****             brightness=(brightness+1)&0x07;
 447               		.loc 1 157 0
 448 0254 8091 0000 		lds r24,brightness
 449 0258 8F5F      		subi r24,lo8(-(1))
 450 025a 8770      		andi r24,lo8(7)
 451 025c 8093 0000 		sts brightness,r24
 158:main.c        ****             if(brightness==0){
 452               		.loc 1 158 0
 453 0260 8091 0000 		lds r24,brightness
 454 0264 8823      		tst r24
 455 0266 01F0      		breq .L35
 456 0268 00C0      		rjmp .L17
 457               	.L24:
 159:main.c        ****                 //level[order[index]]=0;
 160:main.c        ****                 index++;
 161:main.c        ****                 if(index>11)index=0;
 162:main.c        ****             }
 163:main.c        ****             break;
 164:main.c        ****         case PIXIE:
 165:main.c        ****             switch(++brightness){
 458               		.loc 1 165 0
 459 026a 8091 0000 		lds r24,brightness
 460 026e 8F5F      		subi r24,lo8(-(1))
 461 0270 8093 0000 		sts brightness,r24
 462 0274 8230      		cpi r24,lo8(2)
 463 0276 01F0      		breq .L29
 464 0278 8A30      		cpi r24,lo8(10)
 465 027a 01F0      		breq .L30
 466 027c 8130      		cpi r24,lo8(1)
 467 027e 01F4      		brne .L17
 166:main.c        ****                 case 1:
 167:main.c        ****                     level[index]=7;
 468               		.loc 1 167 0
 469 0280 E091 0000 		lds r30,index
 470 0284 F0E0      		ldi r31,0
 471 0286 E050      		subi r30,lo8(-(level))
 472 0288 F040      		sbci r31,hi8(-(level))
 473 028a 87E0      		ldi r24,lo8(7)
 474 028c 8083      		st Z,r24
 168:main.c        ****                 break;
 475               		.loc 1 168 0
 476 028e 00C0      		rjmp .L17
 477               	.L29:
 169:main.c        ****                 case 2:
 170:main.c        ****                     level[index]=0;
 478               		.loc 1 170 0
 479 0290 E091 0000 		lds r30,index
 480 0294 F0E0      		ldi r31,0
 481 0296 E050      		subi r30,lo8(-(level))
 482 0298 F040      		sbci r31,hi8(-(level))
 483 029a 1082      		st Z,__zero_reg__
 171:main.c        ****                 break;
 484               		.loc 1 171 0
 485 029c 00C0      		rjmp .L17
 486               	.L30:
 172:main.c        ****                 case 10:
 173:main.c        ****                     brightness=0;
 487               		.loc 1 173 0
 488 029e 1092 0000 		sts brightness,__zero_reg__
 489               	.L35:
 174:main.c        ****                     index++;
 490               		.loc 1 174 0
 491 02a2 8091 0000 		lds r24,index
 492 02a6 8F5F      		subi r24,lo8(-(1))
 493 02a8 8093 0000 		sts index,r24
 175:main.c        ****                     if(index>11)index=0;
 494               		.loc 1 175 0
 495 02ac 8091 0000 		lds r24,index
 496 02b0 8C30      		cpi r24,lo8(12)
 497 02b2 00F0      		brlo .L17
 498               		.loc 1 175 0 is_stmt 0 discriminator 1
 499 02b4 1092 0000 		sts index,__zero_reg__
 500               	.L17:
 501               	/* epilogue start */
 176:main.c        ****             }
 177:main.c        **** 
 178:main.c        ****         case DEBUG:
 179:main.c        ****         default:
 180:main.c        ****             break;
 181:main.c        ****         }
 182:main.c        ****     }
 183:main.c        **** }
 502               		.loc 1 183 0 is_stmt 1
 503 02b8 FF91      		pop r31
 504 02ba EF91      		pop r30
 505 02bc 9F91      		pop r25
 506 02be 8F91      		pop r24
 507 02c0 7F91      		pop r23
 508 02c2 6F91      		pop r22
 509               	.LVL8:
 510 02c4 5F91      		pop r21
 511 02c6 4F91      		pop r20
 512 02c8 3F91      		pop r19
 513 02ca 2F91      		pop r18
 514 02cc 0F90      		pop r0
 515 02ce 0FBE      		out __SREG__,r0
 516 02d0 0F90      		pop r0
 517 02d2 1F90      		pop r1
 518 02d4 1895      		reti
 519               		.cfi_endproc
 520               	.LFE11:
 522               		.local	colbit.1647
 523               		.comm	colbit.1647,1,1
 524               		.local	first.1643
 525               		.comm	first.1643,1,1
 526               		.local	column.1645
 527               		.comm	column.1645,1,1
 528               		.local	bits.1646
 529               		.comm	bits.1646,1,1
 530               		.local	ramp.1644
 531               		.comm	ramp.1644,1,1
 532               	.global	index
 533               		.data
 536               	index:
 537 0000 01        		.byte	1
 538               	.global	speed
 541               	speed:
 542 0001 3F        		.byte	63
 543               	.global	brightness
 546               	brightness:
 547 0002 05        		.byte	5
 548               	.global	pstate
 549               		.section .bss
 552               	pstate:
 553 0000 00        		.zero	1
 554               	.global	blinkMode
 557               	blinkMode:
 558 0001 00        		.zero	1
 559               	.global	order
 560               		.section	.rodata
 563               	order:
 564 0000 03        		.byte	3
 565 0001 08        		.byte	8
 566 0002 02        		.byte	2
 567 0003 07        		.byte	7
 568 0004 09        		.byte	9
 569 0005 04        		.byte	4
 570 0006 05        		.byte	5
 571 0007 01        		.byte	1
 572 0008 00        		.byte	0
 573 0009 06        		.byte	6
 574 000a 0B        		.byte	11
 575 000b 0A        		.byte	10
 576               		.comm	level,12,1
 577               	.global	cnt
 578               		.data
 581               	cnt:
 582 0003 01        		.byte	1
 583               		.text
 584               	.Letext0:
 585               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccDnBOI7.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccDnBOI7.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccDnBOI7.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccDnBOI7.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccDnBOI7.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccDnBOI7.s:13     .text.startup:0000000000000000 main
     /tmp/ccDnBOI7.s:56     .text:0000000000000000 __vector_2
     /tmp/ccDnBOI7.s:552    .bss:0000000000000000 pstate
     /tmp/ccDnBOI7.s:557    .bss:0000000000000001 blinkMode
     /tmp/ccDnBOI7.s:546    .data:0000000000000002 brightness
     /tmp/ccDnBOI7.s:536    .data:0000000000000000 index
                            *COM*:000000000000000c level
     /tmp/ccDnBOI7.s:171    .text:000000000000008e __vector_3
     /tmp/ccDnBOI7.s:529    .bss:0000000000000006 ramp.1644
     /tmp/ccDnBOI7.s:527    .bss:0000000000000005 bits.1646
     /tmp/ccDnBOI7.s:525    .bss:0000000000000004 column.1645
     /tmp/ccDnBOI7.s:523    .bss:0000000000000003 first.1643
                             .bss:0000000000000002 colbit.1647
     /tmp/ccDnBOI7.s:581    .data:0000000000000003 cnt
     /tmp/ccDnBOI7.s:541    .data:0000000000000001 speed
     /tmp/ccDnBOI7.s:563    .rodata:0000000000000000 order

UNDEFINED SYMBOLS
__mulqi3
__do_copy_data
__do_clear_bss
