   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	srand
  12               	srand:
  13               	.LFB9:
  14               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/power.h>
   5:main.c        **** 
   6:main.c        **** #define FADE 0
   7:main.c        **** #define PIXIE 1
   8:main.c        **** #define SCROLL 2
   9:main.c        **** #define DEBUG 3
  10:main.c        **** #define NB_MODES 4
  11:main.c        **** 
  12:main.c        **** #define TOUCH_FLAG 0
  13:main.c        **** //#define ADC_FLAG 1
  14:main.c        **** #define DEBUG_FLAG 2
  15:main.c        **** #define DIR_FLAG 2
  16:main.c        **** 
  17:main.c        **** volatile unsigned int cnt=1;
  18:main.c        **** uint8_t level[12];
  19:main.c        **** //uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 }; //Brightness levels of each led.
  20:main.c        **** //uint8_t order[12] = {0,11,9,4,2,10,7,6,3,1,8,5};//Reverse
  21:main.c        **** const uint8_t order[12] = {3,8,2,7,9,4,5,1,0,6,11,10};//Right
  22:main.c        **** volatile uint8_t blinkMode = FADE;
  23:main.c        **** volatile uint8_t pstate=0;
  24:main.c        **** 
  25:main.c        **** static	long	randx;
  26:main.c        **** static	char	randf;
  27:main.c        **** 
  28:main.c        **** void srand(unsigned x){
  15               		.loc 1 28 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  29:main.c        **** 	randx = x;
  22               		.loc 1 29 0
  23 0000 A0E0      		ldi r26,0
  24 0002 B0E0      		ldi r27,0
  25 0004 8093 0000 		sts randx,r24
  26 0008 9093 0000 		sts randx+1,r25
  27 000c A093 0000 		sts randx+2,r26
  28 0010 B093 0000 		sts randx+3,r27
  30:main.c        **** 	randf = 1;
  29               		.loc 1 30 0
  30 0014 81E0      		ldi r24,lo8(1)
  31               	.LVL1:
  32 0016 8093 0000 		sts randf,r24
  33 001a 0895      		ret
  34               		.cfi_endproc
  35               	.LFE9:
  37               	.global	__mulsi3
  38               	.global	rand
  40               	rand:
  41               	.LFB10:
  31:main.c        **** }
  32:main.c        **** 
  33:main.c        **** int rand(void){
  42               		.loc 1 33 0
  43               		.cfi_startproc
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  34:main.c        **** 	if(!randf)srand(1);
  48               		.loc 1 34 0
  49 001c 8091 0000 		lds r24,randf
  50 0020 8111      		cpse r24,__zero_reg__
  51 0022 00C0      		rjmp .L3
  52               		.loc 1 34 0 is_stmt 0 discriminator 1
  53 0024 81E0      		ldi r24,lo8(1)
  54 0026 90E0      		ldi r25,0
  55 0028 00D0      		rcall srand
  56               	.LVL2:
  57               	.L3:
  35:main.c        **** 	return((int)((randx = randx*1103515245L + 12345)>>16) & 077777);
  58               		.loc 1 35 0 is_stmt 1
  59 002a 2DE6      		ldi r18,lo8(109)
  60 002c 3EE4      		ldi r19,lo8(78)
  61 002e 46EC      		ldi r20,lo8(-58)
  62 0030 51E4      		ldi r21,lo8(65)
  63 0032 6091 0000 		lds r22,randx
  64 0036 7091 0000 		lds r23,randx+1
  65 003a 8091 0000 		lds r24,randx+2
  66 003e 9091 0000 		lds r25,randx+3
  67 0042 00D0      		rcall __mulsi3
  68               	.LVL3:
  69 0044 675C      		subi r22,-57
  70 0046 7F4C      		sbci r23,-49
  71 0048 8F4F      		sbci r24,-1
  72 004a 9F4F      		sbci r25,-1
  73 004c 6093 0000 		sts randx,r22
  74 0050 7093 0000 		sts randx+1,r23
  75 0054 8093 0000 		sts randx+2,r24
  76 0058 9093 0000 		sts randx+3,r25
  36:main.c        **** }
  77               		.loc 1 36 0
  78 005c 9F77      		andi r25,127
  79 005e 0895      		ret
  80               		.cfi_endproc
  81               	.LFE10:
  83               		.section	.text.startup,"ax",@progbits
  84               	.global	main
  86               	main:
  87               	.LFB11:
  37:main.c        **** 
  38:main.c        **** volatile uint8_t brightness=5;
  39:main.c        **** volatile uint8_t duty=3;
  40:main.c        **** volatile uint8_t index=1;
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** int main(void){
  88               		.loc 1 43 0
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  44:main.c        ****       
  45:main.c        ****     //Timer1 for LED charlieplexing
  46:main.c        ****     TCCR1=(1<<CTC1)|(1<<CS12);//|(1<<CS10)|(1<<CS11);        //Divide clock by 1, was 2<<CS10
  94               		.loc 1 46 0
  95 0000 84E8      		ldi r24,lo8(-124)
  96 0002 80BF      		out 0x30,r24
  47:main.c        ****     GTCCR=0;                          //No PWM
  97               		.loc 1 47 0
  98 0004 1CBC      		out 0x2c,__zero_reg__
  48:main.c        ****     OCR1A=0;                          //No PWM
  99               		.loc 1 48 0
 100 0006 1EBC      		out 0x2e,__zero_reg__
  49:main.c        ****     OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
 101               		.loc 1 49 0
 102 0008 89EF      		ldi r24,lo8(-7)
 103 000a 8DBD      		out 0x2d,r24
  50:main.c        ****     TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
 104               		.loc 1 50 0
 105 000c 89B7      		in r24,0x39
 106 000e 8064      		ori r24,lo8(64)
 107 0010 89BF      		out 0x39,r24
  51:main.c        ****     
  52:main.c        ****     TCCR0A=(1<<WGM01);
 108               		.loc 1 52 0
 109 0012 82E0      		ldi r24,lo8(2)
 110 0014 8ABD      		out 0x2a,r24
  53:main.c        ****     OCR0A=255;
 111               		.loc 1 53 0
 112 0016 8FEF      		ldi r24,lo8(-1)
 113 0018 89BD      		out 0x29,r24
  54:main.c        ****     TCCR0B=(1<<CS02)|(1<<CS00);
 114               		.loc 1 54 0
 115 001a 85E0      		ldi r24,lo8(5)
 116 001c 83BF      		out 0x33,r24
  55:main.c        ****     TIMSK|=(1<<OCIE0A);
 117               		.loc 1 55 0
 118 001e 89B7      		in r24,0x39
 119 0020 8061      		ori r24,lo8(16)
 120 0022 89BF      		out 0x39,r24
  56:main.c        ****     
  57:main.c        ****     /*
  58:main.c        ****     ADMUX=(1<<MUX3)|(1<<MUX2);
  59:main.c        ****     ADCSRA |= (1<<ADEN) | (1<<ADIE);
  60:main.c        ****     */
  61:main.c        ****     
  62:main.c        ****     sei();                              //Enable interrupts
 121               		.loc 1 62 0
 122               	/* #APP */
 123               	 ;  62 "main.c" 1
 124 0024 7894      		sei
 125               	 ;  0 "" 2
 126               	/* #NOAPP */
 127               	.L11:
  63:main.c        ****     while(1){
  64:main.c        ****         
  65:main.c        ****         if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
 128               		.loc 1 65 0
 129 0026 B49B      		sbis 0x16,4
 130 0028 00C0      		rjmp .L6
 131               		.loc 1 65 0 is_stmt 0 discriminator 1
 132 002a 8091 0000 		lds r24,pstate
 133 002e 80FF      		sbrs r24,0
 134 0030 00C0      		rjmp .L6
  66:main.c        ****             pstate&=~(1<<TOUCH_FLAG);   
 135               		.loc 1 66 0 is_stmt 1
 136 0032 8091 0000 		lds r24,pstate
 137 0036 8E7F      		andi r24,lo8(-2)
 138 0038 8093 0000 		sts pstate,r24
  67:main.c        ****             blinkMode++;
 139               		.loc 1 67 0
 140 003c 8091 0000 		lds r24,blinkMode
 141 0040 8F5F      		subi r24,lo8(-(1))
 142 0042 8093 0000 		sts blinkMode,r24
  68:main.c        ****             if(blinkMode>=NB_MODES)blinkMode=0;
 143               		.loc 1 68 0
 144 0046 8091 0000 		lds r24,blinkMode
 145 004a 8430      		cpi r24,lo8(4)
 146 004c 00F0      		brlo .L7
 147               		.loc 1 68 0 is_stmt 0 discriminator 1
 148 004e 1092 0000 		sts blinkMode,__zero_reg__
 149               	.L7:
  69:main.c        ****             brightness=0;
 150               		.loc 1 69 0 is_stmt 1
 151 0052 1092 0000 		sts brightness,__zero_reg__
  70:main.c        ****             index=0;
 152               		.loc 1 70 0
 153 0056 1092 0000 		sts index,__zero_reg__
 154               	.LVL4:
 155 005a E0E0      		ldi r30,lo8(level)
 156 005c F0E0      		ldi r31,hi8(level)
 157               	.LVL5:
 158               	.L8:
 159               	.LBB2:
  71:main.c        ****             for(uint8_t i=0;i<12;i++){
  72:main.c        ****                 level[i]=0;
 160               		.loc 1 72 0 discriminator 3
 161 005e 1192      		st Z+,__zero_reg__
 162               	.LVL6:
  71:main.c        ****             for(uint8_t i=0;i<12;i++){
 163               		.loc 1 71 0 discriminator 3
 164 0060 80E0      		ldi r24,hi8(level+12)
 165 0062 E030      		cpi r30,lo8(level+12)
 166 0064 F807      		cpc r31,r24
 167 0066 01F4      		brne .L8
 168 0068 00C0      		rjmp .L9
 169               	.LVL7:
 170               	.L6:
 171               	.LBE2:
  73:main.c        ****             }
  74:main.c        ****                        
  75:main.c        ****         }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 172               		.loc 1 75 0
 173 006a B499      		sbic 0x16,4
 174 006c 00C0      		rjmp .L9
 175               		.loc 1 75 0 is_stmt 0 discriminator 1
 176 006e 8091 0000 		lds r24,pstate
 177 0072 80FD      		sbrc r24,0
 178 0074 00C0      		rjmp .L9
  76:main.c        ****             pstate|=(1<<TOUCH_FLAG);            
 179               		.loc 1 76 0 is_stmt 1
 180 0076 8091 0000 		lds r24,pstate
 181 007a 8160      		ori r24,lo8(1)
 182 007c 8093 0000 		sts pstate,r24
 183               	.L9:
  77:main.c        ****         }
  78:main.c        ****         if(pstate&(1<<DEBUG_FLAG)){
 184               		.loc 1 78 0
 185 0080 8091 0000 		lds r24,pstate
  79:main.c        ****             //pstate&=~(1<<DEBUG_FLAG);  
  80:main.c        ****         }  
  81:main.c        **** /*
  82:main.c        ****         if(pstate&(1<<ADC_FLAG)){
  83:main.c        ****             pstate&=~(1<<ADC_FLAG);   
  84:main.c        ****             ADCSRA |= (1<<ADSC);
  85:main.c        ****         }*/
  86:main.c        **** 
  87:main.c        ****     }
 186               		.loc 1 87 0
 187 0084 00C0      		rjmp .L11
 188               		.cfi_endproc
 189               	.LFE11:
 191               		.text
 192               	.global	__vector_10
 194               	__vector_10:
 195               	.LFB12:
  88:main.c        ****     return 0;
  89:main.c        **** }     
  90:main.c        **** /*
  91:main.c        **** ISR(ADC_vect){
  92:main.c        ****     uint16_t res=ADCL;
  93:main.c        ****     res|=(ADCH<<8);
  94:main.c        ****     blinkMode=2753/res-3;   //Vcc=1024*1.1/ADC
  95:main.c        **** }*/
  96:main.c        **** 
  97:main.c        **** ISR(TIM0_COMPA_vect) {
 196               		.loc 1 97 0
 197               		.cfi_startproc
 198 0060 1F92      		push r1
 199               	.LCFI0:
 200               		.cfi_def_cfa_offset 3
 201               		.cfi_offset 1, -2
 202 0062 0F92      		push r0
 203               	.LCFI1:
 204               		.cfi_def_cfa_offset 4
 205               		.cfi_offset 0, -3
 206 0064 0FB6      		in r0,__SREG__
 207 0066 0F92      		push r0
 208 0068 1124      		clr __zero_reg__
 209               	/* prologue: Signal */
 210               	/* frame size = 0 */
 211               	/* stack size = 3 */
 212               	.L__stack_usage = 3
 213               	/* epilogue start */
  98:main.c        ****     /*if(pstate&(1<<DIR_FLAG)){
  99:main.c        ****         cnt++;
 100:main.c        ****     }else{
 101:main.c        ****         cnt--;
 102:main.c        ****     }
 103:main.c        ****     switch(blinkMode){
 104:main.c        ****         case(PIXIE):
 105:main.c        ****             if(cnt==duty){
 106:main.c        ****                 level[index]=15;
 107:main.c        ****             }else if(cnt>=speed){
 108:main.c        ****                 cnt=0;
 109:main.c        ****                 level[index]=0; 
 110:main.c        ****                 index=rand()/2730;
 111:main.c        ****             }
 112:main.c        ****         break;
 113:main.c        ****         case(DEBUG):
 114:main.c        ****             if(cnt>15){
 115:main.c        ****                 pstate&=~(1<<DIR_FLAG);
 116:main.c        ****                 level[order[index]]=0; 
 117:main.c        ****                 index--;
 118:main.c        ****                 if(index==255)index=11;
 119:main.c        ****             }else if(cnt==0){
 120:main.c        ****                 pstate|=(1<<DIR_FLAG);
 121:main.c        ****             }
 122:main.c        ****             level[order[index]]=cnt; 
 123:main.c        ****             
 124:main.c        ****             break;
 125:main.c        ****     }*/
 126:main.c        ****  
 127:main.c        **** 
 128:main.c        ****     
 129:main.c        **** }
 214               		.loc 1 129 0
 215 006a 0F90      		pop r0
 216 006c 0FBE      		out __SREG__,r0
 217 006e 0F90      		pop r0
 218 0070 1F90      		pop r1
 219 0072 1895      		reti
 220               		.cfi_endproc
 221               	.LFE12:
 223               	.global	__vector_3
 225               	__vector_3:
 226               	.LFB13:
 130:main.c        **** 
 131:main.c        **** 
 132:main.c        **** ISR(TIM1_COMPA_vect) {
 227               		.loc 1 132 0
 228               		.cfi_startproc
 229 0074 1F92      		push r1
 230               	.LCFI2:
 231               		.cfi_def_cfa_offset 3
 232               		.cfi_offset 1, -2
 233 0076 0F92      		push r0
 234               	.LCFI3:
 235               		.cfi_def_cfa_offset 4
 236               		.cfi_offset 0, -3
 237 0078 0FB6      		in r0,__SREG__
 238 007a 0F92      		push r0
 239 007c 1124      		clr __zero_reg__
 240 007e 2F93      		push r18
 241               	.LCFI4:
 242               		.cfi_def_cfa_offset 5
 243               		.cfi_offset 18, -4
 244 0080 3F93      		push r19
 245               	.LCFI5:
 246               		.cfi_def_cfa_offset 6
 247               		.cfi_offset 19, -5
 248 0082 4F93      		push r20
 249               	.LCFI6:
 250               		.cfi_def_cfa_offset 7
 251               		.cfi_offset 20, -6
 252 0084 5F93      		push r21
 253               	.LCFI7:
 254               		.cfi_def_cfa_offset 8
 255               		.cfi_offset 21, -7
 256 0086 6F93      		push r22
 257               	.LCFI8:
 258               		.cfi_def_cfa_offset 9
 259               		.cfi_offset 22, -8
 260 0088 7F93      		push r23
 261               	.LCFI9:
 262               		.cfi_def_cfa_offset 10
 263               		.cfi_offset 23, -9
 264 008a 8F93      		push r24
 265               	.LCFI10:
 266               		.cfi_def_cfa_offset 11
 267               		.cfi_offset 24, -10
 268 008c 9F93      		push r25
 269               	.LCFI11:
 270               		.cfi_def_cfa_offset 12
 271               		.cfi_offset 25, -11
 272 008e EF93      		push r30
 273               	.LCFI12:
 274               		.cfi_def_cfa_offset 13
 275               		.cfi_offset 30, -12
 276 0090 FF93      		push r31
 277               	.LCFI13:
 278               		.cfi_def_cfa_offset 14
 279               		.cfi_offset 31, -13
 280               	/* prologue: Signal */
 281               	/* frame size = 0 */
 282               	/* stack size = 13 */
 283               	.L__stack_usage = 13
 133:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
 134:main.c        ****   ramp = (ramp+1) & 0x07;
 284               		.loc 1 134 0
 285 0092 9091 0000 		lds r25,ramp.1652
 286 0096 9F5F      		subi r25,lo8(-(1))
 287 0098 9770      		andi r25,lo8(7)
 288 009a 9093 0000 		sts ramp.1652,r25
 135:main.c        ****   if (ramp == 0) {
 289               		.loc 1 135 0
 290 009e 9111      		cpse r25,__zero_reg__
 291 00a0 00C0      		rjmp .L21
 136:main.c        ****     bits = 0x07;
 292               		.loc 1 136 0
 293 00a2 87E0      		ldi r24,lo8(7)
 294 00a4 8093 0000 		sts bits.1654,r24
 137:main.c        ****     column = (column + 1) & 0x03;
 295               		.loc 1 137 0
 296 00a8 2091 0000 		lds r18,column.1653
 297 00ac 2F5F      		subi r18,lo8(-(1))
 298 00ae 2370      		andi r18,lo8(3)
 299 00b0 2093 0000 		sts column.1653,r18
 138:main.c        ****     first = column * 3;
 300               		.loc 1 138 0
 301 00b4 822F      		mov r24,r18
 302 00b6 63E0      		ldi r22,lo8(3)
 303 00b8 00D0      		rcall __mulqi3
 304 00ba 8093 0000 		sts first.1651,r24
 139:main.c        ****     colbit = 1<<column;
 305               		.loc 1 139 0
 306 00be 41E0      		ldi r20,lo8(1)
 307 00c0 50E0      		ldi r21,0
 308 00c2 BA01      		movw r22,r20
 309 00c4 00C0      		rjmp 2f
 310               		1:
 311 00c6 660F      		lsl r22
 312 00c8 771F      		rol r23
 313               		2:
 314 00ca 2A95      		dec r18
 315 00cc 02F4      		brpl 1b
 316 00ce 6093 0000 		sts colbit.1655,r22
 317               	.L21:
 140:main.c        ****   }
 141:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 318               		.loc 1 141 0
 319 00d2 E091 0000 		lds r30,first.1651
 320 00d6 F0E0      		ldi r31,0
 321 00d8 E050      		subi r30,lo8(-(level))
 322 00da F040      		sbci r31,hi8(-(level))
 323 00dc 8081      		ld r24,Z
 324 00de 9813      		cpse r25,r24
 325 00e0 00C0      		rjmp .L22
 326               		.loc 1 141 0 is_stmt 0 discriminator 1
 327 00e2 8091 0000 		lds r24,bits.1654
 328 00e6 8670      		andi r24,lo8(6)
 329 00e8 8093 0000 		sts bits.1654,r24
 330               	.L22:
 142:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 331               		.loc 1 142 0 is_stmt 1
 332 00ec 8181      		ldd r24,Z+1
 333 00ee 9813      		cpse r25,r24
 334 00f0 00C0      		rjmp .L23
 335               		.loc 1 142 0 is_stmt 0 discriminator 1
 336 00f2 8091 0000 		lds r24,bits.1654
 337 00f6 8570      		andi r24,lo8(5)
 338 00f8 8093 0000 		sts bits.1654,r24
 339               	.L23:
 143:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 340               		.loc 1 143 0 is_stmt 1
 341 00fc 8281      		ldd r24,Z+2
 342 00fe 9813      		cpse r25,r24
 343 0100 00C0      		rjmp .L24
 344               		.loc 1 143 0 is_stmt 0 discriminator 1
 345 0102 8091 0000 		lds r24,bits.1654
 346 0106 8370      		andi r24,lo8(3)
 347 0108 8093 0000 		sts bits.1654,r24
 348               	.L24:
 144:main.c        ****   uint8_t mask = colbit - 1;
 349               		.loc 1 144 0 is_stmt 1
 350 010c 4091 0000 		lds r20,colbit.1655
 351 0110 6FEF      		ldi r22,lo8(-1)
 352 0112 640F      		add r22,r20
 353               	.LVL8:
 145:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 354               		.loc 1 145 0
 355 0114 5091 0000 		lds r21,bits.1654
 356 0118 862F      		mov r24,r22
 357 011a 90E0      		ldi r25,0
 358 011c 8095      		com r24
 359 011e 9095      		com r25
 360 0120 252F      		mov r18,r21
 361 0122 30E0      		ldi r19,0
 362 0124 8223      		and r24,r18
 363 0126 9323      		and r25,r19
 364 0128 880F      		lsl r24
 365 012a 991F      		rol r25
 366 012c 5623      		and r21,r22
 367 012e 852B      		or r24,r21
 368               	.LVL9:
 146:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 369               		.loc 1 146 0
 370 0130 97B3      		in r25,0x17
 371 0132 907F      		andi r25,lo8(-16)
 372 0134 492B      		or r20,r25
 373 0136 482B      		or r20,r24
 374 0138 47BB      		out 0x17,r20
 147:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 375               		.loc 1 147 0
 376 013a 98B3      		in r25,0x18
 377 013c 907F      		andi r25,lo8(-16)
 378 013e 892B      		or r24,r25
 379               	.LVL10:
 380 0140 88BB      		out 0x18,r24
 148:main.c        ****     
 149:main.c        ****     cnt++;
 381               		.loc 1 149 0
 382 0142 8091 0000 		lds r24,cnt
 383 0146 9091 0000 		lds r25,cnt+1
 384 014a 0196      		adiw r24,1
 385 014c 9093 0000 		sts cnt+1,r25
 386 0150 8093 0000 		sts cnt,r24
 150:main.c        ****     if(cnt==63){
 387               		.loc 1 150 0
 388 0154 8091 0000 		lds r24,cnt
 389 0158 9091 0000 		lds r25,cnt+1
 390 015c CF97      		sbiw r24,63
 391 015e 01F4      		brne .L20
 151:main.c        ****         cnt=0;
 392               		.loc 1 151 0
 393 0160 1092 0000 		sts cnt+1,__zero_reg__
 394 0164 1092 0000 		sts cnt,__zero_reg__
 152:main.c        ****     /*switch(blinkMode){
 153:main.c        ****         case SCROLL:
 154:main.c        ****             if(pstate&(1<<DIR_FLAG)){
 155:main.c        ****                 level[order[index]]=brightness++;
 156:main.c        ****                 if(brightness>7){
 157:main.c        ****                     brightness=0;
 158:main.c        ****                     index++;
 159:main.c        ****                     if(index>11){
 160:main.c        ****                         index=11;
 161:main.c        ****                         brightness=7;
 162:main.c        ****                         pstate&=~(1<<DIR_FLAG);
 163:main.c        ****                     }
 164:main.c        ****                 }
 165:main.c        ****             }else{
 166:main.c        ****                 level[order[index]]=brightness--;
 167:main.c        ****                 if(brightness==0){
 168:main.c        ****                     brightness=7;
 169:main.c        ****                     index--;
 170:main.c        ****                     if(index==0){
 171:main.c        ****                         index=0;
 172:main.c        ****                         brightness=0;
 173:main.c        ****                         pstate|=(1<<DIR_FLAG);
 174:main.c        ****                     }
 175:main.c        ****                 }
 176:main.c        ****             }
 177:main.c        ****             
 178:main.c        ****             break;
 179:main.c        ****         case FADE:
 180:main.c        ****         case PIXIE:
 181:main.c        ****         case DEBUG:
 182:main.c        ****         default:*/
 183:main.c        ****            
 184:main.c        ****             level[order[index]]=brightness;
 395               		.loc 1 184 0
 396 0168 E091 0000 		lds r30,index
 397 016c 8091 0000 		lds r24,brightness
 398 0170 F0E0      		ldi r31,0
 399 0172 E050      		subi r30,lo8(-(order))
 400 0174 F040      		sbci r31,hi8(-(order))
 401 0176 E081      		ld r30,Z
 402 0178 F0E0      		ldi r31,0
 403 017a E050      		subi r30,lo8(-(level))
 404 017c F040      		sbci r31,hi8(-(level))
 405 017e 8083      		st Z,r24
 185:main.c        ****             brightness=(brightness+1)&0x07;
 406               		.loc 1 185 0
 407 0180 8091 0000 		lds r24,brightness
 408 0184 8F5F      		subi r24,lo8(-(1))
 409 0186 8770      		andi r24,lo8(7)
 410 0188 8093 0000 		sts brightness,r24
 186:main.c        ****             if(brightness==0){
 411               		.loc 1 186 0
 412 018c 8091 0000 		lds r24,brightness
 413 0190 8111      		cpse r24,__zero_reg__
 414 0192 00C0      		rjmp .L20
 187:main.c        ****                 level[order[index]]=0;
 415               		.loc 1 187 0
 416 0194 E091 0000 		lds r30,index
 417 0198 F0E0      		ldi r31,0
 418 019a E050      		subi r30,lo8(-(order))
 419 019c F040      		sbci r31,hi8(-(order))
 420 019e E081      		ld r30,Z
 421 01a0 F0E0      		ldi r31,0
 422 01a2 E050      		subi r30,lo8(-(level))
 423 01a4 F040      		sbci r31,hi8(-(level))
 424 01a6 1082      		st Z,__zero_reg__
 188:main.c        ****                 index++;
 425               		.loc 1 188 0
 426 01a8 8091 0000 		lds r24,index
 427 01ac 8F5F      		subi r24,lo8(-(1))
 428 01ae 8093 0000 		sts index,r24
 189:main.c        ****                 if(index>11)index=0;
 429               		.loc 1 189 0
 430 01b2 8091 0000 		lds r24,index
 431 01b6 8C30      		cpi r24,lo8(12)
 432 01b8 00F0      		brlo .L20
 433               		.loc 1 189 0 is_stmt 0 discriminator 1
 434 01ba 1092 0000 		sts index,__zero_reg__
 435               	.L20:
 436               	/* epilogue start */
 190:main.c        ****             }
 191:main.c        ****            // break;
 192:main.c        ****         //}
 193:main.c        ****     }
 194:main.c        ****   
 195:main.c        **** 
 196:main.c        **** }
 437               		.loc 1 196 0 is_stmt 1
 438 01be FF91      		pop r31
 439 01c0 EF91      		pop r30
 440 01c2 9F91      		pop r25
 441 01c4 8F91      		pop r24
 442 01c6 7F91      		pop r23
 443 01c8 6F91      		pop r22
 444               	.LVL11:
 445 01ca 5F91      		pop r21
 446 01cc 4F91      		pop r20
 447 01ce 3F91      		pop r19
 448 01d0 2F91      		pop r18
 449 01d2 0F90      		pop r0
 450 01d4 0FBE      		out __SREG__,r0
 451 01d6 0F90      		pop r0
 452 01d8 1F90      		pop r1
 453 01da 1895      		reti
 454               		.cfi_endproc
 455               	.LFE13:
 457               		.local	colbit.1655
 458               		.comm	colbit.1655,1,1
 459               		.local	first.1651
 460               		.comm	first.1651,1,1
 461               		.local	column.1653
 462               		.comm	column.1653,1,1
 463               		.local	bits.1654
 464               		.comm	bits.1654,1,1
 465               		.local	ramp.1652
 466               		.comm	ramp.1652,1,1
 467               	.global	index
 468               		.data
 471               	index:
 472 0000 01        		.byte	1
 473               	.global	duty
 476               	duty:
 477 0001 03        		.byte	3
 478               	.global	brightness
 481               	brightness:
 482 0002 05        		.byte	5
 483               		.local	randf
 484               		.comm	randf,1,1
 485               		.local	randx
 486               		.comm	randx,4,1
 487               	.global	pstate
 488               		.section .bss
 491               	pstate:
 492 0000 00        		.zero	1
 493               	.global	blinkMode
 496               	blinkMode:
 497 0001 00        		.zero	1
 498               	.global	order
 499               		.section	.rodata
 502               	order:
 503 0000 03        		.byte	3
 504 0001 08        		.byte	8
 505 0002 02        		.byte	2
 506 0003 07        		.byte	7
 507 0004 09        		.byte	9
 508 0005 04        		.byte	4
 509 0006 05        		.byte	5
 510 0007 01        		.byte	1
 511 0008 00        		.byte	0
 512 0009 06        		.byte	6
 513 000a 0B        		.byte	11
 514 000b 0A        		.byte	10
 515               		.comm	level,12,1
 516               	.global	cnt
 517               		.data
 520               	cnt:
 521 0003 0100      		.word	1
 522               		.text
 523               	.Letext0:
 524               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccQvCgJt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQvCgJt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQvCgJt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQvCgJt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQvCgJt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQvCgJt.s:12     .text:0000000000000000 srand
     /tmp/ccQvCgJt.s:484    .bss:0000000000000008 randx
     /tmp/ccQvCgJt.s:466    .bss:0000000000000007 randf
     /tmp/ccQvCgJt.s:40     .text:000000000000001c rand
     /tmp/ccQvCgJt.s:86     .text.startup:0000000000000000 main
     /tmp/ccQvCgJt.s:491    .bss:0000000000000000 pstate
     /tmp/ccQvCgJt.s:496    .bss:0000000000000001 blinkMode
     /tmp/ccQvCgJt.s:481    .data:0000000000000002 brightness
     /tmp/ccQvCgJt.s:471    .data:0000000000000000 index
                            *COM*:000000000000000c level
     /tmp/ccQvCgJt.s:194    .text:0000000000000060 __vector_10
     /tmp/ccQvCgJt.s:225    .text:0000000000000074 __vector_3
     /tmp/ccQvCgJt.s:464    .bss:0000000000000006 ramp.1652
     /tmp/ccQvCgJt.s:462    .bss:0000000000000005 bits.1654
     /tmp/ccQvCgJt.s:460    .bss:0000000000000004 column.1653
     /tmp/ccQvCgJt.s:458    .bss:0000000000000003 first.1651
                             .bss:0000000000000002 colbit.1655
     /tmp/ccQvCgJt.s:520    .data:0000000000000003 cnt
     /tmp/ccQvCgJt.s:502    .rodata:0000000000000000 order
     /tmp/ccQvCgJt.s:476    .data:0000000000000001 duty

UNDEFINED SYMBOLS
__mulsi3
__mulqi3
__do_copy_data
__do_clear_bss
