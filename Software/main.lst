   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	srand
  12               	srand:
  13               	.LFB9:
  14               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/power.h>
   5:main.c        **** 
   6:main.c        **** #define FADE 0
   7:main.c        **** #define PIXIE 1
   8:main.c        **** #define SCROLL 2
   9:main.c        **** #define DEBUG 3
  10:main.c        **** #define NB_MODES 4
  11:main.c        **** 
  12:main.c        **** #define TOUCH_FLAG 0
  13:main.c        **** //#define ADC_FLAG 1
  14:main.c        **** #define DEBUG_FLAG 2
  15:main.c        **** #define DIR_FLAG 2
  16:main.c        **** 
  17:main.c        **** volatile unsigned int cnt=1;
  18:main.c        **** uint8_t level[12];
  19:main.c        **** //uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 }; //Brightness levels of each led.
  20:main.c        **** //uint8_t order[12] = {0,11,9,4,2,10,7,6,3,1,8,5};//Reverse
  21:main.c        **** uint8_t order[12] = {3,8,2,7,9,4,5,1,0,6,11,10};//Right
  22:main.c        **** uint8_t blinkMode = FADE;
  23:main.c        **** uint8_t pstate=0;
  24:main.c        **** 
  25:main.c        **** static	long	randx;
  26:main.c        **** static	char	randf;
  27:main.c        **** 
  28:main.c        **** void srand(unsigned x){
  15               		.loc 1 28 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  29:main.c        **** 	randx = x;
  22               		.loc 1 29 0
  23 0000 A0E0      		ldi r26,0
  24 0002 B0E0      		ldi r27,0
  25 0004 8093 0000 		sts randx,r24
  26 0008 9093 0000 		sts randx+1,r25
  27 000c A093 0000 		sts randx+2,r26
  28 0010 B093 0000 		sts randx+3,r27
  30:main.c        **** 	randf = 1;
  29               		.loc 1 30 0
  30 0014 81E0      		ldi r24,lo8(1)
  31               	.LVL1:
  32 0016 8093 0000 		sts randf,r24
  33 001a 0895      		ret
  34               		.cfi_endproc
  35               	.LFE9:
  37               	.global	__mulsi3
  38               	.global	rand
  40               	rand:
  41               	.LFB10:
  31:main.c        **** }
  32:main.c        **** 
  33:main.c        **** int rand(void){
  42               		.loc 1 33 0
  43               		.cfi_startproc
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  34:main.c        **** 	if(!randf)srand(1);
  48               		.loc 1 34 0
  49 001c 8091 0000 		lds r24,randf
  50 0020 8111      		cpse r24,__zero_reg__
  51 0022 00C0      		rjmp .L3
  52               		.loc 1 34 0 is_stmt 0 discriminator 1
  53 0024 81E0      		ldi r24,lo8(1)
  54 0026 90E0      		ldi r25,0
  55 0028 00D0      		rcall srand
  56               	.LVL2:
  57               	.L3:
  35:main.c        **** 	return((int)((randx = randx*1103515245L + 12345)>>16) & 077777);
  58               		.loc 1 35 0 is_stmt 1
  59 002a 2DE6      		ldi r18,lo8(109)
  60 002c 3EE4      		ldi r19,lo8(78)
  61 002e 46EC      		ldi r20,lo8(-58)
  62 0030 51E4      		ldi r21,lo8(65)
  63 0032 6091 0000 		lds r22,randx
  64 0036 7091 0000 		lds r23,randx+1
  65 003a 8091 0000 		lds r24,randx+2
  66 003e 9091 0000 		lds r25,randx+3
  67 0042 00D0      		rcall __mulsi3
  68               	.LVL3:
  69 0044 675C      		subi r22,-57
  70 0046 7F4C      		sbci r23,-49
  71 0048 8F4F      		sbci r24,-1
  72 004a 9F4F      		sbci r25,-1
  73 004c 6093 0000 		sts randx,r22
  74 0050 7093 0000 		sts randx+1,r23
  75 0054 8093 0000 		sts randx+2,r24
  76 0058 9093 0000 		sts randx+3,r25
  36:main.c        **** }
  77               		.loc 1 36 0
  78 005c 9F77      		andi r25,127
  79 005e 0895      		ret
  80               		.cfi_endproc
  81               	.LFE10:
  83               		.section	.text.startup,"ax",@progbits
  84               	.global	main
  86               	main:
  87               	.LFB11:
  37:main.c        **** 
  38:main.c        **** volatile uint8_t brightness=5;
  39:main.c        **** volatile uint8_t duty=3;
  40:main.c        **** volatile uint8_t index=1;
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** int main(void){
  88               		.loc 1 43 0
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  44:main.c        ****       
  45:main.c        ****     //Timer1 for LED charlieplexing
  46:main.c        ****     TCCR1=(1<<CTC1)|(1<<CS12);//|(1<<CS10)|(1<<CS11);        //Divide clock by 1, was 2<<CS10
  94               		.loc 1 46 0
  95 0000 84E8      		ldi r24,lo8(-124)
  96 0002 80BF      		out 0x30,r24
  47:main.c        ****     GTCCR=0;                          //No PWM
  97               		.loc 1 47 0
  98 0004 1CBC      		out 0x2c,__zero_reg__
  48:main.c        ****     OCR1A=0;                          //No PWM
  99               		.loc 1 48 0
 100 0006 1EBC      		out 0x2e,__zero_reg__
  49:main.c        ****     OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
 101               		.loc 1 49 0
 102 0008 89EF      		ldi r24,lo8(-7)
 103 000a 8DBD      		out 0x2d,r24
  50:main.c        ****     TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
 104               		.loc 1 50 0
 105 000c 89B7      		in r24,0x39
 106 000e 8064      		ori r24,lo8(64)
 107 0010 89BF      		out 0x39,r24
  51:main.c        ****     
  52:main.c        ****     TCCR0A=(1<<WGM01);
 108               		.loc 1 52 0
 109 0012 82E0      		ldi r24,lo8(2)
 110 0014 8ABD      		out 0x2a,r24
  53:main.c        ****     OCR0A=255;
 111               		.loc 1 53 0
 112 0016 8FEF      		ldi r24,lo8(-1)
 113 0018 89BD      		out 0x29,r24
  54:main.c        ****     TCCR0B=(1<<CS02)|(1<<CS00);
 114               		.loc 1 54 0
 115 001a 85E0      		ldi r24,lo8(5)
 116 001c 83BF      		out 0x33,r24
  55:main.c        ****     TIMSK|=(1<<OCIE0A);
 117               		.loc 1 55 0
 118 001e 89B7      		in r24,0x39
 119 0020 8061      		ori r24,lo8(16)
 120 0022 89BF      		out 0x39,r24
  56:main.c        ****     
  57:main.c        ****     /*
  58:main.c        ****     ADMUX=(1<<MUX3)|(1<<MUX2);
  59:main.c        ****     ADCSRA |= (1<<ADEN) | (1<<ADIE);
  60:main.c        ****     */
  61:main.c        ****     
  62:main.c        ****     sei();                              //Enable interrupts
 121               		.loc 1 62 0
 122               	/* #APP */
 123               	 ;  62 "main.c" 1
 124 0024 7894      		sei
 125               	 ;  0 "" 2
 126               	/* #NOAPP */
 127               	.L6:
  63:main.c        ****     while(1){
  64:main.c        ****         
  65:main.c        ****         if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
 128               		.loc 1 65 0
 129 0026 B49B      		sbis 0x16,4
 130 0028 00C0      		rjmp .L7
 131               		.loc 1 65 0 is_stmt 0 discriminator 1
 132 002a 8091 0000 		lds r24,pstate
 133 002e 80FF      		sbrs r24,0
 134 0030 00C0      		rjmp .L7
  66:main.c        ****             pstate&=~(1<<TOUCH_FLAG);   
 135               		.loc 1 66 0 is_stmt 1
 136 0032 8E7F      		andi r24,lo8(-2)
 137 0034 8093 0000 		sts pstate,r24
  67:main.c        ****             blinkMode++;
 138               		.loc 1 67 0
 139 0038 8091 0000 		lds r24,blinkMode
 140 003c 8F5F      		subi r24,lo8(-(1))
  68:main.c        ****             if(blinkMode>=NB_MODES)blinkMode=0;
 141               		.loc 1 68 0
 142 003e 8430      		cpi r24,lo8(4)
 143 0040 00F4      		brsh .L8
  67:main.c        ****             blinkMode++;
 144               		.loc 1 67 0
 145 0042 8093 0000 		sts blinkMode,r24
 146 0046 00C0      		rjmp .L9
 147               	.L8:
 148               		.loc 1 68 0 discriminator 1
 149 0048 1092 0000 		sts blinkMode,__zero_reg__
 150               	.L9:
  69:main.c        ****             brightness=0;
 151               		.loc 1 69 0
 152 004c 1092 0000 		sts brightness,__zero_reg__
  70:main.c        ****             index=0;
 153               		.loc 1 70 0
 154 0050 1092 0000 		sts index,__zero_reg__
 155 0054 00C0      		rjmp .L6
 156               	.L7:
  71:main.c        ****                        
  72:main.c        ****         }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 157               		.loc 1 72 0
 158 0056 B499      		sbic 0x16,4
 159 0058 00C0      		rjmp .L6
 160               		.loc 1 72 0 is_stmt 0 discriminator 1
 161 005a 8091 0000 		lds r24,pstate
 162 005e 80FD      		sbrc r24,0
 163 0060 00C0      		rjmp .L6
  73:main.c        ****             pstate|=(1<<TOUCH_FLAG);            
 164               		.loc 1 73 0 is_stmt 1
 165 0062 8160      		ori r24,lo8(1)
 166 0064 8093 0000 		sts pstate,r24
 167 0068 00C0      		rjmp .L6
 168               		.cfi_endproc
 169               	.LFE11:
 171               		.text
 172               	.global	__vector_10
 174               	__vector_10:
 175               	.LFB12:
  74:main.c        ****         }
  75:main.c        ****         if(pstate&(1<<DEBUG_FLAG)){
  76:main.c        ****             //pstate&=~(1<<DEBUG_FLAG);  
  77:main.c        ****         }  
  78:main.c        **** /*
  79:main.c        ****         if(pstate&(1<<ADC_FLAG)){
  80:main.c        ****             pstate&=~(1<<ADC_FLAG);   
  81:main.c        ****             ADCSRA |= (1<<ADSC);
  82:main.c        ****         }*/
  83:main.c        **** 
  84:main.c        ****     }
  85:main.c        ****     return 0;
  86:main.c        **** }     
  87:main.c        **** /*
  88:main.c        **** ISR(ADC_vect){
  89:main.c        ****     uint16_t res=ADCL;
  90:main.c        ****     res|=(ADCH<<8);
  91:main.c        ****     blinkMode=2753/res-3;   //Vcc=1024*1.1/ADC
  92:main.c        **** }*/
  93:main.c        **** 
  94:main.c        **** ISR(TIM0_COMPA_vect) {
 176               		.loc 1 94 0
 177               		.cfi_startproc
 178 0060 1F92      		push r1
 179               	.LCFI0:
 180               		.cfi_def_cfa_offset 3
 181               		.cfi_offset 1, -2
 182 0062 0F92      		push r0
 183               	.LCFI1:
 184               		.cfi_def_cfa_offset 4
 185               		.cfi_offset 0, -3
 186 0064 0FB6      		in r0,__SREG__
 187 0066 0F92      		push r0
 188 0068 1124      		clr __zero_reg__
 189               	/* prologue: Signal */
 190               	/* frame size = 0 */
 191               	/* stack size = 3 */
 192               	.L__stack_usage = 3
 193               	/* epilogue start */
  95:main.c        ****     /*if(pstate&(1<<DIR_FLAG)){
  96:main.c        ****         cnt++;
  97:main.c        ****     }else{
  98:main.c        ****         cnt--;
  99:main.c        ****     }
 100:main.c        ****     switch(blinkMode){
 101:main.c        ****         case(PIXIE):
 102:main.c        ****             if(cnt==duty){
 103:main.c        ****                 level[index]=15;
 104:main.c        ****             }else if(cnt>=speed){
 105:main.c        ****                 cnt=0;
 106:main.c        ****                 level[index]=0; 
 107:main.c        ****                 index=rand()/2730;
 108:main.c        ****             }
 109:main.c        ****         break;
 110:main.c        ****         case(DEBUG):
 111:main.c        ****             if(cnt>15){
 112:main.c        ****                 pstate&=~(1<<DIR_FLAG);
 113:main.c        ****                 level[order[index]]=0; 
 114:main.c        ****                 index--;
 115:main.c        ****                 if(index==255)index=11;
 116:main.c        ****             }else if(cnt==0){
 117:main.c        ****                 pstate|=(1<<DIR_FLAG);
 118:main.c        ****             }
 119:main.c        ****             level[order[index]]=cnt; 
 120:main.c        ****             
 121:main.c        ****             break;
 122:main.c        ****     }*/
 123:main.c        ****  
 124:main.c        **** 
 125:main.c        ****     
 126:main.c        **** }
 194               		.loc 1 126 0
 195 006a 0F90      		pop r0
 196 006c 0FBE      		out __SREG__,r0
 197 006e 0F90      		pop r0
 198 0070 1F90      		pop r1
 199 0072 1895      		reti
 200               		.cfi_endproc
 201               	.LFE12:
 203               	.global	__vector_3
 205               	__vector_3:
 206               	.LFB13:
 127:main.c        **** 
 128:main.c        **** 
 129:main.c        **** ISR(TIM1_COMPA_vect) {
 207               		.loc 1 129 0
 208               		.cfi_startproc
 209 0074 1F92      		push r1
 210               	.LCFI2:
 211               		.cfi_def_cfa_offset 3
 212               		.cfi_offset 1, -2
 213 0076 0F92      		push r0
 214               	.LCFI3:
 215               		.cfi_def_cfa_offset 4
 216               		.cfi_offset 0, -3
 217 0078 0FB6      		in r0,__SREG__
 218 007a 0F92      		push r0
 219 007c 1124      		clr __zero_reg__
 220 007e 2F93      		push r18
 221               	.LCFI4:
 222               		.cfi_def_cfa_offset 5
 223               		.cfi_offset 18, -4
 224 0080 3F93      		push r19
 225               	.LCFI5:
 226               		.cfi_def_cfa_offset 6
 227               		.cfi_offset 19, -5
 228 0082 4F93      		push r20
 229               	.LCFI6:
 230               		.cfi_def_cfa_offset 7
 231               		.cfi_offset 20, -6
 232 0084 5F93      		push r21
 233               	.LCFI7:
 234               		.cfi_def_cfa_offset 8
 235               		.cfi_offset 21, -7
 236 0086 6F93      		push r22
 237               	.LCFI8:
 238               		.cfi_def_cfa_offset 9
 239               		.cfi_offset 22, -8
 240 0088 7F93      		push r23
 241               	.LCFI9:
 242               		.cfi_def_cfa_offset 10
 243               		.cfi_offset 23, -9
 244 008a 8F93      		push r24
 245               	.LCFI10:
 246               		.cfi_def_cfa_offset 11
 247               		.cfi_offset 24, -10
 248 008c 9F93      		push r25
 249               	.LCFI11:
 250               		.cfi_def_cfa_offset 12
 251               		.cfi_offset 25, -11
 252 008e EF93      		push r30
 253               	.LCFI12:
 254               		.cfi_def_cfa_offset 13
 255               		.cfi_offset 30, -12
 256 0090 FF93      		push r31
 257               	.LCFI13:
 258               		.cfi_def_cfa_offset 14
 259               		.cfi_offset 31, -13
 260               	/* prologue: Signal */
 261               	/* frame size = 0 */
 262               	/* stack size = 13 */
 263               	.L__stack_usage = 13
 130:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
 131:main.c        ****   ramp = (ramp+1) & 0x07;
 264               		.loc 1 131 0
 265 0092 9091 0000 		lds r25,ramp.1648
 266 0096 9F5F      		subi r25,lo8(-(1))
 267 0098 9770      		andi r25,lo8(7)
 268 009a 9093 0000 		sts ramp.1648,r25
 132:main.c        ****   if (ramp == 0) {
 269               		.loc 1 132 0
 270 009e 9111      		cpse r25,__zero_reg__
 271 00a0 00C0      		rjmp .L19
 133:main.c        ****     bits = 0x07;
 272               		.loc 1 133 0
 273 00a2 87E0      		ldi r24,lo8(7)
 274 00a4 8093 0000 		sts bits.1650,r24
 134:main.c        ****     column = (column + 1) & 0x03;
 275               		.loc 1 134 0
 276 00a8 2091 0000 		lds r18,column.1649
 277 00ac 2F5F      		subi r18,lo8(-(1))
 278 00ae 2370      		andi r18,lo8(3)
 279 00b0 2093 0000 		sts column.1649,r18
 135:main.c        ****     first = column * 3;
 280               		.loc 1 135 0
 281 00b4 822F      		mov r24,r18
 282 00b6 63E0      		ldi r22,lo8(3)
 283 00b8 00D0      		rcall __mulqi3
 284 00ba 8093 0000 		sts first.1647,r24
 136:main.c        ****     colbit = 1<<column;
 285               		.loc 1 136 0
 286 00be 41E0      		ldi r20,lo8(1)
 287 00c0 50E0      		ldi r21,0
 288 00c2 BA01      		movw r22,r20
 289 00c4 00C0      		rjmp 2f
 290               		1:
 291 00c6 660F      		lsl r22
 292 00c8 771F      		rol r23
 293               		2:
 294 00ca 2A95      		dec r18
 295 00cc 02F4      		brpl 1b
 296 00ce 6093 0000 		sts colbit.1651,r22
 297               	.L19:
 137:main.c        ****   }
 138:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 298               		.loc 1 138 0
 299 00d2 E091 0000 		lds r30,first.1647
 300 00d6 F0E0      		ldi r31,0
 301 00d8 E050      		subi r30,lo8(-(level))
 302 00da F040      		sbci r31,hi8(-(level))
 303 00dc 8081      		ld r24,Z
 304 00de 9813      		cpse r25,r24
 305 00e0 00C0      		rjmp .L20
 306               		.loc 1 138 0 is_stmt 0 discriminator 1
 307 00e2 8091 0000 		lds r24,bits.1650
 308 00e6 8670      		andi r24,lo8(6)
 309 00e8 8093 0000 		sts bits.1650,r24
 310               	.L20:
 139:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 311               		.loc 1 139 0 is_stmt 1
 312 00ec 8181      		ldd r24,Z+1
 313 00ee 9813      		cpse r25,r24
 314 00f0 00C0      		rjmp .L21
 315               		.loc 1 139 0 is_stmt 0 discriminator 1
 316 00f2 8091 0000 		lds r24,bits.1650
 317 00f6 8570      		andi r24,lo8(5)
 318 00f8 8093 0000 		sts bits.1650,r24
 319               	.L21:
 140:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 320               		.loc 1 140 0 is_stmt 1
 321 00fc 8281      		ldd r24,Z+2
 322 00fe 9813      		cpse r25,r24
 323 0100 00C0      		rjmp .L22
 324               		.loc 1 140 0 is_stmt 0 discriminator 1
 325 0102 8091 0000 		lds r24,bits.1650
 326 0106 8370      		andi r24,lo8(3)
 327 0108 8093 0000 		sts bits.1650,r24
 328               	.L22:
 141:main.c        ****   uint8_t mask = colbit - 1;
 329               		.loc 1 141 0 is_stmt 1
 330 010c 4091 0000 		lds r20,colbit.1651
 331 0110 6FEF      		ldi r22,lo8(-1)
 332 0112 640F      		add r22,r20
 333               	.LVL4:
 142:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 334               		.loc 1 142 0
 335 0114 5091 0000 		lds r21,bits.1650
 336 0118 862F      		mov r24,r22
 337 011a 90E0      		ldi r25,0
 338 011c 8095      		com r24
 339 011e 9095      		com r25
 340 0120 252F      		mov r18,r21
 341 0122 30E0      		ldi r19,0
 342 0124 8223      		and r24,r18
 343 0126 9323      		and r25,r19
 344 0128 880F      		lsl r24
 345 012a 991F      		rol r25
 346 012c 5623      		and r21,r22
 347 012e 852B      		or r24,r21
 348               	.LVL5:
 143:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 349               		.loc 1 143 0
 350 0130 97B3      		in r25,0x17
 351 0132 907F      		andi r25,lo8(-16)
 352 0134 492B      		or r20,r25
 353 0136 482B      		or r20,r24
 354 0138 47BB      		out 0x17,r20
 144:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 355               		.loc 1 144 0
 356 013a 98B3      		in r25,0x18
 357 013c 907F      		andi r25,lo8(-16)
 358 013e 892B      		or r24,r25
 359               	.LVL6:
 360 0140 88BB      		out 0x18,r24
 145:main.c        ****     
 146:main.c        ****     cnt++;
 361               		.loc 1 146 0
 362 0142 8091 0000 		lds r24,cnt
 363 0146 9091 0000 		lds r25,cnt+1
 364 014a 0196      		adiw r24,1
 365 014c 9093 0000 		sts cnt+1,r25
 366 0150 8093 0000 		sts cnt,r24
 147:main.c        ****     if(cnt==63){
 367               		.loc 1 147 0
 368 0154 8091 0000 		lds r24,cnt
 369 0158 9091 0000 		lds r25,cnt+1
 370 015c CF97      		sbiw r24,63
 371 015e 01F0      		breq .+2
 372 0160 00C0      		rjmp .L18
 148:main.c        ****         cnt=0;
 373               		.loc 1 148 0
 374 0162 1092 0000 		sts cnt+1,__zero_reg__
 375 0166 1092 0000 		sts cnt,__zero_reg__
 149:main.c        ****     switch(blinkMode){
 376               		.loc 1 149 0
 377 016a 8091 0000 		lds r24,blinkMode
 378 016e 8230      		cpi r24,lo8(2)
 379 0170 01F0      		breq .L25
 380 0172 00F4      		brsh .+2
 381 0174 00C0      		rjmp .L26
 382 0176 8330      		cpi r24,lo8(3)
 383 0178 01F0      		breq .+2
 384 017a 00C0      		rjmp .L18
 385 017c 00C0      		rjmp .L26
 386               	.L25:
 150:main.c        ****         case SCROLL:
 151:main.c        ****             if(pstate&(1<<DIR_FLAG)){
 387               		.loc 1 151 0
 388 017e 8091 0000 		lds r24,pstate
 152:main.c        ****                 level[order[index]]=brightness++;
 389               		.loc 1 152 0
 390 0182 E091 0000 		lds r30,index
 391 0186 F0E0      		ldi r31,0
 392 0188 E050      		subi r30,lo8(-(order))
 393 018a F040      		sbci r31,hi8(-(order))
 394 018c E081      		ld r30,Z
 395 018e F0E0      		ldi r31,0
 396 0190 9091 0000 		lds r25,brightness
 151:main.c        ****                 level[order[index]]=brightness++;
 397               		.loc 1 151 0
 398 0194 82FF      		sbrs r24,2
 399 0196 00C0      		rjmp .L27
 400               		.loc 1 152 0
 401 0198 21E0      		ldi r18,lo8(1)
 402 019a 290F      		add r18,r25
 403 019c 2093 0000 		sts brightness,r18
 404 01a0 E050      		subi r30,lo8(-(level))
 405 01a2 F040      		sbci r31,hi8(-(level))
 406 01a4 9083      		st Z,r25
 153:main.c        ****                 if(brightness>7){
 407               		.loc 1 153 0
 408 01a6 9091 0000 		lds r25,brightness
 409 01aa 9830      		cpi r25,lo8(8)
 410 01ac 00F4      		brsh .+2
 411 01ae 00C0      		rjmp .L18
 154:main.c        ****                     brightness=0;
 412               		.loc 1 154 0
 413 01b0 1092 0000 		sts brightness,__zero_reg__
 155:main.c        ****                     index++;
 414               		.loc 1 155 0
 415 01b4 9091 0000 		lds r25,index
 416 01b8 9F5F      		subi r25,lo8(-(1))
 417 01ba 9093 0000 		sts index,r25
 156:main.c        ****                     if(index>11){
 418               		.loc 1 156 0
 419 01be 9091 0000 		lds r25,index
 420 01c2 9C30      		cpi r25,lo8(12)
 421 01c4 00F4      		brsh .+2
 422 01c6 00C0      		rjmp .L18
 157:main.c        ****                         index=11;
 423               		.loc 1 157 0
 424 01c8 9BE0      		ldi r25,lo8(11)
 425 01ca 9093 0000 		sts index,r25
 158:main.c        ****                         brightness=7;
 426               		.loc 1 158 0
 427 01ce 97E0      		ldi r25,lo8(7)
 428 01d0 9093 0000 		sts brightness,r25
 159:main.c        ****                         pstate&=~(1<<DIR_FLAG);
 429               		.loc 1 159 0
 430 01d4 8B7F      		andi r24,lo8(-5)
 431 01d6 00C0      		rjmp .L32
 432               	.L27:
 160:main.c        ****                     }
 161:main.c        ****                 }
 162:main.c        ****             }else{
 163:main.c        ****                 level[order[index]]=brightness--;
 433               		.loc 1 163 0
 434 01d8 2FEF      		ldi r18,lo8(-1)
 435 01da 290F      		add r18,r25
 436 01dc 2093 0000 		sts brightness,r18
 437 01e0 E050      		subi r30,lo8(-(level))
 438 01e2 F040      		sbci r31,hi8(-(level))
 439 01e4 9083      		st Z,r25
 164:main.c        ****                 if(brightness==0){
 440               		.loc 1 164 0
 441 01e6 9091 0000 		lds r25,brightness
 442 01ea 9111      		cpse r25,__zero_reg__
 443 01ec 00C0      		rjmp .L18
 165:main.c        ****                     brightness=7;
 444               		.loc 1 165 0
 445 01ee 97E0      		ldi r25,lo8(7)
 446 01f0 9093 0000 		sts brightness,r25
 166:main.c        ****                     index--;
 447               		.loc 1 166 0
 448 01f4 9091 0000 		lds r25,index
 449 01f8 9150      		subi r25,lo8(-(-1))
 450 01fa 9093 0000 		sts index,r25
 167:main.c        ****                     if(index==0){
 451               		.loc 1 167 0
 452 01fe 9091 0000 		lds r25,index
 453 0202 9111      		cpse r25,__zero_reg__
 454 0204 00C0      		rjmp .L18
 168:main.c        ****                         index=0;
 455               		.loc 1 168 0
 456 0206 1092 0000 		sts index,__zero_reg__
 169:main.c        ****                         brightness=0;
 457               		.loc 1 169 0
 458 020a 1092 0000 		sts brightness,__zero_reg__
 170:main.c        ****                         pstate|=(1<<DIR_FLAG);
 459               		.loc 1 170 0
 460 020e 8460      		ori r24,lo8(4)
 461               	.L32:
 462 0210 8093 0000 		sts pstate,r24
 463 0214 00C0      		rjmp .L18
 464               	.L26:
 171:main.c        ****                     }
 172:main.c        ****                 }
 173:main.c        ****             }
 174:main.c        ****             
 175:main.c        ****             break;
 176:main.c        ****         case FADE:
 177:main.c        ****         case PIXIE:
 178:main.c        ****         case DEBUG:
 179:main.c        ****             level[order[index]]=brightness;
 465               		.loc 1 179 0
 466 0216 E091 0000 		lds r30,index
 467 021a 8091 0000 		lds r24,brightness
 468 021e F0E0      		ldi r31,0
 469 0220 E050      		subi r30,lo8(-(order))
 470 0222 F040      		sbci r31,hi8(-(order))
 471 0224 E081      		ld r30,Z
 472 0226 F0E0      		ldi r31,0
 473 0228 E050      		subi r30,lo8(-(level))
 474 022a F040      		sbci r31,hi8(-(level))
 475 022c 8083      		st Z,r24
 180:main.c        ****             brightness=(brightness+1)&0x07;
 476               		.loc 1 180 0
 477 022e 8091 0000 		lds r24,brightness
 478 0232 8F5F      		subi r24,lo8(-(1))
 479 0234 8770      		andi r24,lo8(7)
 480 0236 8093 0000 		sts brightness,r24
 181:main.c        ****             if(brightness==0){
 481               		.loc 1 181 0
 482 023a 8091 0000 		lds r24,brightness
 483 023e 8111      		cpse r24,__zero_reg__
 484 0240 00C0      		rjmp .L18
 182:main.c        ****                 //level[order[index]]=0;
 183:main.c        ****                 index++;
 485               		.loc 1 183 0
 486 0242 8091 0000 		lds r24,index
 487 0246 8F5F      		subi r24,lo8(-(1))
 488 0248 8093 0000 		sts index,r24
 184:main.c        ****                 if(index>11)index=0;
 489               		.loc 1 184 0
 490 024c 8091 0000 		lds r24,index
 491 0250 8C30      		cpi r24,lo8(12)
 492 0252 00F0      		brlo .L18
 493               		.loc 1 184 0 is_stmt 0 discriminator 1
 494 0254 1092 0000 		sts index,__zero_reg__
 495               	.L18:
 496               	/* epilogue start */
 185:main.c        ****             }
 186:main.c        ****             break;
 187:main.c        ****         }
 188:main.c        ****     }
 189:main.c        ****   
 190:main.c        **** 
 191:main.c        **** }
 497               		.loc 1 191 0 is_stmt 1
 498 0258 FF91      		pop r31
 499 025a EF91      		pop r30
 500 025c 9F91      		pop r25
 501 025e 8F91      		pop r24
 502 0260 7F91      		pop r23
 503 0262 6F91      		pop r22
 504               	.LVL7:
 505 0264 5F91      		pop r21
 506 0266 4F91      		pop r20
 507 0268 3F91      		pop r19
 508 026a 2F91      		pop r18
 509 026c 0F90      		pop r0
 510 026e 0FBE      		out __SREG__,r0
 511 0270 0F90      		pop r0
 512 0272 1F90      		pop r1
 513 0274 1895      		reti
 514               		.cfi_endproc
 515               	.LFE13:
 517               		.local	colbit.1651
 518               		.comm	colbit.1651,1,1
 519               		.local	first.1647
 520               		.comm	first.1647,1,1
 521               		.local	column.1649
 522               		.comm	column.1649,1,1
 523               		.local	bits.1650
 524               		.comm	bits.1650,1,1
 525               		.local	ramp.1648
 526               		.comm	ramp.1648,1,1
 527               	.global	index
 528               		.data
 531               	index:
 532 0000 01        		.byte	1
 533               	.global	duty
 536               	duty:
 537 0001 03        		.byte	3
 538               	.global	brightness
 541               	brightness:
 542 0002 05        		.byte	5
 543               		.local	randf
 544               		.comm	randf,1,1
 545               		.local	randx
 546               		.comm	randx,4,1
 547               	.global	pstate
 548               		.section .bss
 551               	pstate:
 552 0000 00        		.zero	1
 553               	.global	blinkMode
 556               	blinkMode:
 557 0001 00        		.zero	1
 558               	.global	order
 559               		.data
 562               	order:
 563 0003 03        		.byte	3
 564 0004 08        		.byte	8
 565 0005 02        		.byte	2
 566 0006 07        		.byte	7
 567 0007 09        		.byte	9
 568 0008 04        		.byte	4
 569 0009 05        		.byte	5
 570 000a 01        		.byte	1
 571 000b 00        		.byte	0
 572 000c 06        		.byte	6
 573 000d 0B        		.byte	11
 574 000e 0A        		.byte	10
 575               		.comm	level,12,1
 576               	.global	cnt
 579               	cnt:
 580 000f 0100      		.word	1
 581               		.text
 582               	.Letext0:
 583               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBcSKDk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBcSKDk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBcSKDk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBcSKDk.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBcSKDk.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBcSKDk.s:12     .text:0000000000000000 srand
     /tmp/ccBcSKDk.s:544    .bss:0000000000000008 randx
     /tmp/ccBcSKDk.s:526    .bss:0000000000000007 randf
     /tmp/ccBcSKDk.s:40     .text:000000000000001c rand
     /tmp/ccBcSKDk.s:86     .text.startup:0000000000000000 main
     /tmp/ccBcSKDk.s:551    .bss:0000000000000000 pstate
     /tmp/ccBcSKDk.s:556    .bss:0000000000000001 blinkMode
     /tmp/ccBcSKDk.s:541    .data:0000000000000002 brightness
     /tmp/ccBcSKDk.s:531    .data:0000000000000000 index
     /tmp/ccBcSKDk.s:174    .text:0000000000000060 __vector_10
     /tmp/ccBcSKDk.s:205    .text:0000000000000074 __vector_3
     /tmp/ccBcSKDk.s:524    .bss:0000000000000006 ramp.1648
     /tmp/ccBcSKDk.s:522    .bss:0000000000000005 bits.1650
     /tmp/ccBcSKDk.s:520    .bss:0000000000000004 column.1649
     /tmp/ccBcSKDk.s:518    .bss:0000000000000003 first.1647
                             .bss:0000000000000002 colbit.1651
                            *COM*:000000000000000c level
     /tmp/ccBcSKDk.s:579    .data:000000000000000f cnt
     /tmp/ccBcSKDk.s:562    .data:0000000000000003 order
     /tmp/ccBcSKDk.s:536    .data:0000000000000001 duty

UNDEFINED SYMBOLS
__mulsi3
__mulqi3
__do_copy_data
__do_clear_bss
