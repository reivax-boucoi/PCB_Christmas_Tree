   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB9:
  15               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/power.h>
   5:main.c        **** 
   6:main.c        **** #define ALL 0
   7:main.c        **** #define PIXIE 1
   8:main.c        **** #define SCROLL 2
   9:main.c        **** #define DEBUG 3
  10:main.c        **** #define NB_MODES 4
  11:main.c        **** 
  12:main.c        **** #define TOUCH_FLAG 0
  13:main.c        **** //#define ADC_FLAG 1
  14:main.c        **** #define DEBUG_FLAG 2
  15:main.c        **** #define DIR_FLAG 2
  16:main.c        **** 
  17:main.c        **** volatile uint8_t cnt=1;
  18:main.c        **** volatile uint8_t level[12];
  19:main.c        **** //uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 }; //Brightness levels of each led.
  20:main.c        **** //uint8_t order[12] = {0,11,9,4,2,10,7,6,3,1,8,5};//Reverse
  21:main.c        **** const uint8_t order[12] = {3,8,2,7,9,4,5,1,0,6,11,10};//Right
  22:main.c        **** volatile uint8_t blinkMode = ALL;
  23:main.c        **** volatile uint8_t pstate=0;
  24:main.c        **** /*
  25:main.c        **** static	long	randx;
  26:main.c        **** static	char	randf;
  27:main.c        **** 
  28:main.c        **** void srand(unsigned x){
  29:main.c        **** 	randx = x;
  30:main.c        **** 	randf = 1;
  31:main.c        **** }
  32:main.c        **** 
  33:main.c        **** int rand(void){
  34:main.c        **** 	if(!randf)srand(1);
  35:main.c        **** 	return((int)((randx = randx*1103515245L + 12345)>>16) & 077777);
  36:main.c        **** }
  37:main.c        **** */
  38:main.c        **** volatile uint8_t brightness=5;
  39:main.c        **** volatile uint8_t speed=63;
  40:main.c        **** volatile uint8_t index=1;
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** int main(void){
  16               		.loc 1 43 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  44:main.c        ****       
  45:main.c        ****     //Timer1 for LED charlieplexing
  46:main.c        ****     TCCR1=(1<<CTC1)|(1<<CS12);//|(1<<CS10)|(1<<CS11);        //Divide clock by 1, was 2<<CS10
  22               		.loc 1 46 0
  23 0000 84E8      		ldi r24,lo8(-124)
  24 0002 80BF      		out 0x30,r24
  47:main.c        ****     GTCCR=0;                          //No PWM
  25               		.loc 1 47 0
  26 0004 1CBC      		out 0x2c,__zero_reg__
  48:main.c        ****     OCR1A=0;                          //No PWM
  27               		.loc 1 48 0
  28 0006 1EBC      		out 0x2e,__zero_reg__
  49:main.c        ****     OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
  29               		.loc 1 49 0
  30 0008 89EF      		ldi r24,lo8(-7)
  31 000a 8DBD      		out 0x2d,r24
  50:main.c        ****     TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
  32               		.loc 1 50 0
  33 000c 89B7      		in r24,0x39
  34 000e 8064      		ori r24,lo8(64)
  35 0010 89BF      		out 0x39,r24
  51:main.c        ****     /*
  52:main.c        ****     TCCR0A=(1<<WGM01);
  53:main.c        ****     OCR0A=255;
  54:main.c        ****     TCCR0B=(1<<CS02)|(1<<CS00);
  55:main.c        ****     TIMSK|=(1<<OCIE0A);
  56:main.c        ****     */
  57:main.c        ****     /*
  58:main.c        ****     ADMUX=(1<<MUX3)|(1<<MUX2);
  59:main.c        ****     ADCSRA |= (1<<ADEN) | (1<<ADIE);
  60:main.c        ****     */
  61:main.c        ****     
  62:main.c        ****     sei();                              //Enable interrupts
  36               		.loc 1 62 0
  37               	/* #APP */
  38               	 ;  62 "main.c" 1
  39 0012 7894      		sei
  40               	 ;  0 "" 2
  41               	/* #NOAPP */
  42               	.L2:
  43 0014 00C0      		rjmp .L2
  44               		.cfi_endproc
  45               	.LFE9:
  47               		.text
  48               	.global	__vector_3
  50               	__vector_3:
  51               	.LFB10:
  63:main.c        ****     while(1){
  64:main.c        ****         
  65:main.c        **** 
  66:main.c        ****         /*if(pstate&(1<<DEBUG_FLAG)){
  67:main.c        ****             //pstate&=~(1<<DEBUG_FLAG);  
  68:main.c        ****         }  */
  69:main.c        **** /*
  70:main.c        ****         if(pstate&(1<<ADC_FLAG)){
  71:main.c        ****             pstate&=~(1<<ADC_FLAG);   
  72:main.c        ****             ADCSRA |= (1<<ADSC);
  73:main.c        ****         }*/
  74:main.c        **** 
  75:main.c        ****     }
  76:main.c        ****     return 0;
  77:main.c        **** }     
  78:main.c        **** /*
  79:main.c        **** ISR(ADC_vect){
  80:main.c        ****     uint16_t res=ADCL;
  81:main.c        ****     res|=(ADCH<<8);
  82:main.c        ****     blinkMode=2753/res-3;   //Vcc=1024*1.1/ADC
  83:main.c        **** }*/
  84:main.c        **** /*
  85:main.c        **** ISR(TIM0_COMPA_vect) {
  86:main.c        ****     
  87:main.c        **** }*/
  88:main.c        **** 
  89:main.c        **** 
  90:main.c        **** ISR(TIM1_COMPA_vect) {
  52               		.loc 1 90 0
  53               		.cfi_startproc
  54 0000 1F92      		push r1
  55               	.LCFI0:
  56               		.cfi_def_cfa_offset 3
  57               		.cfi_offset 1, -2
  58 0002 0F92      		push r0
  59               	.LCFI1:
  60               		.cfi_def_cfa_offset 4
  61               		.cfi_offset 0, -3
  62 0004 0FB6      		in r0,__SREG__
  63 0006 0F92      		push r0
  64 0008 1124      		clr __zero_reg__
  65 000a 2F93      		push r18
  66               	.LCFI2:
  67               		.cfi_def_cfa_offset 5
  68               		.cfi_offset 18, -4
  69 000c 3F93      		push r19
  70               	.LCFI3:
  71               		.cfi_def_cfa_offset 6
  72               		.cfi_offset 19, -5
  73 000e 4F93      		push r20
  74               	.LCFI4:
  75               		.cfi_def_cfa_offset 7
  76               		.cfi_offset 20, -6
  77 0010 5F93      		push r21
  78               	.LCFI5:
  79               		.cfi_def_cfa_offset 8
  80               		.cfi_offset 21, -7
  81 0012 6F93      		push r22
  82               	.LCFI6:
  83               		.cfi_def_cfa_offset 9
  84               		.cfi_offset 22, -8
  85 0014 7F93      		push r23
  86               	.LCFI7:
  87               		.cfi_def_cfa_offset 10
  88               		.cfi_offset 23, -9
  89 0016 8F93      		push r24
  90               	.LCFI8:
  91               		.cfi_def_cfa_offset 11
  92               		.cfi_offset 24, -10
  93 0018 9F93      		push r25
  94               	.LCFI9:
  95               		.cfi_def_cfa_offset 12
  96               		.cfi_offset 25, -11
  97 001a EF93      		push r30
  98               	.LCFI10:
  99               		.cfi_def_cfa_offset 13
 100               		.cfi_offset 30, -12
 101 001c FF93      		push r31
 102               	.LCFI11:
 103               		.cfi_def_cfa_offset 14
 104               		.cfi_offset 31, -13
 105               	/* prologue: Signal */
 106               	/* frame size = 0 */
 107               	/* stack size = 13 */
 108               	.L__stack_usage = 13
  91:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
  92:main.c        ****   ramp = (ramp+1) & 0x07;
 109               		.loc 1 92 0
 110 001e 9091 0000 		lds r25,ramp.1635
 111 0022 9F5F      		subi r25,lo8(-(1))
 112 0024 9770      		andi r25,lo8(7)
 113 0026 9093 0000 		sts ramp.1635,r25
  93:main.c        ****   if (ramp == 0) {
 114               		.loc 1 93 0
 115 002a 9111      		cpse r25,__zero_reg__
 116 002c 00C0      		rjmp .L5
  94:main.c        ****     bits = 0x07;
 117               		.loc 1 94 0
 118 002e 87E0      		ldi r24,lo8(7)
 119 0030 8093 0000 		sts bits.1637,r24
  95:main.c        ****     column = (column + 1) & 0x03;
 120               		.loc 1 95 0
 121 0034 2091 0000 		lds r18,column.1636
 122 0038 2F5F      		subi r18,lo8(-(1))
 123 003a 2370      		andi r18,lo8(3)
 124 003c 2093 0000 		sts column.1636,r18
  96:main.c        ****     first = column * 3;
 125               		.loc 1 96 0
 126 0040 822F      		mov r24,r18
 127 0042 63E0      		ldi r22,lo8(3)
 128 0044 00D0      		rcall __mulqi3
 129 0046 8093 0000 		sts first.1634,r24
  97:main.c        ****     colbit = 1<<column;
 130               		.loc 1 97 0
 131 004a 41E0      		ldi r20,lo8(1)
 132 004c 50E0      		ldi r21,0
 133 004e BA01      		movw r22,r20
 134 0050 00C0      		rjmp 2f
 135               		1:
 136 0052 660F      		lsl r22
 137 0054 771F      		rol r23
 138               		2:
 139 0056 2A95      		dec r18
 140 0058 02F4      		brpl 1b
 141 005a 6093 0000 		sts colbit.1638,r22
 142               	.L5:
  98:main.c        ****   }
  99:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 143               		.loc 1 99 0
 144 005e 2091 0000 		lds r18,first.1634
 145 0062 30E0      		ldi r19,0
 146 0064 F901      		movw r30,r18
 147 0066 E050      		subi r30,lo8(-(level))
 148 0068 F040      		sbci r31,hi8(-(level))
 149 006a 8081      		ld r24,Z
 150 006c 9813      		cpse r25,r24
 151 006e 00C0      		rjmp .L6
 152               		.loc 1 99 0 is_stmt 0 discriminator 1
 153 0070 8091 0000 		lds r24,bits.1637
 154 0074 8670      		andi r24,lo8(6)
 155 0076 8093 0000 		sts bits.1637,r24
 156               	.L6:
 100:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 157               		.loc 1 100 0 is_stmt 1
 158 007a F901      		movw r30,r18
 159 007c E050      		subi r30,lo8(-(level+1))
 160 007e F040      		sbci r31,hi8(-(level+1))
 161 0080 8081      		ld r24,Z
 162 0082 9813      		cpse r25,r24
 163 0084 00C0      		rjmp .L7
 164               		.loc 1 100 0 is_stmt 0 discriminator 1
 165 0086 8091 0000 		lds r24,bits.1637
 166 008a 8570      		andi r24,lo8(5)
 167 008c 8093 0000 		sts bits.1637,r24
 168               	.L7:
 101:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 169               		.loc 1 101 0 is_stmt 1
 170 0090 F901      		movw r30,r18
 171 0092 E050      		subi r30,lo8(-(level+2))
 172 0094 F040      		sbci r31,hi8(-(level+2))
 173 0096 8081      		ld r24,Z
 174 0098 9813      		cpse r25,r24
 175 009a 00C0      		rjmp .L8
 176               		.loc 1 101 0 is_stmt 0 discriminator 1
 177 009c 8091 0000 		lds r24,bits.1637
 178 00a0 8370      		andi r24,lo8(3)
 179 00a2 8093 0000 		sts bits.1637,r24
 180               	.L8:
 102:main.c        ****   uint8_t mask = colbit - 1;
 181               		.loc 1 102 0 is_stmt 1
 182 00a6 4091 0000 		lds r20,colbit.1638
 183 00aa 6FEF      		ldi r22,lo8(-1)
 184 00ac 640F      		add r22,r20
 185               	.LVL0:
 103:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 186               		.loc 1 103 0
 187 00ae 5091 0000 		lds r21,bits.1637
 188 00b2 862F      		mov r24,r22
 189 00b4 90E0      		ldi r25,0
 190 00b6 8095      		com r24
 191 00b8 9095      		com r25
 192 00ba 252F      		mov r18,r21
 193 00bc 30E0      		ldi r19,0
 194 00be 8223      		and r24,r18
 195 00c0 9323      		and r25,r19
 196 00c2 880F      		lsl r24
 197 00c4 991F      		rol r25
 198 00c6 5623      		and r21,r22
 199 00c8 852B      		or r24,r21
 200               	.LVL1:
 104:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 201               		.loc 1 104 0
 202 00ca 97B3      		in r25,0x17
 203 00cc 907F      		andi r25,lo8(-16)
 204 00ce 492B      		or r20,r25
 205 00d0 482B      		or r20,r24
 206 00d2 47BB      		out 0x17,r20
 105:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 207               		.loc 1 105 0
 208 00d4 98B3      		in r25,0x18
 209 00d6 907F      		andi r25,lo8(-16)
 210 00d8 892B      		or r24,r25
 211               	.LVL2:
 212 00da 88BB      		out 0x18,r24
 106:main.c        ****     
 107:main.c        ****     cnt++;
 213               		.loc 1 107 0
 214 00dc 8091 0000 		lds r24,cnt
 215 00e0 8F5F      		subi r24,lo8(-(1))
 216 00e2 8093 0000 		sts cnt,r24
 108:main.c        ****     if(cnt==speed){
 217               		.loc 1 108 0
 218 00e6 9091 0000 		lds r25,cnt
 219 00ea 8091 0000 		lds r24,speed
 220 00ee 9813      		cpse r25,r24
 221 00f0 00C0      		rjmp .L10
 109:main.c        ****         cnt=0;
 222               		.loc 1 109 0
 223 00f2 1092 0000 		sts cnt,__zero_reg__
 110:main.c        ****     switch(blinkMode){
 224               		.loc 1 110 0
 225 00f6 8091 0000 		lds r24,blinkMode
 226 00fa 8823      		tst r24
 227 00fc 01F4      		brne .+2
 228 00fe 00C0      		rjmp .L11
 229 0100 8230      		cpi r24,lo8(2)
 230 0102 01F0      		breq .+2
 231 0104 00C0      		rjmp .L10
 111:main.c        ****         case SCROLL:
 112:main.c        ****             if(pstate&(1<<DIR_FLAG)){
 232               		.loc 1 112 0
 233 0106 8091 0000 		lds r24,pstate
 113:main.c        ****                 level[order[index]]=brightness++;
 234               		.loc 1 113 0
 235 010a E091 0000 		lds r30,index
 236 010e F0E0      		ldi r31,0
 237 0110 E050      		subi r30,lo8(-(order))
 238 0112 F040      		sbci r31,hi8(-(order))
 239 0114 E081      		ld r30,Z
 240 0116 F0E0      		ldi r31,0
 112:main.c        ****                 level[order[index]]=brightness++;
 241               		.loc 1 112 0
 242 0118 82FF      		sbrs r24,2
 243 011a 00C0      		rjmp .L13
 244               		.loc 1 113 0
 245 011c 8091 0000 		lds r24,brightness
 246 0120 91E0      		ldi r25,lo8(1)
 247 0122 980F      		add r25,r24
 248 0124 9093 0000 		sts brightness,r25
 249 0128 E050      		subi r30,lo8(-(level))
 250 012a F040      		sbci r31,hi8(-(level))
 251 012c 8083      		st Z,r24
 114:main.c        ****                 if(brightness>7){
 252               		.loc 1 114 0
 253 012e 8091 0000 		lds r24,brightness
 254 0132 8830      		cpi r24,lo8(8)
 255 0134 00F4      		brsh .+2
 256 0136 00C0      		rjmp .L10
 115:main.c        ****                     brightness=0;
 257               		.loc 1 115 0
 258 0138 1092 0000 		sts brightness,__zero_reg__
 116:main.c        ****                     index++;
 259               		.loc 1 116 0
 260 013c 8091 0000 		lds r24,index
 261 0140 8F5F      		subi r24,lo8(-(1))
 262 0142 8093 0000 		sts index,r24
 117:main.c        ****                     if(index>11){
 263               		.loc 1 117 0
 264 0146 8091 0000 		lds r24,index
 265 014a 8C30      		cpi r24,lo8(12)
 266 014c 00F4      		brsh .+2
 267 014e 00C0      		rjmp .L10
 118:main.c        ****                         index=11;
 268               		.loc 1 118 0
 269 0150 8BE0      		ldi r24,lo8(11)
 270 0152 8093 0000 		sts index,r24
 119:main.c        ****                         brightness=7;
 271               		.loc 1 119 0
 272 0156 87E0      		ldi r24,lo8(7)
 273 0158 8093 0000 		sts brightness,r24
 120:main.c        ****                         pstate&=~(1<<DIR_FLAG);
 274               		.loc 1 120 0
 275 015c 8091 0000 		lds r24,pstate
 276 0160 8B7F      		andi r24,lo8(-5)
 277 0162 00C0      		rjmp .L27
 278               	.L13:
 121:main.c        ****                     }
 122:main.c        ****                 }
 123:main.c        ****             }else{
 124:main.c        ****                 level[order[index]]=brightness--;
 279               		.loc 1 124 0
 280 0164 8091 0000 		lds r24,brightness
 281 0168 9FEF      		ldi r25,lo8(-1)
 282 016a 980F      		add r25,r24
 283 016c 9093 0000 		sts brightness,r25
 284 0170 E050      		subi r30,lo8(-(level))
 285 0172 F040      		sbci r31,hi8(-(level))
 286 0174 8083      		st Z,r24
 125:main.c        ****                 if(brightness==0){
 287               		.loc 1 125 0
 288 0176 8091 0000 		lds r24,brightness
 289 017a 8111      		cpse r24,__zero_reg__
 290 017c 00C0      		rjmp .L10
 126:main.c        ****                     brightness=7;
 291               		.loc 1 126 0
 292 017e 87E0      		ldi r24,lo8(7)
 293 0180 8093 0000 		sts brightness,r24
 127:main.c        ****                     index--;
 294               		.loc 1 127 0
 295 0184 8091 0000 		lds r24,index
 296 0188 8150      		subi r24,lo8(-(-1))
 297 018a 8093 0000 		sts index,r24
 128:main.c        ****                     if(index==0){
 298               		.loc 1 128 0
 299 018e 8091 0000 		lds r24,index
 300 0192 8111      		cpse r24,__zero_reg__
 301 0194 00C0      		rjmp .L10
 129:main.c        ****                         index=0;
 302               		.loc 1 129 0
 303 0196 1092 0000 		sts index,__zero_reg__
 130:main.c        ****                         brightness=0;
 304               		.loc 1 130 0
 305 019a 1092 0000 		sts brightness,__zero_reg__
 131:main.c        ****                         pstate|=(1<<DIR_FLAG);
 306               		.loc 1 131 0
 307 019e 8091 0000 		lds r24,pstate
 308 01a2 8460      		ori r24,lo8(4)
 309               	.L27:
 310 01a4 8093 0000 		sts pstate,r24
 311 01a8 00C0      		rjmp .L10
 312               	.L11:
 132:main.c        ****                     }
 133:main.c        ****                 }
 134:main.c        ****             }
 135:main.c        ****             
 136:main.c        ****             break;
 137:main.c        ****         case ALL:
 138:main.c        ****             level[order[index]]=brightness;
 313               		.loc 1 138 0
 314 01aa E091 0000 		lds r30,index
 315 01ae F0E0      		ldi r31,0
 316 01b0 E050      		subi r30,lo8(-(order))
 317 01b2 F040      		sbci r31,hi8(-(order))
 318 01b4 E081      		ld r30,Z
 319 01b6 F0E0      		ldi r31,0
 320 01b8 8091 0000 		lds r24,brightness
 321 01bc E050      		subi r30,lo8(-(level))
 322 01be F040      		sbci r31,hi8(-(level))
 323 01c0 8083      		st Z,r24
 139:main.c        ****             brightness=(brightness+1)&0x07;
 324               		.loc 1 139 0
 325 01c2 8091 0000 		lds r24,brightness
 326 01c6 8F5F      		subi r24,lo8(-(1))
 327 01c8 8770      		andi r24,lo8(7)
 328 01ca 8093 0000 		sts brightness,r24
 140:main.c        ****             if(brightness==0){
 329               		.loc 1 140 0
 330 01ce 8091 0000 		lds r24,brightness
 331 01d2 8111      		cpse r24,__zero_reg__
 332 01d4 00C0      		rjmp .L10
 141:main.c        ****                 //level[order[index]]=0;
 142:main.c        ****                 index++;
 333               		.loc 1 142 0
 334 01d6 8091 0000 		lds r24,index
 335 01da 8F5F      		subi r24,lo8(-(1))
 336 01dc 8093 0000 		sts index,r24
 143:main.c        ****                 if(index>11)index=0;
 337               		.loc 1 143 0
 338 01e0 8091 0000 		lds r24,index
 339 01e4 8C30      		cpi r24,lo8(12)
 340 01e6 00F0      		brlo .L10
 341               		.loc 1 143 0 is_stmt 0 discriminator 1
 342 01e8 1092 0000 		sts index,__zero_reg__
 343               	.L10:
 144:main.c        ****             }
 145:main.c        ****             break;
 146:main.c        ****         case PIXIE:
 147:main.c        ****         case DEBUG:
 148:main.c        ****         default:
 149:main.c        ****             break;
 150:main.c        ****         }
 151:main.c        ****     }
 152:main.c        ****     
 153:main.c        ****     if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
 344               		.loc 1 153 0 is_stmt 1
 345 01ec B49B      		sbis 0x16,4
 346 01ee 00C0      		rjmp .L15
 347               		.loc 1 153 0 is_stmt 0 discriminator 1
 348 01f0 8091 0000 		lds r24,pstate
 349 01f4 80FF      		sbrs r24,0
 350 01f6 00C0      		rjmp .L15
 154:main.c        ****         pstate&=~(1<<TOUCH_FLAG);   
 351               		.loc 1 154 0 is_stmt 1
 352 01f8 8091 0000 		lds r24,pstate
 353 01fc 8E7F      		andi r24,lo8(-2)
 354 01fe 8093 0000 		sts pstate,r24
 155:main.c        ****         blinkMode++;
 355               		.loc 1 155 0
 356 0202 8091 0000 		lds r24,blinkMode
 357 0206 8F5F      		subi r24,lo8(-(1))
 358 0208 8093 0000 		sts blinkMode,r24
 156:main.c        ****         if(blinkMode>=NB_MODES)blinkMode=0;
 359               		.loc 1 156 0
 360 020c 8091 0000 		lds r24,blinkMode
 361 0210 8430      		cpi r24,lo8(4)
 362 0212 00F0      		brlo .L16
 363               		.loc 1 156 0 is_stmt 0 discriminator 1
 364 0214 1092 0000 		sts blinkMode,__zero_reg__
 365               	.L16:
 157:main.c        ****         brightness=0;
 366               		.loc 1 157 0 is_stmt 1
 367 0218 1092 0000 		sts brightness,__zero_reg__
 158:main.c        ****         pstate|=(1<<DIR_FLAG);
 368               		.loc 1 158 0
 369 021c 8091 0000 		lds r24,pstate
 370 0220 8460      		ori r24,lo8(4)
 371 0222 8093 0000 		sts pstate,r24
 159:main.c        ****         index=0;
 372               		.loc 1 159 0
 373 0226 1092 0000 		sts index,__zero_reg__
 374               	.LVL3:
 375 022a 80E0      		ldi r24,0
 376 022c 90E0      		ldi r25,0
 377               	.LVL4:
 378               	.L17:
 379               	.LBB2:
 160:main.c        ****         for(uint8_t i=0;i<12;i++){
 161:main.c        ****             level[i]=0;
 380               		.loc 1 161 0 discriminator 3
 381 022e FC01      		movw r30,r24
 382 0230 E050      		subi r30,lo8(-(level))
 383 0232 F040      		sbci r31,hi8(-(level))
 384 0234 1082      		st Z,__zero_reg__
 385               	.LVL5:
 386 0236 0196      		adiw r24,1
 387               	.LVL6:
 160:main.c        ****         for(uint8_t i=0;i<12;i++){
 388               		.loc 1 160 0 discriminator 3
 389 0238 8C30      		cpi r24,12
 390 023a 9105      		cpc r25,__zero_reg__
 391 023c 01F4      		brne .L17
 392 023e 00C0      		rjmp .L4
 393               	.LVL7:
 394               	.L15:
 395               	.LBE2:
 162:main.c        ****         }
 163:main.c        ****     }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 396               		.loc 1 163 0
 397 0240 B499      		sbic 0x16,4
 398 0242 00C0      		rjmp .L4
 399               		.loc 1 163 0 is_stmt 0 discriminator 1
 400 0244 8091 0000 		lds r24,pstate
 401 0248 80FD      		sbrc r24,0
 402 024a 00C0      		rjmp .L4
 164:main.c        ****         pstate|=(1<<TOUCH_FLAG);            
 403               		.loc 1 164 0 is_stmt 1
 404 024c 8091 0000 		lds r24,pstate
 405 0250 8160      		ori r24,lo8(1)
 406 0252 8093 0000 		sts pstate,r24
 407               	.L4:
 408               	/* epilogue start */
 165:main.c        ****     }
 166:main.c        **** }
 409               		.loc 1 166 0
 410 0256 FF91      		pop r31
 411 0258 EF91      		pop r30
 412 025a 9F91      		pop r25
 413 025c 8F91      		pop r24
 414 025e 7F91      		pop r23
 415 0260 6F91      		pop r22
 416               	.LVL8:
 417 0262 5F91      		pop r21
 418 0264 4F91      		pop r20
 419 0266 3F91      		pop r19
 420 0268 2F91      		pop r18
 421 026a 0F90      		pop r0
 422 026c 0FBE      		out __SREG__,r0
 423 026e 0F90      		pop r0
 424 0270 1F90      		pop r1
 425 0272 1895      		reti
 426               		.cfi_endproc
 427               	.LFE10:
 429               		.local	colbit.1638
 430               		.comm	colbit.1638,1,1
 431               		.local	first.1634
 432               		.comm	first.1634,1,1
 433               		.local	column.1636
 434               		.comm	column.1636,1,1
 435               		.local	bits.1637
 436               		.comm	bits.1637,1,1
 437               		.local	ramp.1635
 438               		.comm	ramp.1635,1,1
 439               	.global	index
 440               		.data
 443               	index:
 444 0000 01        		.byte	1
 445               	.global	speed
 448               	speed:
 449 0001 3F        		.byte	63
 450               	.global	brightness
 453               	brightness:
 454 0002 05        		.byte	5
 455               	.global	pstate
 456               		.section .bss
 459               	pstate:
 460 0000 00        		.zero	1
 461               	.global	blinkMode
 464               	blinkMode:
 465 0001 00        		.zero	1
 466               	.global	order
 467               		.section	.rodata
 470               	order:
 471 0000 03        		.byte	3
 472 0001 08        		.byte	8
 473 0002 02        		.byte	2
 474 0003 07        		.byte	7
 475 0004 09        		.byte	9
 476 0005 04        		.byte	4
 477 0006 05        		.byte	5
 478 0007 01        		.byte	1
 479 0008 00        		.byte	0
 480 0009 06        		.byte	6
 481 000a 0B        		.byte	11
 482 000b 0A        		.byte	10
 483               		.comm	level,12,1
 484               	.global	cnt
 485               		.data
 488               	cnt:
 489 0003 01        		.byte	1
 490               		.text
 491               	.Letext0:
 492               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccKtD6ip.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccKtD6ip.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccKtD6ip.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccKtD6ip.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccKtD6ip.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccKtD6ip.s:13     .text.startup:0000000000000000 main
     /tmp/ccKtD6ip.s:50     .text:0000000000000000 __vector_3
     /tmp/ccKtD6ip.s:436    .bss:0000000000000006 ramp.1635
     /tmp/ccKtD6ip.s:434    .bss:0000000000000005 bits.1637
     /tmp/ccKtD6ip.s:432    .bss:0000000000000004 column.1636
     /tmp/ccKtD6ip.s:430    .bss:0000000000000003 first.1634
                             .bss:0000000000000002 colbit.1638
                            *COM*:000000000000000c level
     /tmp/ccKtD6ip.s:488    .data:0000000000000003 cnt
     /tmp/ccKtD6ip.s:448    .data:0000000000000001 speed
     /tmp/ccKtD6ip.s:464    .bss:0000000000000001 blinkMode
     /tmp/ccKtD6ip.s:459    .bss:0000000000000000 pstate
     /tmp/ccKtD6ip.s:443    .data:0000000000000000 index
     /tmp/ccKtD6ip.s:470    .rodata:0000000000000000 order
     /tmp/ccKtD6ip.s:453    .data:0000000000000002 brightness

UNDEFINED SYMBOLS
__mulqi3
__do_copy_data
__do_clear_bss
