   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB9:
  15               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/power.h>
   5:main.c        **** 
   6:main.c        **** #define ALL 0
   7:main.c        **** #define PIXIE 1
   8:main.c        **** #define SCROLL 2
   9:main.c        **** #define DEBUG 3
  10:main.c        **** #define NB_MODES 4
  11:main.c        **** 
  12:main.c        **** #define TOUCH_FLAG 0
  13:main.c        **** //#define ADC_FLAG 1
  14:main.c        **** #define DEBUG_FLAG 2
  15:main.c        **** #define DIR_FLAG 2
  16:main.c        **** 
  17:main.c        **** volatile uint8_t cnt=1;
  18:main.c        **** volatile uint8_t level[12];
  19:main.c        **** //uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 }; //Brightness levels of each led.
  20:main.c        **** //uint8_t order[12] = {0,11,9,4,2,10,7,6,3,1,8,5};//Reverse
  21:main.c        **** const uint8_t order[12] = {3,8,2,7,9,4,5,1,0,6,11,10};//Right
  22:main.c        **** volatile uint8_t blinkMode = ALL;
  23:main.c        **** volatile uint8_t pstate=0;
  24:main.c        **** /*
  25:main.c        **** static	long	randx;
  26:main.c        **** static	char	randf;
  27:main.c        **** 
  28:main.c        **** void srand(unsigned x){
  29:main.c        **** 	randx = x;
  30:main.c        **** 	randf = 1;
  31:main.c        **** }
  32:main.c        **** 
  33:main.c        **** int rand(void){
  34:main.c        **** 	if(!randf)srand(1);
  35:main.c        **** 	return((int)((randx = randx*1103515245L + 12345)>>16) & 077777);
  36:main.c        **** }
  37:main.c        **** */
  38:main.c        **** volatile uint8_t brightness=5;
  39:main.c        **** volatile uint8_t speed=63;
  40:main.c        **** volatile uint8_t index=1;
  41:main.c        **** 
  42:main.c        **** 
  43:main.c        **** int main(void){
  16               		.loc 1 43 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  44:main.c        ****       
  45:main.c        ****     //Timer1 for LED charlieplexing
  46:main.c        ****     TCCR1=(1<<CTC1)|(1<<CS12);//|(1<<CS10)|(1<<CS11);        //Divide clock by 1, was 2<<CS10
  22               		.loc 1 46 0
  23 0000 84E8      		ldi r24,lo8(-124)
  24 0002 80BF      		out 0x30,r24
  47:main.c        ****     GTCCR=0;                          //No PWM
  25               		.loc 1 47 0
  26 0004 1CBC      		out 0x2c,__zero_reg__
  48:main.c        ****     OCR1A=0;                          //No PWM
  27               		.loc 1 48 0
  28 0006 1EBC      		out 0x2e,__zero_reg__
  49:main.c        ****     OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
  29               		.loc 1 49 0
  30 0008 89EF      		ldi r24,lo8(-7)
  31 000a 8DBD      		out 0x2d,r24
  50:main.c        ****     TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
  32               		.loc 1 50 0
  33 000c 89B7      		in r24,0x39
  34 000e 8064      		ori r24,lo8(64)
  35 0010 89BF      		out 0x39,r24
  51:main.c        ****     /*
  52:main.c        ****     TCCR0A=(1<<WGM01);
  53:main.c        ****     OCR0A=255;
  54:main.c        ****     TCCR0B=(1<<CS02)|(1<<CS00);
  55:main.c        ****     TIMSK|=(1<<OCIE0A);
  56:main.c        ****     */
  57:main.c        ****     /*
  58:main.c        ****     ADMUX=(1<<MUX3)|(1<<MUX2);
  59:main.c        ****     ADCSRA |= (1<<ADEN) | (1<<ADIE);
  60:main.c        ****     */
  61:main.c        ****     //GIMSK|=(1<<PCIE);
  62:main.c        ****     
  63:main.c        ****     sei();                              //Enable interrupts
  36               		.loc 1 63 0
  37               	/* #APP */
  38               	 ;  63 "main.c" 1
  39 0012 7894      		sei
  40               	 ;  0 "" 2
  41               	/* #NOAPP */
  42               	.L2:
  43 0014 00C0      		rjmp .L2
  44               		.cfi_endproc
  45               	.LFE9:
  47               		.text
  48               	.global	__vector_3
  50               	__vector_3:
  51               	.LFB10:
  64:main.c        ****     while(1){
  65:main.c        ****         
  66:main.c        **** 
  67:main.c        ****         /*if(pstate&(1<<DEBUG_FLAG)){
  68:main.c        ****             //pstate&=~(1<<DEBUG_FLAG);  
  69:main.c        ****         }  */
  70:main.c        **** /*
  71:main.c        ****         if(pstate&(1<<ADC_FLAG)){
  72:main.c        ****             pstate&=~(1<<ADC_FLAG);   
  73:main.c        ****             ADCSRA |= (1<<ADSC);
  74:main.c        ****         }*/
  75:main.c        **** 
  76:main.c        ****     }
  77:main.c        ****     return 0;
  78:main.c        **** }     
  79:main.c        **** /*
  80:main.c        **** ISR(ADC_vect){
  81:main.c        ****     uint16_t res=ADCL;
  82:main.c        ****     res|=(ADCH<<8);
  83:main.c        ****     blinkMode=2753/res-3;   //Vcc=1024*1.1/ADC
  84:main.c        **** }*/
  85:main.c        **** /*
  86:main.c        **** ISR(TIM0_COMPA_vect) {
  87:main.c        ****     
  88:main.c        **** }*/
  89:main.c        **** 
  90:main.c        **** 
  91:main.c        **** ISR(TIM1_COMPA_vect) {
  52               		.loc 1 91 0
  53               		.cfi_startproc
  54 0000 1F92      		push r1
  55               	.LCFI0:
  56               		.cfi_def_cfa_offset 3
  57               		.cfi_offset 1, -2
  58 0002 0F92      		push r0
  59               	.LCFI1:
  60               		.cfi_def_cfa_offset 4
  61               		.cfi_offset 0, -3
  62 0004 0FB6      		in r0,__SREG__
  63 0006 0F92      		push r0
  64 0008 1124      		clr __zero_reg__
  65 000a 2F93      		push r18
  66               	.LCFI2:
  67               		.cfi_def_cfa_offset 5
  68               		.cfi_offset 18, -4
  69 000c 3F93      		push r19
  70               	.LCFI3:
  71               		.cfi_def_cfa_offset 6
  72               		.cfi_offset 19, -5
  73 000e 4F93      		push r20
  74               	.LCFI4:
  75               		.cfi_def_cfa_offset 7
  76               		.cfi_offset 20, -6
  77 0010 5F93      		push r21
  78               	.LCFI5:
  79               		.cfi_def_cfa_offset 8
  80               		.cfi_offset 21, -7
  81 0012 6F93      		push r22
  82               	.LCFI6:
  83               		.cfi_def_cfa_offset 9
  84               		.cfi_offset 22, -8
  85 0014 7F93      		push r23
  86               	.LCFI7:
  87               		.cfi_def_cfa_offset 10
  88               		.cfi_offset 23, -9
  89 0016 8F93      		push r24
  90               	.LCFI8:
  91               		.cfi_def_cfa_offset 11
  92               		.cfi_offset 24, -10
  93 0018 9F93      		push r25
  94               	.LCFI9:
  95               		.cfi_def_cfa_offset 12
  96               		.cfi_offset 25, -11
  97 001a EF93      		push r30
  98               	.LCFI10:
  99               		.cfi_def_cfa_offset 13
 100               		.cfi_offset 30, -12
 101 001c FF93      		push r31
 102               	.LCFI11:
 103               		.cfi_def_cfa_offset 14
 104               		.cfi_offset 31, -13
 105               	/* prologue: Signal */
 106               	/* frame size = 0 */
 107               	/* stack size = 13 */
 108               	.L__stack_usage = 13
  92:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
  93:main.c        ****   ramp = (ramp+1) & 0x07;
 109               		.loc 1 93 0
 110 001e 9091 0000 		lds r25,ramp.1635
 111 0022 9F5F      		subi r25,lo8(-(1))
 112 0024 9770      		andi r25,lo8(7)
 113 0026 9093 0000 		sts ramp.1635,r25
  94:main.c        ****   if (ramp == 0) {
 114               		.loc 1 94 0
 115 002a 9111      		cpse r25,__zero_reg__
 116 002c 00C0      		rjmp .L5
  95:main.c        ****     bits = 0x07;
 117               		.loc 1 95 0
 118 002e 87E0      		ldi r24,lo8(7)
 119 0030 8093 0000 		sts bits.1637,r24
  96:main.c        ****     column = (column + 1) & 0x03;
 120               		.loc 1 96 0
 121 0034 2091 0000 		lds r18,column.1636
 122 0038 2F5F      		subi r18,lo8(-(1))
 123 003a 2370      		andi r18,lo8(3)
 124 003c 2093 0000 		sts column.1636,r18
  97:main.c        ****     first = column * 3;
 125               		.loc 1 97 0
 126 0040 822F      		mov r24,r18
 127 0042 63E0      		ldi r22,lo8(3)
 128 0044 00D0      		rcall __mulqi3
 129 0046 8093 0000 		sts first.1634,r24
  98:main.c        ****     colbit = 1<<column;
 130               		.loc 1 98 0
 131 004a 41E0      		ldi r20,lo8(1)
 132 004c 50E0      		ldi r21,0
 133 004e BA01      		movw r22,r20
 134 0050 00C0      		rjmp 2f
 135               		1:
 136 0052 660F      		lsl r22
 137 0054 771F      		rol r23
 138               		2:
 139 0056 2A95      		dec r18
 140 0058 02F4      		brpl 1b
 141 005a 6093 0000 		sts colbit.1638,r22
 142               	.L5:
  99:main.c        ****   }
 100:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 143               		.loc 1 100 0
 144 005e 2091 0000 		lds r18,first.1634
 145 0062 30E0      		ldi r19,0
 146 0064 F901      		movw r30,r18
 147 0066 E050      		subi r30,lo8(-(level))
 148 0068 F040      		sbci r31,hi8(-(level))
 149 006a 8081      		ld r24,Z
 150 006c 9813      		cpse r25,r24
 151 006e 00C0      		rjmp .L6
 152               		.loc 1 100 0 is_stmt 0 discriminator 1
 153 0070 8091 0000 		lds r24,bits.1637
 154 0074 8670      		andi r24,lo8(6)
 155 0076 8093 0000 		sts bits.1637,r24
 156               	.L6:
 101:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 157               		.loc 1 101 0 is_stmt 1
 158 007a F901      		movw r30,r18
 159 007c E050      		subi r30,lo8(-(level+1))
 160 007e F040      		sbci r31,hi8(-(level+1))
 161 0080 8081      		ld r24,Z
 162 0082 9813      		cpse r25,r24
 163 0084 00C0      		rjmp .L7
 164               		.loc 1 101 0 is_stmt 0 discriminator 1
 165 0086 8091 0000 		lds r24,bits.1637
 166 008a 8570      		andi r24,lo8(5)
 167 008c 8093 0000 		sts bits.1637,r24
 168               	.L7:
 102:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 169               		.loc 1 102 0 is_stmt 1
 170 0090 F901      		movw r30,r18
 171 0092 E050      		subi r30,lo8(-(level+2))
 172 0094 F040      		sbci r31,hi8(-(level+2))
 173 0096 8081      		ld r24,Z
 174 0098 9813      		cpse r25,r24
 175 009a 00C0      		rjmp .L8
 176               		.loc 1 102 0 is_stmt 0 discriminator 1
 177 009c 8091 0000 		lds r24,bits.1637
 178 00a0 8370      		andi r24,lo8(3)
 179 00a2 8093 0000 		sts bits.1637,r24
 180               	.L8:
 103:main.c        ****   uint8_t mask = colbit - 1;
 181               		.loc 1 103 0 is_stmt 1
 182 00a6 4091 0000 		lds r20,colbit.1638
 183 00aa 6FEF      		ldi r22,lo8(-1)
 184 00ac 640F      		add r22,r20
 185               	.LVL0:
 104:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 186               		.loc 1 104 0
 187 00ae 5091 0000 		lds r21,bits.1637
 188 00b2 862F      		mov r24,r22
 189 00b4 90E0      		ldi r25,0
 190 00b6 8095      		com r24
 191 00b8 9095      		com r25
 192 00ba 252F      		mov r18,r21
 193 00bc 30E0      		ldi r19,0
 194 00be 8223      		and r24,r18
 195 00c0 9323      		and r25,r19
 196 00c2 880F      		lsl r24
 197 00c4 991F      		rol r25
 198 00c6 5623      		and r21,r22
 199 00c8 852B      		or r24,r21
 200               	.LVL1:
 105:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 201               		.loc 1 105 0
 202 00ca 97B3      		in r25,0x17
 203 00cc 907F      		andi r25,lo8(-16)
 204 00ce 492B      		or r20,r25
 205 00d0 482B      		or r20,r24
 206 00d2 47BB      		out 0x17,r20
 106:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 207               		.loc 1 106 0
 208 00d4 98B3      		in r25,0x18
 209 00d6 907F      		andi r25,lo8(-16)
 210 00d8 892B      		or r24,r25
 211               	.LVL2:
 212 00da 88BB      		out 0x18,r24
 107:main.c        ****     
 108:main.c        ****     cnt++;
 213               		.loc 1 108 0
 214 00dc 8091 0000 		lds r24,cnt
 215 00e0 8F5F      		subi r24,lo8(-(1))
 216 00e2 8093 0000 		sts cnt,r24
 109:main.c        ****     if(cnt==speed){
 217               		.loc 1 109 0
 218 00e6 9091 0000 		lds r25,cnt
 219 00ea 8091 0000 		lds r24,speed
 220 00ee 9813      		cpse r25,r24
 221 00f0 00C0      		rjmp .L10
 110:main.c        ****         cnt=0;
 222               		.loc 1 110 0
 223 00f2 1092 0000 		sts cnt,__zero_reg__
 111:main.c        ****     switch(blinkMode){
 224               		.loc 1 111 0
 225 00f6 8091 0000 		lds r24,blinkMode
 226 00fa 8130      		cpi r24,lo8(1)
 227 00fc 01F4      		brne .+2
 228 00fe 00C0      		rjmp .L11
 229 0100 00F4      		brsh .+2
 230 0102 00C0      		rjmp .L12
 231 0104 8230      		cpi r24,lo8(2)
 232 0106 01F0      		breq .+2
 233 0108 00C0      		rjmp .L10
 112:main.c        ****         case SCROLL:
 113:main.c        ****             if(pstate&(1<<DIR_FLAG)){
 234               		.loc 1 113 0
 235 010a 8091 0000 		lds r24,pstate
 114:main.c        ****                 level[order[index]]=brightness++;
 236               		.loc 1 114 0
 237 010e E091 0000 		lds r30,index
 238 0112 F0E0      		ldi r31,0
 239 0114 E050      		subi r30,lo8(-(order))
 240 0116 F040      		sbci r31,hi8(-(order))
 241 0118 E081      		ld r30,Z
 242 011a F0E0      		ldi r31,0
 113:main.c        ****                 level[order[index]]=brightness++;
 243               		.loc 1 113 0
 244 011c 82FF      		sbrs r24,2
 245 011e 00C0      		rjmp .L14
 246               		.loc 1 114 0
 247 0120 8091 0000 		lds r24,brightness
 248 0124 91E0      		ldi r25,lo8(1)
 249 0126 980F      		add r25,r24
 250 0128 9093 0000 		sts brightness,r25
 251 012c E050      		subi r30,lo8(-(level))
 252 012e F040      		sbci r31,hi8(-(level))
 253 0130 8083      		st Z,r24
 115:main.c        ****                 if(brightness>7){
 254               		.loc 1 115 0
 255 0132 8091 0000 		lds r24,brightness
 256 0136 8830      		cpi r24,lo8(8)
 257 0138 00F4      		brsh .+2
 258 013a 00C0      		rjmp .L10
 116:main.c        ****                     brightness=0;
 259               		.loc 1 116 0
 260 013c 1092 0000 		sts brightness,__zero_reg__
 117:main.c        ****                     index++;
 261               		.loc 1 117 0
 262 0140 8091 0000 		lds r24,index
 263 0144 8F5F      		subi r24,lo8(-(1))
 264 0146 8093 0000 		sts index,r24
 118:main.c        ****                     if(index>11){
 265               		.loc 1 118 0
 266 014a 8091 0000 		lds r24,index
 267 014e 8C30      		cpi r24,lo8(12)
 268 0150 00F4      		brsh .+2
 269 0152 00C0      		rjmp .L10
 119:main.c        ****                         index=11;
 270               		.loc 1 119 0
 271 0154 8BE0      		ldi r24,lo8(11)
 272 0156 8093 0000 		sts index,r24
 120:main.c        ****                         brightness=7;
 273               		.loc 1 120 0
 274 015a 87E0      		ldi r24,lo8(7)
 275 015c 8093 0000 		sts brightness,r24
 121:main.c        ****                         pstate&=~(1<<DIR_FLAG);
 276               		.loc 1 121 0
 277 0160 8091 0000 		lds r24,pstate
 278 0164 8B7F      		andi r24,lo8(-5)
 279 0166 00C0      		rjmp .L30
 280               	.L14:
 122:main.c        ****                     }
 123:main.c        ****                 }
 124:main.c        ****             }else{
 125:main.c        ****                 level[order[index]]=brightness--;
 281               		.loc 1 125 0
 282 0168 8091 0000 		lds r24,brightness
 283 016c 9FEF      		ldi r25,lo8(-1)
 284 016e 980F      		add r25,r24
 285 0170 9093 0000 		sts brightness,r25
 286 0174 E050      		subi r30,lo8(-(level))
 287 0176 F040      		sbci r31,hi8(-(level))
 288 0178 8083      		st Z,r24
 126:main.c        ****                 if(brightness==0){
 289               		.loc 1 126 0
 290 017a 8091 0000 		lds r24,brightness
 291 017e 8111      		cpse r24,__zero_reg__
 292 0180 00C0      		rjmp .L10
 127:main.c        ****                     brightness=7;
 293               		.loc 1 127 0
 294 0182 87E0      		ldi r24,lo8(7)
 295 0184 8093 0000 		sts brightness,r24
 128:main.c        ****                     index--;
 296               		.loc 1 128 0
 297 0188 8091 0000 		lds r24,index
 298 018c 8150      		subi r24,lo8(-(-1))
 299 018e 8093 0000 		sts index,r24
 129:main.c        ****                     if(index==0){
 300               		.loc 1 129 0
 301 0192 8091 0000 		lds r24,index
 302 0196 8111      		cpse r24,__zero_reg__
 303 0198 00C0      		rjmp .L10
 130:main.c        ****                         index=0;
 304               		.loc 1 130 0
 305 019a 1092 0000 		sts index,__zero_reg__
 131:main.c        ****                         brightness=0;
 306               		.loc 1 131 0
 307 019e 1092 0000 		sts brightness,__zero_reg__
 132:main.c        ****                         pstate|=(1<<DIR_FLAG);
 308               		.loc 1 132 0
 309 01a2 8091 0000 		lds r24,pstate
 310 01a6 8460      		ori r24,lo8(4)
 311               	.L30:
 312 01a8 8093 0000 		sts pstate,r24
 313 01ac 00C0      		rjmp .L10
 314               	.L12:
 133:main.c        ****                     }
 134:main.c        ****                 }
 135:main.c        ****             }
 136:main.c        ****             
 137:main.c        ****             break;
 138:main.c        ****         case ALL:
 139:main.c        ****             level[order[index]]=brightness;
 315               		.loc 1 139 0
 316 01ae E091 0000 		lds r30,index
 317 01b2 F0E0      		ldi r31,0
 318 01b4 E050      		subi r30,lo8(-(order))
 319 01b6 F040      		sbci r31,hi8(-(order))
 320 01b8 E081      		ld r30,Z
 321 01ba F0E0      		ldi r31,0
 322 01bc 8091 0000 		lds r24,brightness
 323 01c0 E050      		subi r30,lo8(-(level))
 324 01c2 F040      		sbci r31,hi8(-(level))
 325 01c4 8083      		st Z,r24
 140:main.c        ****             brightness=(brightness+1)&0x07;
 326               		.loc 1 140 0
 327 01c6 8091 0000 		lds r24,brightness
 328 01ca 8F5F      		subi r24,lo8(-(1))
 329 01cc 8770      		andi r24,lo8(7)
 330 01ce 8093 0000 		sts brightness,r24
 141:main.c        ****             if(brightness==0){
 331               		.loc 1 141 0
 332 01d2 8091 0000 		lds r24,brightness
 333 01d6 8111      		cpse r24,__zero_reg__
 334 01d8 00C0      		rjmp .L10
 335 01da 00C0      		rjmp .L32
 336               	.L11:
 142:main.c        ****                 //level[order[index]]=0;
 143:main.c        ****                 index++;
 144:main.c        ****                 if(index>11)index=0;
 145:main.c        ****             }
 146:main.c        ****             break;
 147:main.c        ****         case PIXIE:
 148:main.c        ****             brightness++;
 337               		.loc 1 148 0
 338 01dc 8091 0000 		lds r24,brightness
 339 01e0 8F5F      		subi r24,lo8(-(1))
 340 01e2 8093 0000 		sts brightness,r24
 149:main.c        ****             if(brightness>10){
 341               		.loc 1 149 0
 342 01e6 8091 0000 		lds r24,brightness
 343 01ea 8B30      		cpi r24,lo8(11)
 344 01ec 00F0      		brlo .L16
 150:main.c        ****                 brightness=0;
 345               		.loc 1 150 0
 346 01ee 1092 0000 		sts brightness,__zero_reg__
 151:main.c        ****                 level[index]=7;
 347               		.loc 1 151 0
 348 01f2 E091 0000 		lds r30,index
 349 01f6 F0E0      		ldi r31,0
 350 01f8 E050      		subi r30,lo8(-(level))
 351 01fa F040      		sbci r31,hi8(-(level))
 352 01fc 87E0      		ldi r24,lo8(7)
 353 01fe 8083      		st Z,r24
 354               	.L32:
 152:main.c        ****                 index++;
 355               		.loc 1 152 0
 356 0200 8091 0000 		lds r24,index
 357 0204 8F5F      		subi r24,lo8(-(1))
 358 0206 8093 0000 		sts index,r24
 153:main.c        ****                 if(index>11)index=0;
 359               		.loc 1 153 0
 360 020a 8091 0000 		lds r24,index
 361 020e 8C30      		cpi r24,lo8(12)
 362 0210 00F0      		brlo .L10
 363               		.loc 1 153 0 is_stmt 0 discriminator 1
 364 0212 1092 0000 		sts index,__zero_reg__
 365 0216 00C0      		rjmp .L10
 366               	.L16:
 154:main.c        ****             }else{
 155:main.c        ****                 level[index]=0;
 367               		.loc 1 155 0 is_stmt 1
 368 0218 E091 0000 		lds r30,index
 369 021c F0E0      		ldi r31,0
 370 021e E050      		subi r30,lo8(-(level))
 371 0220 F040      		sbci r31,hi8(-(level))
 372 0222 1082      		st Z,__zero_reg__
 373               	.L10:
 156:main.c        ****             }
 157:main.c        ****         case DEBUG:
 158:main.c        ****         default:
 159:main.c        ****             break;
 160:main.c        ****         }
 161:main.c        ****     }
 162:main.c        ****     
 163:main.c        ****     if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
 374               		.loc 1 163 0
 375 0224 B49B      		sbis 0x16,4
 376 0226 00C0      		rjmp .L17
 377               		.loc 1 163 0 is_stmt 0 discriminator 1
 378 0228 8091 0000 		lds r24,pstate
 379 022c 80FF      		sbrs r24,0
 380 022e 00C0      		rjmp .L17
 164:main.c        ****         pstate&=~(1<<TOUCH_FLAG);   
 381               		.loc 1 164 0 is_stmt 1
 382 0230 8091 0000 		lds r24,pstate
 383 0234 8E7F      		andi r24,lo8(-2)
 384 0236 8093 0000 		sts pstate,r24
 165:main.c        ****         blinkMode++;
 385               		.loc 1 165 0
 386 023a 8091 0000 		lds r24,blinkMode
 387 023e 8F5F      		subi r24,lo8(-(1))
 388 0240 8093 0000 		sts blinkMode,r24
 166:main.c        ****         if(blinkMode>=NB_MODES)blinkMode=0;
 389               		.loc 1 166 0
 390 0244 8091 0000 		lds r24,blinkMode
 391 0248 8430      		cpi r24,lo8(4)
 392 024a 00F0      		brlo .L18
 393               		.loc 1 166 0 is_stmt 0 discriminator 1
 394 024c 1092 0000 		sts blinkMode,__zero_reg__
 395               	.L18:
 167:main.c        ****         brightness=0;
 396               		.loc 1 167 0 is_stmt 1
 397 0250 1092 0000 		sts brightness,__zero_reg__
 168:main.c        ****         pstate|=(1<<DIR_FLAG);
 398               		.loc 1 168 0
 399 0254 8091 0000 		lds r24,pstate
 400 0258 8460      		ori r24,lo8(4)
 401 025a 8093 0000 		sts pstate,r24
 169:main.c        ****         index=0;
 402               		.loc 1 169 0
 403 025e 1092 0000 		sts index,__zero_reg__
 404               	.LVL3:
 405 0262 80E0      		ldi r24,0
 406 0264 90E0      		ldi r25,0
 407               	.LVL4:
 408               	.L19:
 409               	.LBB2:
 170:main.c        ****         for(uint8_t i=0;i<12;i++){
 171:main.c        ****             level[i]=0;
 410               		.loc 1 171 0 discriminator 3
 411 0266 FC01      		movw r30,r24
 412 0268 E050      		subi r30,lo8(-(level))
 413 026a F040      		sbci r31,hi8(-(level))
 414 026c 1082      		st Z,__zero_reg__
 415               	.LVL5:
 416 026e 0196      		adiw r24,1
 417               	.LVL6:
 170:main.c        ****         for(uint8_t i=0;i<12;i++){
 418               		.loc 1 170 0 discriminator 3
 419 0270 8C30      		cpi r24,12
 420 0272 9105      		cpc r25,__zero_reg__
 421 0274 01F4      		brne .L19
 422 0276 00C0      		rjmp .L4
 423               	.LVL7:
 424               	.L17:
 425               	.LBE2:
 172:main.c        ****         }
 173:main.c        ****     }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 426               		.loc 1 173 0
 427 0278 B499      		sbic 0x16,4
 428 027a 00C0      		rjmp .L4
 429               		.loc 1 173 0 is_stmt 0 discriminator 1
 430 027c 8091 0000 		lds r24,pstate
 431 0280 80FD      		sbrc r24,0
 432 0282 00C0      		rjmp .L4
 174:main.c        ****         pstate|=(1<<TOUCH_FLAG);            
 433               		.loc 1 174 0 is_stmt 1
 434 0284 8091 0000 		lds r24,pstate
 435 0288 8160      		ori r24,lo8(1)
 436 028a 8093 0000 		sts pstate,r24
 437               	.L4:
 438               	/* epilogue start */
 175:main.c        ****     }
 176:main.c        **** }
 439               		.loc 1 176 0
 440 028e FF91      		pop r31
 441 0290 EF91      		pop r30
 442 0292 9F91      		pop r25
 443 0294 8F91      		pop r24
 444 0296 7F91      		pop r23
 445 0298 6F91      		pop r22
 446               	.LVL8:
 447 029a 5F91      		pop r21
 448 029c 4F91      		pop r20
 449 029e 3F91      		pop r19
 450 02a0 2F91      		pop r18
 451 02a2 0F90      		pop r0
 452 02a4 0FBE      		out __SREG__,r0
 453 02a6 0F90      		pop r0
 454 02a8 1F90      		pop r1
 455 02aa 1895      		reti
 456               		.cfi_endproc
 457               	.LFE10:
 459               		.local	colbit.1638
 460               		.comm	colbit.1638,1,1
 461               		.local	first.1634
 462               		.comm	first.1634,1,1
 463               		.local	column.1636
 464               		.comm	column.1636,1,1
 465               		.local	bits.1637
 466               		.comm	bits.1637,1,1
 467               		.local	ramp.1635
 468               		.comm	ramp.1635,1,1
 469               	.global	index
 470               		.data
 473               	index:
 474 0000 01        		.byte	1
 475               	.global	speed
 478               	speed:
 479 0001 3F        		.byte	63
 480               	.global	brightness
 483               	brightness:
 484 0002 05        		.byte	5
 485               	.global	pstate
 486               		.section .bss
 489               	pstate:
 490 0000 00        		.zero	1
 491               	.global	blinkMode
 494               	blinkMode:
 495 0001 00        		.zero	1
 496               	.global	order
 497               		.section	.rodata
 500               	order:
 501 0000 03        		.byte	3
 502 0001 08        		.byte	8
 503 0002 02        		.byte	2
 504 0003 07        		.byte	7
 505 0004 09        		.byte	9
 506 0005 04        		.byte	4
 507 0006 05        		.byte	5
 508 0007 01        		.byte	1
 509 0008 00        		.byte	0
 510 0009 06        		.byte	6
 511 000a 0B        		.byte	11
 512 000b 0A        		.byte	10
 513               		.comm	level,12,1
 514               	.global	cnt
 515               		.data
 518               	cnt:
 519 0003 01        		.byte	1
 520               		.text
 521               	.Letext0:
 522               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cceWjU78.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cceWjU78.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cceWjU78.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cceWjU78.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cceWjU78.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cceWjU78.s:13     .text.startup:0000000000000000 main
     /tmp/cceWjU78.s:50     .text:0000000000000000 __vector_3
     /tmp/cceWjU78.s:466    .bss:0000000000000006 ramp.1635
     /tmp/cceWjU78.s:464    .bss:0000000000000005 bits.1637
     /tmp/cceWjU78.s:462    .bss:0000000000000004 column.1636
     /tmp/cceWjU78.s:460    .bss:0000000000000003 first.1634
                             .bss:0000000000000002 colbit.1638
                            *COM*:000000000000000c level
     /tmp/cceWjU78.s:518    .data:0000000000000003 cnt
     /tmp/cceWjU78.s:478    .data:0000000000000001 speed
     /tmp/cceWjU78.s:494    .bss:0000000000000001 blinkMode
     /tmp/cceWjU78.s:489    .bss:0000000000000000 pstate
     /tmp/cceWjU78.s:473    .data:0000000000000000 index
     /tmp/cceWjU78.s:500    .rodata:0000000000000000 order
     /tmp/cceWjU78.s:483    .data:0000000000000002 brightness

UNDEFINED SYMBOLS
__mulqi3
__do_copy_data
__do_clear_bss
