   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB9:
  15               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/sleep.h>
   5:main.c        **** #include <avr/power.h>
   6:main.c        **** 
   7:main.c        **** #define ALL 0
   8:main.c        **** #define PIXIE 1
   9:main.c        **** #define SCROLL 2
  10:main.c        **** #define DEBUG 3
  11:main.c        **** #define NB_MODES 4
  12:main.c        **** 
  13:main.c        **** #define TOUCH_FLAG 0
  14:main.c        **** //#define ADC_FLAG 1
  15:main.c        **** #define DEBUG_FLAG 2
  16:main.c        **** #define DIR_FLAG 2
  17:main.c        **** 
  18:main.c        **** volatile uint8_t cnt=1;
  19:main.c        **** volatile uint8_t level[12];
  20:main.c        **** //uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 }; //Brightness levels of each led.
  21:main.c        **** //uint8_t order[12] = {0,11,9,4,2,10,7,6,3,1,8,5};//Reverse
  22:main.c        **** const uint8_t order[12] = {3,8,2,7,9,4,5,1,0,6,11,10};//Right
  23:main.c        **** volatile uint8_t blinkMode = ALL;
  24:main.c        **** volatile uint8_t pstate=0;
  25:main.c        **** /*
  26:main.c        **** static	long	randx;
  27:main.c        **** static	char	randf;
  28:main.c        **** 
  29:main.c        **** void srand(unsigned x){
  30:main.c        **** 	randx = x;
  31:main.c        **** 	randf = 1;
  32:main.c        **** }
  33:main.c        **** 
  34:main.c        **** int rand(void){
  35:main.c        **** 	if(!randf)srand(1);
  36:main.c        **** 	return((int)((randx = randx*1103515245L + 12345)>>16) & 077777);
  37:main.c        **** }
  38:main.c        **** */
  39:main.c        **** volatile uint8_t brightness=5;
  40:main.c        **** volatile uint8_t speed=63;
  41:main.c        **** volatile uint8_t index=1;
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** int main(void){
  16               		.loc 1 44 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  45:main.c        ****       
  46:main.c        ****     //Timer1 for LED charlieplexing
  47:main.c        ****     TCCR1=(1<<CTC1)|(1<<CS12);//|(1<<CS10)|(1<<CS11);        //Divide clock by 1, was 2<<CS10
  22               		.loc 1 47 0
  23 0000 84E8      		ldi r24,lo8(-124)
  24 0002 80BF      		out 0x30,r24
  48:main.c        ****     GTCCR=0;                          //No PWM
  25               		.loc 1 48 0
  26 0004 1CBC      		out 0x2c,__zero_reg__
  49:main.c        ****     OCR1A=0;                          //No PWM
  27               		.loc 1 49 0
  28 0006 1EBC      		out 0x2e,__zero_reg__
  50:main.c        ****     OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
  29               		.loc 1 50 0
  30 0008 89EF      		ldi r24,lo8(-7)
  31 000a 8DBD      		out 0x2d,r24
  51:main.c        ****     TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
  32               		.loc 1 51 0
  33 000c 89B7      		in r24,0x39
  34 000e 8064      		ori r24,lo8(64)
  35 0010 89BF      		out 0x39,r24
  52:main.c        ****     /*
  53:main.c        ****     TCCR0A=(1<<WGM01);
  54:main.c        ****     OCR0A=255;
  55:main.c        ****     TCCR0B=(1<<CS02)|(1<<CS00);
  56:main.c        ****     TIMSK|=(1<<OCIE0A);
  57:main.c        ****     */
  58:main.c        ****     /*
  59:main.c        ****     ADMUX=(1<<MUX3)|(1<<MUX2);
  60:main.c        ****     ADCSRA |= (1<<ADEN) | (1<<ADIE);
  61:main.c        ****     */
  62:main.c        ****     PCMSK|=(1<<PCINT4);
  36               		.loc 1 62 0
  37 0012 AC9A      		sbi 0x15,4
  63:main.c        ****     GIMSK|=(1<<PCIE);
  38               		.loc 1 63 0
  39 0014 8BB7      		in r24,0x3b
  40 0016 8062      		ori r24,lo8(32)
  41 0018 8BBF      		out 0x3b,r24
  64:main.c        ****     power_adc_disable();
  42               		.loc 1 64 0
  43 001a 80B5      		in r24,0x20
  44 001c 8160      		ori r24,lo8(1)
  45 001e 80BD      		out 0x20,r24
  65:main.c        ****     power_timer0_disable();
  46               		.loc 1 65 0
  47 0020 80B5      		in r24,0x20
  48 0022 8460      		ori r24,lo8(4)
  49 0024 80BD      		out 0x20,r24
  66:main.c        ****     power_usi_disable();
  50               		.loc 1 66 0
  51 0026 80B5      		in r24,0x20
  52 0028 8260      		ori r24,lo8(2)
  53 002a 80BD      		out 0x20,r24
  67:main.c        ****     
  68:main.c        ****     sei();                              //Enable interrupts
  54               		.loc 1 68 0
  55               	/* #APP */
  56               	 ;  68 "main.c" 1
  57 002c 7894      		sei
  58               	 ;  0 "" 2
  59               	/* #NOAPP */
  60               	.L2:
  69:main.c        ****     while(1){
  70:main.c        ****         set_sleep_mode(SLEEP_MODE_IDLE);
  61               		.loc 1 70 0 discriminator 1
  62 002e 85B7      		in r24,0x35
  63 0030 877E      		andi r24,lo8(-25)
  64 0032 85BF      		out 0x35,r24
  71:main.c        ****         sleep_mode();
  65               		.loc 1 71 0 discriminator 1
  66 0034 85B7      		in r24,0x35
  67 0036 8062      		ori r24,lo8(32)
  68 0038 85BF      		out 0x35,r24
  69               	/* #APP */
  70               	 ;  71 "main.c" 1
  71 003a 8895      		sleep
  72               		
  73               	 ;  0 "" 2
  74               	/* #NOAPP */
  75 003c 85B7      		in r24,0x35
  76 003e 8F7D      		andi r24,lo8(-33)
  77 0040 85BF      		out 0x35,r24
  78 0042 00C0      		rjmp .L2
  79               		.cfi_endproc
  80               	.LFE9:
  82               		.text
  83               	.global	__vector_2
  85               	__vector_2:
  86               	.LFB10:
  72:main.c        **** 
  73:main.c        **** /*
  74:main.c        ****         if(pstate&(1<<ADC_FLAG)){
  75:main.c        ****             pstate&=~(1<<ADC_FLAG);   
  76:main.c        ****             ADCSRA |= (1<<ADSC);
  77:main.c        ****         }*/
  78:main.c        **** 
  79:main.c        ****     }
  80:main.c        ****     return 0;
  81:main.c        **** }     
  82:main.c        **** /*
  83:main.c        **** ISR(ADC_vect){
  84:main.c        ****     uint16_t res=ADCL;
  85:main.c        ****     res|=(ADCH<<8);
  86:main.c        ****     blinkMode=2753/res-3;   //Vcc=1024*1.1/ADC
  87:main.c        **** }*/
  88:main.c        **** /*
  89:main.c        **** ISR(TIM0_COMPA_vect) {
  90:main.c        ****     
  91:main.c        **** }*/
  92:main.c        **** 
  93:main.c        **** ISR(PCINT0_vect){
  87               		.loc 1 93 0
  88               		.cfi_startproc
  89 0000 1F92      		push r1
  90               	.LCFI0:
  91               		.cfi_def_cfa_offset 3
  92               		.cfi_offset 1, -2
  93 0002 0F92      		push r0
  94               	.LCFI1:
  95               		.cfi_def_cfa_offset 4
  96               		.cfi_offset 0, -3
  97 0004 0FB6      		in r0,__SREG__
  98 0006 0F92      		push r0
  99 0008 1124      		clr __zero_reg__
 100 000a 8F93      		push r24
 101               	.LCFI2:
 102               		.cfi_def_cfa_offset 5
 103               		.cfi_offset 24, -4
 104 000c 9F93      		push r25
 105               	.LCFI3:
 106               		.cfi_def_cfa_offset 6
 107               		.cfi_offset 25, -5
 108 000e EF93      		push r30
 109               	.LCFI4:
 110               		.cfi_def_cfa_offset 7
 111               		.cfi_offset 30, -6
 112 0010 FF93      		push r31
 113               	.LCFI5:
 114               		.cfi_def_cfa_offset 8
 115               		.cfi_offset 31, -7
 116               	/* prologue: Signal */
 117               	/* frame size = 0 */
 118               	/* stack size = 7 */
 119               	.L__stack_usage = 7
  94:main.c        ****     if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
 120               		.loc 1 94 0
 121 0012 B49B      		sbis 0x16,4
 122 0014 00C0      		rjmp .L5
 123               		.loc 1 94 0 is_stmt 0 discriminator 1
 124 0016 8091 0000 		lds r24,pstate
 125 001a 80FF      		sbrs r24,0
 126 001c 00C0      		rjmp .L5
  95:main.c        ****     pstate&=~(1<<TOUCH_FLAG);   
 127               		.loc 1 95 0 is_stmt 1
 128 001e 8091 0000 		lds r24,pstate
 129 0022 8E7F      		andi r24,lo8(-2)
 130 0024 8093 0000 		sts pstate,r24
  96:main.c        ****     blinkMode++;
 131               		.loc 1 96 0
 132 0028 8091 0000 		lds r24,blinkMode
 133 002c 8F5F      		subi r24,lo8(-(1))
 134 002e 8093 0000 		sts blinkMode,r24
  97:main.c        ****     if(blinkMode>=NB_MODES)blinkMode=0;
 135               		.loc 1 97 0
 136 0032 8091 0000 		lds r24,blinkMode
 137 0036 8430      		cpi r24,lo8(4)
 138 0038 00F0      		brlo .L6
 139               		.loc 1 97 0 is_stmt 0 discriminator 1
 140 003a 1092 0000 		sts blinkMode,__zero_reg__
 141               	.L6:
  98:main.c        ****     brightness=0;
 142               		.loc 1 98 0 is_stmt 1
 143 003e 1092 0000 		sts brightness,__zero_reg__
  99:main.c        ****     pstate|=(1<<DIR_FLAG);
 144               		.loc 1 99 0
 145 0042 8091 0000 		lds r24,pstate
 146 0046 8460      		ori r24,lo8(4)
 147 0048 8093 0000 		sts pstate,r24
 100:main.c        ****     index=0;
 148               		.loc 1 100 0
 149 004c 1092 0000 		sts index,__zero_reg__
 150               	.LVL0:
 151 0050 80E0      		ldi r24,0
 152 0052 90E0      		ldi r25,0
 153               	.LVL1:
 154               	.L7:
 155               	.LBB2:
 101:main.c        ****     for(uint8_t i=0;i<12;i++){
 102:main.c        ****         level[i]=0;
 156               		.loc 1 102 0 discriminator 3
 157 0054 FC01      		movw r30,r24
 158 0056 E050      		subi r30,lo8(-(level))
 159 0058 F040      		sbci r31,hi8(-(level))
 160 005a 1082      		st Z,__zero_reg__
 161               	.LVL2:
 162 005c 0196      		adiw r24,1
 163               	.LVL3:
 101:main.c        ****     for(uint8_t i=0;i<12;i++){
 164               		.loc 1 101 0 discriminator 3
 165 005e 8C30      		cpi r24,12
 166 0060 9105      		cpc r25,__zero_reg__
 167 0062 01F4      		brne .L7
 168 0064 00C0      		rjmp .L4
 169               	.LVL4:
 170               	.L5:
 171               	.LBE2:
 103:main.c        ****     }
 104:main.c        **** }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 172               		.loc 1 104 0
 173 0066 B499      		sbic 0x16,4
 174 0068 00C0      		rjmp .L4
 175               		.loc 1 104 0 is_stmt 0 discriminator 1
 176 006a 8091 0000 		lds r24,pstate
 177 006e 80FD      		sbrc r24,0
 178 0070 00C0      		rjmp .L4
 105:main.c        ****     pstate|=(1<<TOUCH_FLAG);            
 179               		.loc 1 105 0 is_stmt 1
 180 0072 8091 0000 		lds r24,pstate
 181 0076 8160      		ori r24,lo8(1)
 182 0078 8093 0000 		sts pstate,r24
 183               	.L4:
 184               	/* epilogue start */
 106:main.c        **** }
 107:main.c        **** }
 185               		.loc 1 107 0
 186 007c FF91      		pop r31
 187 007e EF91      		pop r30
 188 0080 9F91      		pop r25
 189 0082 8F91      		pop r24
 190 0084 0F90      		pop r0
 191 0086 0FBE      		out __SREG__,r0
 192 0088 0F90      		pop r0
 193 008a 1F90      		pop r1
 194 008c 1895      		reti
 195               		.cfi_endproc
 196               	.LFE10:
 198               	.global	__vector_3
 200               	__vector_3:
 201               	.LFB11:
 108:main.c        **** 
 109:main.c        **** 
 110:main.c        **** ISR(TIM1_COMPA_vect) {
 202               		.loc 1 110 0
 203               		.cfi_startproc
 204 008e 1F92      		push r1
 205               	.LCFI6:
 206               		.cfi_def_cfa_offset 3
 207               		.cfi_offset 1, -2
 208 0090 0F92      		push r0
 209               	.LCFI7:
 210               		.cfi_def_cfa_offset 4
 211               		.cfi_offset 0, -3
 212 0092 0FB6      		in r0,__SREG__
 213 0094 0F92      		push r0
 214 0096 1124      		clr __zero_reg__
 215 0098 2F93      		push r18
 216               	.LCFI8:
 217               		.cfi_def_cfa_offset 5
 218               		.cfi_offset 18, -4
 219 009a 3F93      		push r19
 220               	.LCFI9:
 221               		.cfi_def_cfa_offset 6
 222               		.cfi_offset 19, -5
 223 009c 4F93      		push r20
 224               	.LCFI10:
 225               		.cfi_def_cfa_offset 7
 226               		.cfi_offset 20, -6
 227 009e 5F93      		push r21
 228               	.LCFI11:
 229               		.cfi_def_cfa_offset 8
 230               		.cfi_offset 21, -7
 231 00a0 6F93      		push r22
 232               	.LCFI12:
 233               		.cfi_def_cfa_offset 9
 234               		.cfi_offset 22, -8
 235 00a2 7F93      		push r23
 236               	.LCFI13:
 237               		.cfi_def_cfa_offset 10
 238               		.cfi_offset 23, -9
 239 00a4 8F93      		push r24
 240               	.LCFI14:
 241               		.cfi_def_cfa_offset 11
 242               		.cfi_offset 24, -10
 243 00a6 9F93      		push r25
 244               	.LCFI15:
 245               		.cfi_def_cfa_offset 12
 246               		.cfi_offset 25, -11
 247 00a8 EF93      		push r30
 248               	.LCFI16:
 249               		.cfi_def_cfa_offset 13
 250               		.cfi_offset 30, -12
 251 00aa FF93      		push r31
 252               	.LCFI17:
 253               		.cfi_def_cfa_offset 14
 254               		.cfi_offset 31, -13
 255               	/* prologue: Signal */
 256               	/* frame size = 0 */
 257               	/* stack size = 13 */
 258               	.L__stack_usage = 13
 111:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
 112:main.c        ****   ramp = (ramp+1) & 0x07;
 259               		.loc 1 112 0
 260 00ac 9091 0000 		lds r25,ramp.1644
 261 00b0 9F5F      		subi r25,lo8(-(1))
 262 00b2 9770      		andi r25,lo8(7)
 263 00b4 9093 0000 		sts ramp.1644,r25
 113:main.c        ****   if (ramp == 0) {
 264               		.loc 1 113 0
 265 00b8 9111      		cpse r25,__zero_reg__
 266 00ba 00C0      		rjmp .L18
 114:main.c        ****     bits = 0x07;
 267               		.loc 1 114 0
 268 00bc 87E0      		ldi r24,lo8(7)
 269 00be 8093 0000 		sts bits.1646,r24
 115:main.c        ****     column = (column + 1) & 0x03;
 270               		.loc 1 115 0
 271 00c2 2091 0000 		lds r18,column.1645
 272 00c6 2F5F      		subi r18,lo8(-(1))
 273 00c8 2370      		andi r18,lo8(3)
 274 00ca 2093 0000 		sts column.1645,r18
 116:main.c        ****     first = column * 3;
 275               		.loc 1 116 0
 276 00ce 822F      		mov r24,r18
 277 00d0 63E0      		ldi r22,lo8(3)
 278 00d2 00D0      		rcall __mulqi3
 279 00d4 8093 0000 		sts first.1643,r24
 117:main.c        ****     colbit = 1<<column;
 280               		.loc 1 117 0
 281 00d8 41E0      		ldi r20,lo8(1)
 282 00da 50E0      		ldi r21,0
 283 00dc BA01      		movw r22,r20
 284 00de 00C0      		rjmp 2f
 285               		1:
 286 00e0 660F      		lsl r22
 287 00e2 771F      		rol r23
 288               		2:
 289 00e4 2A95      		dec r18
 290 00e6 02F4      		brpl 1b
 291 00e8 6093 0000 		sts colbit.1647,r22
 292               	.L18:
 118:main.c        ****   }
 119:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 293               		.loc 1 119 0
 294 00ec 2091 0000 		lds r18,first.1643
 295 00f0 30E0      		ldi r19,0
 296 00f2 F901      		movw r30,r18
 297 00f4 E050      		subi r30,lo8(-(level))
 298 00f6 F040      		sbci r31,hi8(-(level))
 299 00f8 8081      		ld r24,Z
 300 00fa 9813      		cpse r25,r24
 301 00fc 00C0      		rjmp .L19
 302               		.loc 1 119 0 is_stmt 0 discriminator 1
 303 00fe 8091 0000 		lds r24,bits.1646
 304 0102 8670      		andi r24,lo8(6)
 305 0104 8093 0000 		sts bits.1646,r24
 306               	.L19:
 120:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 307               		.loc 1 120 0 is_stmt 1
 308 0108 F901      		movw r30,r18
 309 010a E050      		subi r30,lo8(-(level+1))
 310 010c F040      		sbci r31,hi8(-(level+1))
 311 010e 8081      		ld r24,Z
 312 0110 9813      		cpse r25,r24
 313 0112 00C0      		rjmp .L20
 314               		.loc 1 120 0 is_stmt 0 discriminator 1
 315 0114 8091 0000 		lds r24,bits.1646
 316 0118 8570      		andi r24,lo8(5)
 317 011a 8093 0000 		sts bits.1646,r24
 318               	.L20:
 121:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 319               		.loc 1 121 0 is_stmt 1
 320 011e F901      		movw r30,r18
 321 0120 E050      		subi r30,lo8(-(level+2))
 322 0122 F040      		sbci r31,hi8(-(level+2))
 323 0124 8081      		ld r24,Z
 324 0126 9813      		cpse r25,r24
 325 0128 00C0      		rjmp .L21
 326               		.loc 1 121 0 is_stmt 0 discriminator 1
 327 012a 8091 0000 		lds r24,bits.1646
 328 012e 8370      		andi r24,lo8(3)
 329 0130 8093 0000 		sts bits.1646,r24
 330               	.L21:
 122:main.c        ****   uint8_t mask = colbit - 1;
 331               		.loc 1 122 0 is_stmt 1
 332 0134 4091 0000 		lds r20,colbit.1647
 333 0138 6FEF      		ldi r22,lo8(-1)
 334 013a 640F      		add r22,r20
 335               	.LVL5:
 123:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 336               		.loc 1 123 0
 337 013c 5091 0000 		lds r21,bits.1646
 338 0140 862F      		mov r24,r22
 339 0142 90E0      		ldi r25,0
 340 0144 8095      		com r24
 341 0146 9095      		com r25
 342 0148 252F      		mov r18,r21
 343 014a 30E0      		ldi r19,0
 344 014c 8223      		and r24,r18
 345 014e 9323      		and r25,r19
 346 0150 880F      		lsl r24
 347 0152 991F      		rol r25
 348 0154 5623      		and r21,r22
 349 0156 852B      		or r24,r21
 350               	.LVL6:
 124:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 351               		.loc 1 124 0
 352 0158 97B3      		in r25,0x17
 353 015a 907F      		andi r25,lo8(-16)
 354 015c 492B      		or r20,r25
 355 015e 482B      		or r20,r24
 356 0160 47BB      		out 0x17,r20
 125:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 357               		.loc 1 125 0
 358 0162 98B3      		in r25,0x18
 359 0164 907F      		andi r25,lo8(-16)
 360 0166 892B      		or r24,r25
 361               	.LVL7:
 362 0168 88BB      		out 0x18,r24
 126:main.c        ****     
 127:main.c        ****     cnt++;
 363               		.loc 1 127 0
 364 016a 8091 0000 		lds r24,cnt
 365 016e 8F5F      		subi r24,lo8(-(1))
 366 0170 8093 0000 		sts cnt,r24
 128:main.c        ****     if(cnt==speed){
 367               		.loc 1 128 0
 368 0174 9091 0000 		lds r25,cnt
 369 0178 8091 0000 		lds r24,speed
 370 017c 9813      		cpse r25,r24
 371 017e 00C0      		rjmp .L17
 129:main.c        ****         cnt=0;
 372               		.loc 1 129 0
 373 0180 1092 0000 		sts cnt,__zero_reg__
 130:main.c        ****     switch(blinkMode){
 374               		.loc 1 130 0
 375 0184 8091 0000 		lds r24,blinkMode
 376 0188 8130      		cpi r24,lo8(1)
 377 018a 01F4      		brne .+2
 378 018c 00C0      		rjmp .L24
 379 018e 00F4      		brsh .+2
 380 0190 00C0      		rjmp .L25
 381 0192 8230      		cpi r24,lo8(2)
 382 0194 01F0      		breq .+2
 383 0196 00C0      		rjmp .L17
 131:main.c        ****         case SCROLL:
 132:main.c        ****             if(pstate&(1<<DIR_FLAG)){
 384               		.loc 1 132 0
 385 0198 8091 0000 		lds r24,pstate
 133:main.c        ****                 level[order[index]]=brightness++;
 386               		.loc 1 133 0
 387 019c E091 0000 		lds r30,index
 388 01a0 F0E0      		ldi r31,0
 389 01a2 E050      		subi r30,lo8(-(order))
 390 01a4 F040      		sbci r31,hi8(-(order))
 391 01a6 E081      		ld r30,Z
 392 01a8 F0E0      		ldi r31,0
 132:main.c        ****                 level[order[index]]=brightness++;
 393               		.loc 1 132 0
 394 01aa 82FF      		sbrs r24,2
 395 01ac 00C0      		rjmp .L27
 396               		.loc 1 133 0
 397 01ae 8091 0000 		lds r24,brightness
 398 01b2 91E0      		ldi r25,lo8(1)
 399 01b4 980F      		add r25,r24
 400 01b6 9093 0000 		sts brightness,r25
 401 01ba E050      		subi r30,lo8(-(level))
 402 01bc F040      		sbci r31,hi8(-(level))
 403 01be 8083      		st Z,r24
 134:main.c        ****                 if(brightness>7){
 404               		.loc 1 134 0
 405 01c0 8091 0000 		lds r24,brightness
 406 01c4 8830      		cpi r24,lo8(8)
 407 01c6 00F4      		brsh .+2
 408 01c8 00C0      		rjmp .L17
 135:main.c        ****                     brightness=0;
 409               		.loc 1 135 0
 410 01ca 1092 0000 		sts brightness,__zero_reg__
 136:main.c        ****                     index++;
 411               		.loc 1 136 0
 412 01ce 8091 0000 		lds r24,index
 413 01d2 8F5F      		subi r24,lo8(-(1))
 414 01d4 8093 0000 		sts index,r24
 137:main.c        ****                     if(index>11){
 415               		.loc 1 137 0
 416 01d8 8091 0000 		lds r24,index
 417 01dc 8C30      		cpi r24,lo8(12)
 418 01de 00F4      		brsh .+2
 419 01e0 00C0      		rjmp .L17
 138:main.c        ****                         index=11;
 420               		.loc 1 138 0
 421 01e2 8BE0      		ldi r24,lo8(11)
 422 01e4 8093 0000 		sts index,r24
 139:main.c        ****                         brightness=7;
 423               		.loc 1 139 0
 424 01e8 87E0      		ldi r24,lo8(7)
 425 01ea 8093 0000 		sts brightness,r24
 140:main.c        ****                         pstate&=~(1<<DIR_FLAG);
 426               		.loc 1 140 0
 427 01ee 8091 0000 		lds r24,pstate
 428 01f2 8B7F      		andi r24,lo8(-5)
 429 01f4 00C0      		rjmp .L32
 430               	.L27:
 141:main.c        ****                     }
 142:main.c        ****                 }
 143:main.c        ****             }else{
 144:main.c        ****                 level[order[index]]=brightness--;
 431               		.loc 1 144 0
 432 01f6 8091 0000 		lds r24,brightness
 433 01fa 9FEF      		ldi r25,lo8(-1)
 434 01fc 980F      		add r25,r24
 435 01fe 9093 0000 		sts brightness,r25
 436 0202 E050      		subi r30,lo8(-(level))
 437 0204 F040      		sbci r31,hi8(-(level))
 438 0206 8083      		st Z,r24
 145:main.c        ****                 if(brightness==0){
 439               		.loc 1 145 0
 440 0208 8091 0000 		lds r24,brightness
 441 020c 8111      		cpse r24,__zero_reg__
 442 020e 00C0      		rjmp .L17
 146:main.c        ****                     brightness=7;
 443               		.loc 1 146 0
 444 0210 87E0      		ldi r24,lo8(7)
 445 0212 8093 0000 		sts brightness,r24
 147:main.c        ****                     index--;
 446               		.loc 1 147 0
 447 0216 8091 0000 		lds r24,index
 448 021a 8150      		subi r24,lo8(-(-1))
 449 021c 8093 0000 		sts index,r24
 148:main.c        ****                     if(index==0){
 450               		.loc 1 148 0
 451 0220 8091 0000 		lds r24,index
 452 0224 8111      		cpse r24,__zero_reg__
 453 0226 00C0      		rjmp .L17
 149:main.c        ****                         index=0;
 454               		.loc 1 149 0
 455 0228 1092 0000 		sts index,__zero_reg__
 150:main.c        ****                         brightness=0;
 456               		.loc 1 150 0
 457 022c 1092 0000 		sts brightness,__zero_reg__
 151:main.c        ****                         pstate|=(1<<DIR_FLAG);
 458               		.loc 1 151 0
 459 0230 8091 0000 		lds r24,pstate
 460 0234 8460      		ori r24,lo8(4)
 461               	.L32:
 462 0236 8093 0000 		sts pstate,r24
 463 023a 00C0      		rjmp .L17
 464               	.L25:
 152:main.c        ****                     }
 153:main.c        ****                 }
 154:main.c        ****             }
 155:main.c        ****             
 156:main.c        ****             break;
 157:main.c        ****         case ALL:
 158:main.c        ****             level[order[index]]=brightness;
 465               		.loc 1 158 0
 466 023c E091 0000 		lds r30,index
 467 0240 F0E0      		ldi r31,0
 468 0242 E050      		subi r30,lo8(-(order))
 469 0244 F040      		sbci r31,hi8(-(order))
 470 0246 E081      		ld r30,Z
 471 0248 F0E0      		ldi r31,0
 472 024a 8091 0000 		lds r24,brightness
 473 024e E050      		subi r30,lo8(-(level))
 474 0250 F040      		sbci r31,hi8(-(level))
 475 0252 8083      		st Z,r24
 159:main.c        ****             brightness=(brightness+1)&0x07;
 476               		.loc 1 159 0
 477 0254 8091 0000 		lds r24,brightness
 478 0258 8F5F      		subi r24,lo8(-(1))
 479 025a 8770      		andi r24,lo8(7)
 480 025c 8093 0000 		sts brightness,r24
 160:main.c        ****             if(brightness==0){
 481               		.loc 1 160 0
 482 0260 8091 0000 		lds r24,brightness
 483 0264 8823      		tst r24
 484 0266 01F0      		breq .L35
 485 0268 00C0      		rjmp .L17
 486               	.L24:
 161:main.c        ****                 //level[order[index]]=0;
 162:main.c        ****                 index++;
 163:main.c        ****                 if(index>11)index=0;
 164:main.c        ****             }
 165:main.c        ****             break;
 166:main.c        ****         case PIXIE:
 167:main.c        ****             switch(++brightness){
 487               		.loc 1 167 0
 488 026a 8091 0000 		lds r24,brightness
 489 026e 8F5F      		subi r24,lo8(-(1))
 490 0270 8093 0000 		sts brightness,r24
 491 0274 8230      		cpi r24,lo8(2)
 492 0276 01F0      		breq .L29
 493 0278 8A30      		cpi r24,lo8(10)
 494 027a 01F0      		breq .L30
 495 027c 8130      		cpi r24,lo8(1)
 496 027e 01F4      		brne .L17
 168:main.c        ****                 case 1:
 169:main.c        ****                     level[index]=7;
 497               		.loc 1 169 0
 498 0280 E091 0000 		lds r30,index
 499 0284 F0E0      		ldi r31,0
 500 0286 E050      		subi r30,lo8(-(level))
 501 0288 F040      		sbci r31,hi8(-(level))
 502 028a 87E0      		ldi r24,lo8(7)
 503 028c 8083      		st Z,r24
 170:main.c        ****                 break;
 504               		.loc 1 170 0
 505 028e 00C0      		rjmp .L17
 506               	.L29:
 171:main.c        ****                 case 2:
 172:main.c        ****                     level[index]=0;
 507               		.loc 1 172 0
 508 0290 E091 0000 		lds r30,index
 509 0294 F0E0      		ldi r31,0
 510 0296 E050      		subi r30,lo8(-(level))
 511 0298 F040      		sbci r31,hi8(-(level))
 512 029a 1082      		st Z,__zero_reg__
 173:main.c        ****                 break;
 513               		.loc 1 173 0
 514 029c 00C0      		rjmp .L17
 515               	.L30:
 174:main.c        ****                 case 10:
 175:main.c        ****                     brightness=0;
 516               		.loc 1 175 0
 517 029e 1092 0000 		sts brightness,__zero_reg__
 518               	.L35:
 176:main.c        ****                     index++;
 519               		.loc 1 176 0
 520 02a2 8091 0000 		lds r24,index
 521 02a6 8F5F      		subi r24,lo8(-(1))
 522 02a8 8093 0000 		sts index,r24
 177:main.c        ****                     if(index>11)index=0;
 523               		.loc 1 177 0
 524 02ac 8091 0000 		lds r24,index
 525 02b0 8C30      		cpi r24,lo8(12)
 526 02b2 00F0      		brlo .L17
 527               		.loc 1 177 0 is_stmt 0 discriminator 1
 528 02b4 1092 0000 		sts index,__zero_reg__
 529               	.L17:
 530               	/* epilogue start */
 178:main.c        ****             }
 179:main.c        **** 
 180:main.c        ****         case DEBUG:
 181:main.c        ****         default:
 182:main.c        ****             break;
 183:main.c        ****         }
 184:main.c        ****     }
 185:main.c        **** }
 531               		.loc 1 185 0 is_stmt 1
 532 02b8 FF91      		pop r31
 533 02ba EF91      		pop r30
 534 02bc 9F91      		pop r25
 535 02be 8F91      		pop r24
 536 02c0 7F91      		pop r23
 537 02c2 6F91      		pop r22
 538               	.LVL8:
 539 02c4 5F91      		pop r21
 540 02c6 4F91      		pop r20
 541 02c8 3F91      		pop r19
 542 02ca 2F91      		pop r18
 543 02cc 0F90      		pop r0
 544 02ce 0FBE      		out __SREG__,r0
 545 02d0 0F90      		pop r0
 546 02d2 1F90      		pop r1
 547 02d4 1895      		reti
 548               		.cfi_endproc
 549               	.LFE11:
 551               		.local	colbit.1647
 552               		.comm	colbit.1647,1,1
 553               		.local	first.1643
 554               		.comm	first.1643,1,1
 555               		.local	column.1645
 556               		.comm	column.1645,1,1
 557               		.local	bits.1646
 558               		.comm	bits.1646,1,1
 559               		.local	ramp.1644
 560               		.comm	ramp.1644,1,1
 561               	.global	index
 562               		.data
 565               	index:
 566 0000 01        		.byte	1
 567               	.global	speed
 570               	speed:
 571 0001 3F        		.byte	63
 572               	.global	brightness
 575               	brightness:
 576 0002 05        		.byte	5
 577               	.global	pstate
 578               		.section .bss
 581               	pstate:
 582 0000 00        		.zero	1
 583               	.global	blinkMode
 586               	blinkMode:
 587 0001 00        		.zero	1
 588               	.global	order
 589               		.section	.rodata
 592               	order:
 593 0000 03        		.byte	3
 594 0001 08        		.byte	8
 595 0002 02        		.byte	2
 596 0003 07        		.byte	7
 597 0004 09        		.byte	9
 598 0005 04        		.byte	4
 599 0006 05        		.byte	5
 600 0007 01        		.byte	1
 601 0008 00        		.byte	0
 602 0009 06        		.byte	6
 603 000a 0B        		.byte	11
 604 000b 0A        		.byte	10
 605               		.comm	level,12,1
 606               	.global	cnt
 607               		.data
 610               	cnt:
 611 0003 01        		.byte	1
 612               		.text
 613               	.Letext0:
 614               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cce1eelS.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cce1eelS.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cce1eelS.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cce1eelS.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cce1eelS.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cce1eelS.s:13     .text.startup:0000000000000000 main
     /tmp/cce1eelS.s:85     .text:0000000000000000 __vector_2
     /tmp/cce1eelS.s:581    .bss:0000000000000000 pstate
     /tmp/cce1eelS.s:586    .bss:0000000000000001 blinkMode
     /tmp/cce1eelS.s:575    .data:0000000000000002 brightness
     /tmp/cce1eelS.s:565    .data:0000000000000000 index
                            *COM*:000000000000000c level
     /tmp/cce1eelS.s:200    .text:000000000000008e __vector_3
     /tmp/cce1eelS.s:558    .bss:0000000000000006 ramp.1644
     /tmp/cce1eelS.s:556    .bss:0000000000000005 bits.1646
     /tmp/cce1eelS.s:554    .bss:0000000000000004 column.1645
     /tmp/cce1eelS.s:552    .bss:0000000000000003 first.1643
                             .bss:0000000000000002 colbit.1647
     /tmp/cce1eelS.s:610    .data:0000000000000003 cnt
     /tmp/cce1eelS.s:570    .data:0000000000000001 speed
     /tmp/cce1eelS.s:592    .rodata:0000000000000000 order

UNDEFINED SYMBOLS
__mulqi3
__do_copy_data
__do_clear_bss
