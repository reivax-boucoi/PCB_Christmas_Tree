   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	srand
  12               	srand:
  13               	.LFB9:
  14               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/power.h>
   5:main.c        **** 
   6:main.c        **** #define FADE 0
   7:main.c        **** #define PIXIE 1
   8:main.c        **** #define DEBUG 2
   9:main.c        **** 
  10:main.c        **** #define TOUCH_FLAG 0
  11:main.c        **** //#define ADC_FLAG 1
  12:main.c        **** #define DEBUG_FLAG 2
  13:main.c        **** #define DIR_FLAG 2
  14:main.c        **** 
  15:main.c        **** volatile unsigned int cnt=1;
  16:main.c        **** uint8_t level[12];
  17:main.c        **** //uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 }; //Brightness levels of each led.
  18:main.c        **** uint8_t order[12] = {0,11,9,4,2,10,7,6,3,1,8,5};
  19:main.c        **** uint8_t blinkMode = FADE;
  20:main.c        **** uint8_t pstate=0;
  21:main.c        **** 
  22:main.c        **** static	long	randx;
  23:main.c        **** static	char	randf;
  24:main.c        **** 
  25:main.c        **** void srand(unsigned x){
  15               		.loc 1 25 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  26:main.c        **** 	randx = x;
  22               		.loc 1 26 0
  23 0000 A0E0      		ldi r26,0
  24 0002 B0E0      		ldi r27,0
  25 0004 8093 0000 		sts randx,r24
  26 0008 9093 0000 		sts randx+1,r25
  27 000c A093 0000 		sts randx+2,r26
  28 0010 B093 0000 		sts randx+3,r27
  27:main.c        **** 	randf = 1;
  29               		.loc 1 27 0
  30 0014 81E0      		ldi r24,lo8(1)
  31               	.LVL1:
  32 0016 8093 0000 		sts randf,r24
  33 001a 0895      		ret
  34               		.cfi_endproc
  35               	.LFE9:
  37               	.global	__mulsi3
  38               	.global	rand
  40               	rand:
  41               	.LFB10:
  28:main.c        **** }
  29:main.c        **** 
  30:main.c        **** int rand(void){
  42               		.loc 1 30 0
  43               		.cfi_startproc
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  31:main.c        **** 	if(!randf)srand(1);
  48               		.loc 1 31 0
  49 001c 8091 0000 		lds r24,randf
  50 0020 8111      		cpse r24,__zero_reg__
  51 0022 00C0      		rjmp .L3
  52               		.loc 1 31 0 is_stmt 0 discriminator 1
  53 0024 81E0      		ldi r24,lo8(1)
  54 0026 90E0      		ldi r25,0
  55 0028 00D0      		rcall srand
  56               	.LVL2:
  57               	.L3:
  32:main.c        **** 	return((int)((randx = randx*1103515245L + 12345)>>16) & 077777);
  58               		.loc 1 32 0 is_stmt 1
  59 002a 2DE6      		ldi r18,lo8(109)
  60 002c 3EE4      		ldi r19,lo8(78)
  61 002e 46EC      		ldi r20,lo8(-58)
  62 0030 51E4      		ldi r21,lo8(65)
  63 0032 6091 0000 		lds r22,randx
  64 0036 7091 0000 		lds r23,randx+1
  65 003a 8091 0000 		lds r24,randx+2
  66 003e 9091 0000 		lds r25,randx+3
  67 0042 00D0      		rcall __mulsi3
  68               	.LVL3:
  69 0044 675C      		subi r22,-57
  70 0046 7F4C      		sbci r23,-49
  71 0048 8F4F      		sbci r24,-1
  72 004a 9F4F      		sbci r25,-1
  73 004c 6093 0000 		sts randx,r22
  74 0050 7093 0000 		sts randx+1,r23
  75 0054 8093 0000 		sts randx+2,r24
  76 0058 9093 0000 		sts randx+3,r25
  33:main.c        **** }
  77               		.loc 1 33 0
  78 005c 9F77      		andi r25,127
  79 005e 0895      		ret
  80               		.cfi_endproc
  81               	.LFE10:
  83               		.section	.text.startup,"ax",@progbits
  84               	.global	main
  86               	main:
  87               	.LFB11:
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** int main(void){
  88               		.loc 1 37 0
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  38:main.c        ****       
  39:main.c        ****     //Timer1 for LED charlieplexing
  40:main.c        ****     TCCR1=(1<<CTC1)|(1<<CS10);        //Divide clock by 1, was 2<<CS10
  94               		.loc 1 40 0
  95 0000 81E8      		ldi r24,lo8(-127)
  96 0002 80BF      		out 0x30,r24
  41:main.c        ****     GTCCR=0;                          //No PWM
  97               		.loc 1 41 0
  98 0004 1CBC      		out 0x2c,__zero_reg__
  42:main.c        ****     OCR1A=0;                          //No PWM
  99               		.loc 1 42 0
 100 0006 1EBC      		out 0x2e,__zero_reg__
  43:main.c        ****     OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
 101               		.loc 1 43 0
 102 0008 89EF      		ldi r24,lo8(-7)
 103 000a 8DBD      		out 0x2d,r24
  44:main.c        ****     TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
 104               		.loc 1 44 0
 105 000c 89B7      		in r24,0x39
 106 000e 8064      		ori r24,lo8(64)
 107 0010 89BF      		out 0x39,r24
  45:main.c        ****     
  46:main.c        ****     TCCR0A=(1<<WGM01);
 108               		.loc 1 46 0
 109 0012 82E0      		ldi r24,lo8(2)
 110 0014 8ABD      		out 0x2a,r24
  47:main.c        ****     OCR0A=255;
 111               		.loc 1 47 0
 112 0016 8FEF      		ldi r24,lo8(-1)
 113 0018 89BD      		out 0x29,r24
  48:main.c        ****     TCCR0B=(1<<CS02)|(1<<CS00);
 114               		.loc 1 48 0
 115 001a 85E0      		ldi r24,lo8(5)
 116 001c 83BF      		out 0x33,r24
  49:main.c        ****     TIMSK|=(1<<OCIE0A);
 117               		.loc 1 49 0
 118 001e 89B7      		in r24,0x39
 119 0020 8061      		ori r24,lo8(16)
 120 0022 89BF      		out 0x39,r24
  50:main.c        ****     
  51:main.c        ****     /*
  52:main.c        ****     ADMUX=(1<<MUX3)|(1<<MUX2);
  53:main.c        ****     ADCSRA |= (1<<ADEN) | (1<<ADIE);
  54:main.c        ****     */
  55:main.c        ****     
  56:main.c        ****     sei();                              //Enable interrupts
 121               		.loc 1 56 0
 122               	/* #APP */
 123               	 ;  56 "main.c" 1
 124 0024 7894      		sei
 125               	 ;  0 "" 2
 126               	/* #NOAPP */
 127               	.L6:
  57:main.c        ****     while(1){
  58:main.c        ****         
  59:main.c        ****         if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
 128               		.loc 1 59 0
 129 0026 B49B      		sbis 0x16,4
 130 0028 00C0      		rjmp .L7
 131               		.loc 1 59 0 is_stmt 0 discriminator 1
 132 002a 8091 0000 		lds r24,pstate
 133 002e 80FF      		sbrs r24,0
 134 0030 00C0      		rjmp .L7
  60:main.c        ****             pstate&=~(1<<TOUCH_FLAG);      
  61:main.c        ****             blinkMode++;
 135               		.loc 1 61 0 is_stmt 1
 136 0032 9091 0000 		lds r25,blinkMode
 137 0036 9F5F      		subi r25,lo8(-(1))
 138 0038 9093 0000 		sts blinkMode,r25
  62:main.c        ****             pstate|=(1<<DIR_FLAG);            
 139               		.loc 1 62 0
 140 003c 8E7F      		andi r24,lo8(-2)
 141 003e 8460      		ori r24,lo8(4)
 142 0040 8093 0000 		sts pstate,r24
  63:main.c        ****             if(blinkMode>2)blinkMode=0;
 143               		.loc 1 63 0
 144 0044 9330      		cpi r25,lo8(3)
 145 0046 00F0      		brlo .L6
 146               		.loc 1 63 0 is_stmt 0 discriminator 1
 147 0048 1092 0000 		sts blinkMode,__zero_reg__
 148 004c 00C0      		rjmp .L6
 149               	.L7:
  64:main.c        ****         }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 150               		.loc 1 64 0 is_stmt 1
 151 004e B499      		sbic 0x16,4
 152 0050 00C0      		rjmp .L6
 153               		.loc 1 64 0 is_stmt 0 discriminator 1
 154 0052 8091 0000 		lds r24,pstate
 155 0056 80FD      		sbrc r24,0
 156 0058 00C0      		rjmp .L6
  65:main.c        ****             pstate|=(1<<TOUCH_FLAG);            
 157               		.loc 1 65 0 is_stmt 1
 158 005a 8160      		ori r24,lo8(1)
 159 005c 8093 0000 		sts pstate,r24
 160 0060 00C0      		rjmp .L6
 161               		.cfi_endproc
 162               	.LFE11:
 164               		.text
 165               	.global	__vector_10
 167               	__vector_10:
 168               	.LFB12:
  66:main.c        ****         }
  67:main.c        ****         if(pstate&(1<<DEBUG_FLAG)){
  68:main.c        ****             //pstate&=~(1<<DEBUG_FLAG);  
  69:main.c        ****         }  
  70:main.c        **** /*
  71:main.c        ****         if(pstate&(1<<ADC_FLAG)){
  72:main.c        ****             pstate&=~(1<<ADC_FLAG);   
  73:main.c        ****             ADCSRA |= (1<<ADSC);
  74:main.c        ****         }*/
  75:main.c        ****     }
  76:main.c        ****     return 0;
  77:main.c        **** }     
  78:main.c        **** /*
  79:main.c        **** ISR(ADC_vect){
  80:main.c        ****     uint16_t res=ADCL;
  81:main.c        ****     res|=(ADCH<<8);
  82:main.c        ****     blinkMode=2753/res-3;   //Vcc=1024*1.1/ADC
  83:main.c        **** }*/
  84:main.c        **** volatile uint8_t speed=4;
  85:main.c        **** volatile uint8_t duty=3;
  86:main.c        **** volatile uint8_t index=0;
  87:main.c        **** 
  88:main.c        **** ISR(TIM0_COMPA_vect) {
 169               		.loc 1 88 0
 170               		.cfi_startproc
 171 0060 1F92      		push r1
 172               	.LCFI0:
 173               		.cfi_def_cfa_offset 3
 174               		.cfi_offset 1, -2
 175 0062 0F92      		push r0
 176               	.LCFI1:
 177               		.cfi_def_cfa_offset 4
 178               		.cfi_offset 0, -3
 179 0064 0FB6      		in r0,__SREG__
 180 0066 0F92      		push r0
 181 0068 1124      		clr __zero_reg__
 182 006a 2F93      		push r18
 183               	.LCFI2:
 184               		.cfi_def_cfa_offset 5
 185               		.cfi_offset 18, -4
 186 006c 3F93      		push r19
 187               	.LCFI3:
 188               		.cfi_def_cfa_offset 6
 189               		.cfi_offset 19, -5
 190 006e 4F93      		push r20
 191               	.LCFI4:
 192               		.cfi_def_cfa_offset 7
 193               		.cfi_offset 20, -6
 194 0070 5F93      		push r21
 195               	.LCFI5:
 196               		.cfi_def_cfa_offset 8
 197               		.cfi_offset 21, -7
 198 0072 6F93      		push r22
 199               	.LCFI6:
 200               		.cfi_def_cfa_offset 9
 201               		.cfi_offset 22, -8
 202 0074 7F93      		push r23
 203               	.LCFI7:
 204               		.cfi_def_cfa_offset 10
 205               		.cfi_offset 23, -9
 206 0076 8F93      		push r24
 207               	.LCFI8:
 208               		.cfi_def_cfa_offset 11
 209               		.cfi_offset 24, -10
 210 0078 9F93      		push r25
 211               	.LCFI9:
 212               		.cfi_def_cfa_offset 12
 213               		.cfi_offset 25, -11
 214 007a AF93      		push r26
 215               	.LCFI10:
 216               		.cfi_def_cfa_offset 13
 217               		.cfi_offset 26, -12
 218 007c BF93      		push r27
 219               	.LCFI11:
 220               		.cfi_def_cfa_offset 14
 221               		.cfi_offset 27, -13
 222 007e EF93      		push r30
 223               	.LCFI12:
 224               		.cfi_def_cfa_offset 15
 225               		.cfi_offset 30, -14
 226 0080 FF93      		push r31
 227               	.LCFI13:
 228               		.cfi_def_cfa_offset 16
 229               		.cfi_offset 31, -15
 230               	/* prologue: Signal */
 231               	/* frame size = 0 */
 232               	/* stack size = 15 */
 233               	.L__stack_usage = 15
  89:main.c        ****     if(pstate&(1<<DIR_FLAG)){
 234               		.loc 1 89 0
 235 0082 8091 0000 		lds r24,pstate
  90:main.c        ****         cnt++;
 236               		.loc 1 90 0
 237 0086 2091 0000 		lds r18,cnt
 238 008a 3091 0000 		lds r19,cnt+1
  89:main.c        ****     if(pstate&(1<<DIR_FLAG)){
 239               		.loc 1 89 0
 240 008e 82FF      		sbrs r24,2
 241 0090 00C0      		rjmp .L17
 242               		.loc 1 90 0
 243 0092 2F5F      		subi r18,-1
 244 0094 3F4F      		sbci r19,-1
 245 0096 00C0      		rjmp .L27
 246               	.L17:
  91:main.c        ****     }else{
  92:main.c        ****         cnt--;
 247               		.loc 1 92 0
 248 0098 2150      		subi r18,1
 249 009a 3109      		sbc r19,__zero_reg__
 250               	.L27:
 251 009c 3093 0000 		sts cnt+1,r19
 252 00a0 2093 0000 		sts cnt,r18
  93:main.c        ****     }
  94:main.c        ****     switch(blinkMode){
 253               		.loc 1 94 0
 254 00a4 9091 0000 		lds r25,blinkMode
 255 00a8 9130      		cpi r25,lo8(1)
 256 00aa 01F0      		breq .L20
 257 00ac 9230      		cpi r25,lo8(2)
 258 00ae 01F0      		breq .L21
 259 00b0 00C0      		rjmp .L16
 260               	.L20:
  95:main.c        ****         case(PIXIE):
  96:main.c        ****             if(cnt==duty){
 261               		.loc 1 96 0
 262 00b2 8091 0000 		lds r24,duty
 263 00b6 2091 0000 		lds r18,cnt
 264 00ba 3091 0000 		lds r19,cnt+1
 265 00be 90E0      		ldi r25,0
 266 00c0 8217      		cp r24,r18
 267 00c2 9307      		cpc r25,r19
 268 00c4 01F4      		brne .L22
  97:main.c        ****                 level[index]=63;
 269               		.loc 1 97 0
 270 00c6 E091 0000 		lds r30,index
 271 00ca F0E0      		ldi r31,0
 272 00cc E050      		subi r30,lo8(-(level))
 273 00ce F040      		sbci r31,hi8(-(level))
 274 00d0 8FE3      		ldi r24,lo8(63)
 275 00d2 00C0      		rjmp .L28
 276               	.L22:
  98:main.c        ****             }else if(cnt>=speed){
 277               		.loc 1 98 0
 278 00d4 8091 0000 		lds r24,speed
 279 00d8 2091 0000 		lds r18,cnt
 280 00dc 3091 0000 		lds r19,cnt+1
 281 00e0 90E0      		ldi r25,0
 282 00e2 2817      		cp r18,r24
 283 00e4 3907      		cpc r19,r25
 284 00e6 00F4      		brsh .+2
 285 00e8 00C0      		rjmp .L16
  99:main.c        ****                 cnt=0;
 286               		.loc 1 99 0
 287 00ea 1092 0000 		sts cnt+1,__zero_reg__
 288 00ee 1092 0000 		sts cnt,__zero_reg__
 100:main.c        ****                 level[index]=0; 
 289               		.loc 1 100 0
 290 00f2 E091 0000 		lds r30,index
 291 00f6 F0E0      		ldi r31,0
 292 00f8 E050      		subi r30,lo8(-(level))
 293 00fa F040      		sbci r31,hi8(-(level))
 294 00fc 1082      		st Z,__zero_reg__
 101:main.c        ****                 index=rand()/2730;
 295               		.loc 1 101 0
 296 00fe 00D0      		rcall rand
 297               	.LVL4:
 298 0100 6AEA      		ldi r22,lo8(-86)
 299 0102 7AE0      		ldi r23,lo8(10)
 300 0104 00D0      		rcall __divmodhi4
 301 0106 6093 0000 		sts index,r22
 302 010a 00C0      		rjmp .L16
 303               	.L21:
 102:main.c        ****             }
 103:main.c        ****         break;
 104:main.c        ****         case(DEBUG):
 105:main.c        ****             if(cnt>63){
 304               		.loc 1 105 0
 305 010c 2091 0000 		lds r18,cnt
 306 0110 3091 0000 		lds r19,cnt+1
 307 0114 2034      		cpi r18,64
 308 0116 3105      		cpc r19,__zero_reg__
 309 0118 00F0      		brlo .L23
 106:main.c        ****                 pstate&=~(1<<DIR_FLAG);
 310               		.loc 1 106 0
 311 011a 8B7F      		andi r24,lo8(-5)
 312 011c 8093 0000 		sts pstate,r24
 107:main.c        ****                 level[order[index]]=0; 
 313               		.loc 1 107 0
 314 0120 E091 0000 		lds r30,index
 315 0124 F0E0      		ldi r31,0
 316 0126 E050      		subi r30,lo8(-(order))
 317 0128 F040      		sbci r31,hi8(-(order))
 318 012a E081      		ld r30,Z
 319 012c F0E0      		ldi r31,0
 320 012e E050      		subi r30,lo8(-(level))
 321 0130 F040      		sbci r31,hi8(-(level))
 322 0132 1082      		st Z,__zero_reg__
 108:main.c        ****                 index--;
 323               		.loc 1 108 0
 324 0134 8091 0000 		lds r24,index
 325 0138 8150      		subi r24,lo8(-(-1))
 326 013a 8093 0000 		sts index,r24
 109:main.c        ****                 if(index==255)index=11;
 327               		.loc 1 109 0
 328 013e 8091 0000 		lds r24,index
 329 0142 8F3F      		cpi r24,lo8(-1)
 330 0144 01F4      		brne .L25
 331               		.loc 1 109 0 is_stmt 0 discriminator 1
 332 0146 8BE0      		ldi r24,lo8(11)
 333 0148 8093 0000 		sts index,r24
 334 014c 00C0      		rjmp .L25
 335               	.L23:
 110:main.c        ****             }else if(cnt==0){
 336               		.loc 1 110 0 is_stmt 1
 337 014e 2091 0000 		lds r18,cnt
 338 0152 3091 0000 		lds r19,cnt+1
 339 0156 232B      		or r18,r19
 340 0158 01F4      		brne .L25
 111:main.c        ****                 pstate|=(1<<DIR_FLAG);
 341               		.loc 1 111 0
 342 015a 8460      		ori r24,lo8(4)
 343 015c 8093 0000 		sts pstate,r24
 344               	.L25:
 112:main.c        ****             }
 113:main.c        ****             level[order[index]]=cnt; 
 345               		.loc 1 113 0
 346 0160 E091 0000 		lds r30,index
 347 0164 8091 0000 		lds r24,cnt
 348 0168 9091 0000 		lds r25,cnt+1
 349 016c F0E0      		ldi r31,0
 350 016e E050      		subi r30,lo8(-(order))
 351 0170 F040      		sbci r31,hi8(-(order))
 352 0172 E081      		ld r30,Z
 353 0174 F0E0      		ldi r31,0
 354 0176 E050      		subi r30,lo8(-(level))
 355 0178 F040      		sbci r31,hi8(-(level))
 356               	.L28:
 357 017a 8083      		st Z,r24
 358               	.L16:
 359               	/* epilogue start */
 114:main.c        ****             
 115:main.c        ****             break;
 116:main.c        ****     }
 117:main.c        ****  
 118:main.c        **** 
 119:main.c        ****     
 120:main.c        **** }
 360               		.loc 1 120 0
 361 017c FF91      		pop r31
 362 017e EF91      		pop r30
 363 0180 BF91      		pop r27
 364 0182 AF91      		pop r26
 365 0184 9F91      		pop r25
 366 0186 8F91      		pop r24
 367 0188 7F91      		pop r23
 368 018a 6F91      		pop r22
 369 018c 5F91      		pop r21
 370 018e 4F91      		pop r20
 371 0190 3F91      		pop r19
 372 0192 2F91      		pop r18
 373 0194 0F90      		pop r0
 374 0196 0FBE      		out __SREG__,r0
 375 0198 0F90      		pop r0
 376 019a 1F90      		pop r1
 377 019c 1895      		reti
 378               		.cfi_endproc
 379               	.LFE12:
 381               	.global	__vector_3
 383               	__vector_3:
 384               	.LFB13:
 121:main.c        **** 
 122:main.c        **** 
 123:main.c        **** ISR(TIM1_COMPA_vect) {
 385               		.loc 1 123 0
 386               		.cfi_startproc
 387 019e 1F92      		push r1
 388               	.LCFI14:
 389               		.cfi_def_cfa_offset 3
 390               		.cfi_offset 1, -2
 391 01a0 0F92      		push r0
 392               	.LCFI15:
 393               		.cfi_def_cfa_offset 4
 394               		.cfi_offset 0, -3
 395 01a2 0FB6      		in r0,__SREG__
 396 01a4 0F92      		push r0
 397 01a6 1124      		clr __zero_reg__
 398 01a8 2F93      		push r18
 399               	.LCFI16:
 400               		.cfi_def_cfa_offset 5
 401               		.cfi_offset 18, -4
 402 01aa 3F93      		push r19
 403               	.LCFI17:
 404               		.cfi_def_cfa_offset 6
 405               		.cfi_offset 19, -5
 406 01ac 4F93      		push r20
 407               	.LCFI18:
 408               		.cfi_def_cfa_offset 7
 409               		.cfi_offset 20, -6
 410 01ae 5F93      		push r21
 411               	.LCFI19:
 412               		.cfi_def_cfa_offset 8
 413               		.cfi_offset 21, -7
 414 01b0 6F93      		push r22
 415               	.LCFI20:
 416               		.cfi_def_cfa_offset 9
 417               		.cfi_offset 22, -8
 418 01b2 7F93      		push r23
 419               	.LCFI21:
 420               		.cfi_def_cfa_offset 10
 421               		.cfi_offset 23, -9
 422 01b4 8F93      		push r24
 423               	.LCFI22:
 424               		.cfi_def_cfa_offset 11
 425               		.cfi_offset 24, -10
 426 01b6 9F93      		push r25
 427               	.LCFI23:
 428               		.cfi_def_cfa_offset 12
 429               		.cfi_offset 25, -11
 430 01b8 EF93      		push r30
 431               	.LCFI24:
 432               		.cfi_def_cfa_offset 13
 433               		.cfi_offset 30, -12
 434 01ba FF93      		push r31
 435               	.LCFI25:
 436               		.cfi_def_cfa_offset 14
 437               		.cfi_offset 31, -13
 438               	/* prologue: Signal */
 439               	/* frame size = 0 */
 440               	/* stack size = 13 */
 441               	.L__stack_usage = 13
 124:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
 125:main.c        ****   ramp = (ramp+1) & 0x3F;
 442               		.loc 1 125 0
 443 01bc 9091 0000 		lds r25,ramp.1651
 444 01c0 9F5F      		subi r25,lo8(-(1))
 445 01c2 9F73      		andi r25,lo8(63)
 446 01c4 9093 0000 		sts ramp.1651,r25
 126:main.c        ****   if (ramp == 0) {
 447               		.loc 1 126 0
 448 01c8 9111      		cpse r25,__zero_reg__
 449 01ca 00C0      		rjmp .L30
 127:main.c        ****     bits = 0x07;
 450               		.loc 1 127 0
 451 01cc 87E0      		ldi r24,lo8(7)
 452 01ce 8093 0000 		sts bits.1653,r24
 128:main.c        ****     column = (column + 1) & 0x03;
 453               		.loc 1 128 0
 454 01d2 2091 0000 		lds r18,column.1652
 455 01d6 2F5F      		subi r18,lo8(-(1))
 456 01d8 2370      		andi r18,lo8(3)
 457 01da 2093 0000 		sts column.1652,r18
 129:main.c        ****     first = column * 3;
 458               		.loc 1 129 0
 459 01de 822F      		mov r24,r18
 460 01e0 63E0      		ldi r22,lo8(3)
 461 01e2 00D0      		rcall __mulqi3
 462 01e4 8093 0000 		sts first.1650,r24
 130:main.c        ****     colbit = 1<<column;
 463               		.loc 1 130 0
 464 01e8 41E0      		ldi r20,lo8(1)
 465 01ea 50E0      		ldi r21,0
 466 01ec BA01      		movw r22,r20
 467 01ee 00C0      		rjmp 2f
 468               		1:
 469 01f0 660F      		lsl r22
 470 01f2 771F      		rol r23
 471               		2:
 472 01f4 2A95      		dec r18
 473 01f6 02F4      		brpl 1b
 474 01f8 6093 0000 		sts colbit.1654,r22
 475               	.L30:
 131:main.c        ****   }
 132:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 476               		.loc 1 132 0
 477 01fc E091 0000 		lds r30,first.1650
 478 0200 F0E0      		ldi r31,0
 479 0202 E050      		subi r30,lo8(-(level))
 480 0204 F040      		sbci r31,hi8(-(level))
 481 0206 8081      		ld r24,Z
 482 0208 9813      		cpse r25,r24
 483 020a 00C0      		rjmp .L31
 484               		.loc 1 132 0 is_stmt 0 discriminator 1
 485 020c 8091 0000 		lds r24,bits.1653
 486 0210 8670      		andi r24,lo8(6)
 487 0212 8093 0000 		sts bits.1653,r24
 488               	.L31:
 133:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 489               		.loc 1 133 0 is_stmt 1
 490 0216 8181      		ldd r24,Z+1
 491 0218 9813      		cpse r25,r24
 492 021a 00C0      		rjmp .L32
 493               		.loc 1 133 0 is_stmt 0 discriminator 1
 494 021c 8091 0000 		lds r24,bits.1653
 495 0220 8570      		andi r24,lo8(5)
 496 0222 8093 0000 		sts bits.1653,r24
 497               	.L32:
 134:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 498               		.loc 1 134 0 is_stmt 1
 499 0226 8281      		ldd r24,Z+2
 500 0228 9813      		cpse r25,r24
 501 022a 00C0      		rjmp .L33
 502               		.loc 1 134 0 is_stmt 0 discriminator 1
 503 022c 8091 0000 		lds r24,bits.1653
 504 0230 8370      		andi r24,lo8(3)
 505 0232 8093 0000 		sts bits.1653,r24
 506               	.L33:
 135:main.c        ****   uint8_t mask = colbit - 1;
 507               		.loc 1 135 0 is_stmt 1
 508 0236 4091 0000 		lds r20,colbit.1654
 509 023a 6FEF      		ldi r22,lo8(-1)
 510 023c 640F      		add r22,r20
 511               	.LVL5:
 136:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 512               		.loc 1 136 0
 513 023e 5091 0000 		lds r21,bits.1653
 514 0242 862F      		mov r24,r22
 515 0244 90E0      		ldi r25,0
 516 0246 8095      		com r24
 517 0248 9095      		com r25
 518 024a 252F      		mov r18,r21
 519 024c 30E0      		ldi r19,0
 520 024e 8223      		and r24,r18
 521 0250 9323      		and r25,r19
 522 0252 880F      		lsl r24
 523 0254 991F      		rol r25
 524 0256 5623      		and r21,r22
 525 0258 852B      		or r24,r21
 526               	.LVL6:
 137:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 527               		.loc 1 137 0
 528 025a 97B3      		in r25,0x17
 529 025c 907F      		andi r25,lo8(-16)
 530 025e 492B      		or r20,r25
 531 0260 482B      		or r20,r24
 532 0262 47BB      		out 0x17,r20
 138:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 533               		.loc 1 138 0
 534 0264 98B3      		in r25,0x18
 535 0266 907F      		andi r25,lo8(-16)
 536 0268 892B      		or r24,r25
 537               	.LVL7:
 538 026a 88BB      		out 0x18,r24
 539               	/* epilogue start */
 139:main.c        **** }
 540               		.loc 1 139 0
 541 026c FF91      		pop r31
 542 026e EF91      		pop r30
 543 0270 9F91      		pop r25
 544 0272 8F91      		pop r24
 545 0274 7F91      		pop r23
 546 0276 6F91      		pop r22
 547               	.LVL8:
 548 0278 5F91      		pop r21
 549 027a 4F91      		pop r20
 550 027c 3F91      		pop r19
 551 027e 2F91      		pop r18
 552 0280 0F90      		pop r0
 553 0282 0FBE      		out __SREG__,r0
 554 0284 0F90      		pop r0
 555 0286 1F90      		pop r1
 556 0288 1895      		reti
 557               		.cfi_endproc
 558               	.LFE13:
 560               		.local	colbit.1654
 561               		.comm	colbit.1654,1,1
 562               		.local	first.1650
 563               		.comm	first.1650,1,1
 564               		.local	column.1652
 565               		.comm	column.1652,1,1
 566               		.local	bits.1653
 567               		.comm	bits.1653,1,1
 568               		.local	ramp.1651
 569               		.comm	ramp.1651,1,1
 570               	.global	index
 571               		.section .bss
 574               	index:
 575 0000 00        		.zero	1
 576               	.global	duty
 577               		.data
 580               	duty:
 581 0000 03        		.byte	3
 582               	.global	speed
 585               	speed:
 586 0001 04        		.byte	4
 587               		.local	randf
 588               		.comm	randf,1,1
 589               		.local	randx
 590               		.comm	randx,4,1
 591               	.global	pstate
 592               		.section .bss
 595               	pstate:
 596 0001 00        		.zero	1
 597               	.global	blinkMode
 600               	blinkMode:
 601 0002 00        		.zero	1
 602               	.global	order
 603               		.data
 606               	order:
 607 0002 00        		.byte	0
 608 0003 0B        		.byte	11
 609 0004 09        		.byte	9
 610 0005 04        		.byte	4
 611 0006 02        		.byte	2
 612 0007 0A        		.byte	10
 613 0008 07        		.byte	7
 614 0009 06        		.byte	6
 615 000a 03        		.byte	3
 616 000b 01        		.byte	1
 617 000c 08        		.byte	8
 618 000d 05        		.byte	5
 619               		.comm	level,12,1
 620               	.global	cnt
 623               	cnt:
 624 000e 0100      		.word	1
 625               		.text
 626               	.Letext0:
 627               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccQBbNyu.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQBbNyu.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQBbNyu.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQBbNyu.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQBbNyu.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQBbNyu.s:12     .text:0000000000000000 srand
     /tmp/ccQBbNyu.s:588    .bss:0000000000000009 randx
     /tmp/ccQBbNyu.s:569    .bss:0000000000000008 randf
     /tmp/ccQBbNyu.s:40     .text:000000000000001c rand
     /tmp/ccQBbNyu.s:86     .text.startup:0000000000000000 main
     /tmp/ccQBbNyu.s:595    .bss:0000000000000001 pstate
     /tmp/ccQBbNyu.s:600    .bss:0000000000000002 blinkMode
     /tmp/ccQBbNyu.s:167    .text:0000000000000060 __vector_10
     /tmp/ccQBbNyu.s:623    .data:000000000000000e cnt
     /tmp/ccQBbNyu.s:580    .data:0000000000000000 duty
     /tmp/ccQBbNyu.s:574    .bss:0000000000000000 index
                            *COM*:000000000000000c level
     /tmp/ccQBbNyu.s:585    .data:0000000000000001 speed
     /tmp/ccQBbNyu.s:606    .data:0000000000000002 order
     /tmp/ccQBbNyu.s:383    .text:000000000000019e __vector_3
     /tmp/ccQBbNyu.s:567    .bss:0000000000000007 ramp.1651
     /tmp/ccQBbNyu.s:565    .bss:0000000000000006 bits.1653
     /tmp/ccQBbNyu.s:563    .bss:0000000000000005 column.1652
     /tmp/ccQBbNyu.s:561    .bss:0000000000000004 first.1650
                             .bss:0000000000000003 colbit.1654

UNDEFINED SYMBOLS
__mulsi3
__divmodhi4
__mulqi3
__do_copy_data
__do_clear_bss
