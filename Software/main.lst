   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB9:
  15               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** #include <avr/power.h>
   5:main.c        **** 
   6:main.c        **** 
   7:main.c        **** volatile unsigned int cnt=0;
   8:main.c        **** uint8_t level[12];
   9:main.c        **** uint8_t level[12] = {1, 1, 3, 7, 15, 31, 63, 31, 15, 7, 3, 1 };
  10:main.c        **** int main(void){
  16               		.loc 1 10 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LBB8:
  23               	.LBB9:
  24               		.file 2 "/usr/lib/avr/include/avr/power.h"
   1:/usr/lib/avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib/avr/include/avr/power.h ****    Copyright (c) 2011 Frédéric Nadeau
   3:/usr/lib/avr/include/avr/power.h ****    All rights reserved.
   4:/usr/lib/avr/include/avr/power.h **** 
   5:/usr/lib/avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/avr/include/avr/power.h **** 
   8:/usr/lib/avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/avr/include/avr/power.h ****      distribution.
  14:/usr/lib/avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  15:/usr/lib/avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  16:/usr/lib/avr/include/avr/power.h ****      from this software without specific prior written permission.
  17:/usr/lib/avr/include/avr/power.h **** 
  18:/usr/lib/avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  19:/usr/lib/avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  20:/usr/lib/avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  21:/usr/lib/avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  22:/usr/lib/avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  23:/usr/lib/avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  24:/usr/lib/avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  25:/usr/lib/avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  26:/usr/lib/avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  27:/usr/lib/avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  28:/usr/lib/avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  29:/usr/lib/avr/include/avr/power.h **** 
  30:/usr/lib/avr/include/avr/power.h **** /* $Id$ */
  31:/usr/lib/avr/include/avr/power.h **** 
  32:/usr/lib/avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  33:/usr/lib/avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  34:/usr/lib/avr/include/avr/power.h **** 
  35:/usr/lib/avr/include/avr/power.h **** #include <avr/io.h>
  36:/usr/lib/avr/include/avr/power.h **** #include <stdint.h>
  37:/usr/lib/avr/include/avr/power.h **** 
  38:/usr/lib/avr/include/avr/power.h **** 
  39:/usr/lib/avr/include/avr/power.h **** /** \file */
  40:/usr/lib/avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  41:/usr/lib/avr/include/avr/power.h **** 
  42:/usr/lib/avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  43:/usr/lib/avr/include/avr/power.h **** 
  44:/usr/lib/avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  45:/usr/lib/avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  46:/usr/lib/avr/include/avr/power.h **** peripherals as needed. Some devices have the XTAL Divide Control Register
  47:/usr/lib/avr/include/avr/power.h **** (XDIV) which offer similar functionality as System Clock Prescale
  48:/usr/lib/avr/include/avr/power.h **** Register (CLKPR).
  49:/usr/lib/avr/include/avr/power.h **** 
  50:/usr/lib/avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  51:/usr/lib/avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  52:/usr/lib/avr/include/avr/power.h **** 
  53:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  54:/usr/lib/avr/include/avr/power.h **** the ATmega8). On those devices without a Power Reduction Register, the
  55:/usr/lib/avr/include/avr/power.h **** power reduction macros are not available..
  56:/usr/lib/avr/include/avr/power.h **** 
  57:/usr/lib/avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  58:/usr/lib/avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  59:/usr/lib/avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  60:/usr/lib/avr/include/avr/power.h **** find out which macros are applicable to your device.
  61:/usr/lib/avr/include/avr/power.h **** 
  62:/usr/lib/avr/include/avr/power.h **** \note For device using the XTAL Divide Control Register (XDIV), when prescaler
  63:/usr/lib/avr/include/avr/power.h **** is used, Timer/Counter0 can only be used in asynchronous mode. Keep in mind
  64:/usr/lib/avr/include/avr/power.h **** that Timer/Counter0 source shall be less than ¼th of peripheral clock.
  65:/usr/lib/avr/include/avr/power.h **** Therefore, when using a typical 32.768 kHz crystal, one shall not scale
  66:/usr/lib/avr/include/avr/power.h **** the clock below 131.072 kHz.
  67:/usr/lib/avr/include/avr/power.h **** 
  68:/usr/lib/avr/include/avr/power.h **** */
  69:/usr/lib/avr/include/avr/power.h **** 
  70:/usr/lib/avr/include/avr/power.h **** 
  71:/usr/lib/avr/include/avr/power.h **** /** \addtogroup avr_power
  72:/usr/lib/avr/include/avr/power.h **** 
  73:/usr/lib/avr/include/avr/power.h **** \anchor avr_powermacros
  74:/usr/lib/avr/include/avr/power.h **** <small>
  75:/usr/lib/avr/include/avr/power.h **** <center>
  76:/usr/lib/avr/include/avr/power.h **** <table border="3">
  77:/usr/lib/avr/include/avr/power.h ****   <tr>
  78:/usr/lib/avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  79:/usr/lib/avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  80:/usr/lib/avr/include/avr/power.h ****   </tr>
  81:/usr/lib/avr/include/avr/power.h **** 
  82:/usr/lib/avr/include/avr/power.h ****   <tr>
  83:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_disable()</td>
  84:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog Comparator on PortA.</td>
  85:/usr/lib/avr/include/avr/power.h ****   </tr>
  86:/usr/lib/avr/include/avr/power.h **** 
  87:/usr/lib/avr/include/avr/power.h ****   <tr>
  88:/usr/lib/avr/include/avr/power.h ****     <td>power_aca_enable()</td>
  89:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog Comparator on PortA.</td>
  90:/usr/lib/avr/include/avr/power.h ****   </tr>
  91:/usr/lib/avr/include/avr/power.h **** 
  92:/usr/lib/avr/include/avr/power.h ****   <tr>
  93:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  94:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  95:/usr/lib/avr/include/avr/power.h ****   </tr>
  96:/usr/lib/avr/include/avr/power.h **** 
  97:/usr/lib/avr/include/avr/power.h ****   <tr>
  98:/usr/lib/avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  99:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
 100:/usr/lib/avr/include/avr/power.h ****   </tr>
 101:/usr/lib/avr/include/avr/power.h **** 
 102:/usr/lib/avr/include/avr/power.h ****   <tr>
 103:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_disable()</td>
 104:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module on PortA</td>
 105:/usr/lib/avr/include/avr/power.h ****   </tr>
 106:/usr/lib/avr/include/avr/power.h **** 
 107:/usr/lib/avr/include/avr/power.h ****   <tr>
 108:/usr/lib/avr/include/avr/power.h ****     <td>power_adca_enable()</td>
 109:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module on PortA</td>
 110:/usr/lib/avr/include/avr/power.h ****   </tr>
 111:/usr/lib/avr/include/avr/power.h **** 
 112:/usr/lib/avr/include/avr/power.h ****   <tr>
 113:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_disable()</td>
 114:/usr/lib/avr/include/avr/power.h ****     <td>Disable the EVSYS module</td>
 115:/usr/lib/avr/include/avr/power.h ****   </tr>
 116:/usr/lib/avr/include/avr/power.h **** 
 117:/usr/lib/avr/include/avr/power.h ****   <tr>
 118:/usr/lib/avr/include/avr/power.h ****     <td>power_evsys_enable()</td>
 119:/usr/lib/avr/include/avr/power.h ****     <td>Enable the EVSYS module</td>
 120:/usr/lib/avr/include/avr/power.h ****   </tr>
 121:/usr/lib/avr/include/avr/power.h **** 
 122:/usr/lib/avr/include/avr/power.h ****   <tr>
 123:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_disable()</td>
 124:/usr/lib/avr/include/avr/power.h ****     <td>Disable the HIRES module on PortC</td>
 125:/usr/lib/avr/include/avr/power.h ****   </tr>
 126:/usr/lib/avr/include/avr/power.h **** 
 127:/usr/lib/avr/include/avr/power.h ****   <tr>
 128:/usr/lib/avr/include/avr/power.h ****     <td>power_hiresc_enable()</td>
 129:/usr/lib/avr/include/avr/power.h ****     <td>Enable the HIRES module on PortC</td>
 130:/usr/lib/avr/include/avr/power.h ****   </tr>
 131:/usr/lib/avr/include/avr/power.h **** 
 132:/usr/lib/avr/include/avr/power.h ****    <tr>
 133:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
 134:/usr/lib/avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
 135:/usr/lib/avr/include/avr/power.h ****   </tr>
 136:/usr/lib/avr/include/avr/power.h **** 
 137:/usr/lib/avr/include/avr/power.h ****   <tr>
 138:/usr/lib/avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
 139:/usr/lib/avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
 140:/usr/lib/avr/include/avr/power.h ****   </tr>
 141:/usr/lib/avr/include/avr/power.h **** 
 142:/usr/lib/avr/include/avr/power.h ****   <tr>
 143:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_enable()</td>
 144:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Programmable Gain Amplifier module.</td>
 145:/usr/lib/avr/include/avr/power.h ****   </tr>
 146:/usr/lib/avr/include/avr/power.h **** 
 147:/usr/lib/avr/include/avr/power.h ****   <tr>
 148:/usr/lib/avr/include/avr/power.h ****     <td>power_pga_disable()</td>
 149:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Programmable Gain Amplifier module.</td>
 150:/usr/lib/avr/include/avr/power.h ****   </tr>
 151:/usr/lib/avr/include/avr/power.h ****   
 152:/usr/lib/avr/include/avr/power.h ****   <tr>
 153:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 154:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 155:/usr/lib/avr/include/avr/power.h ****   </tr>
 156:/usr/lib/avr/include/avr/power.h **** 
 157:/usr/lib/avr/include/avr/power.h ****   <tr>
 158:/usr/lib/avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 159:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 160:/usr/lib/avr/include/avr/power.h ****   </tr>
 161:/usr/lib/avr/include/avr/power.h **** 
 162:/usr/lib/avr/include/avr/power.h ****   <tr>
 163:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 164:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 165:/usr/lib/avr/include/avr/power.h ****   </tr>
 166:/usr/lib/avr/include/avr/power.h **** 
 167:/usr/lib/avr/include/avr/power.h ****   <tr>
 168:/usr/lib/avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 169:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 170:/usr/lib/avr/include/avr/power.h ****   </tr>
 171:/usr/lib/avr/include/avr/power.h **** 
 172:/usr/lib/avr/include/avr/power.h ****   <tr>
 173:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 174:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 175:/usr/lib/avr/include/avr/power.h ****   </tr>
 176:/usr/lib/avr/include/avr/power.h **** 
 177:/usr/lib/avr/include/avr/power.h ****   <tr>
 178:/usr/lib/avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 179:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 180:/usr/lib/avr/include/avr/power.h ****   </tr>
 181:/usr/lib/avr/include/avr/power.h **** 
 182:/usr/lib/avr/include/avr/power.h ****   <tr>
 183:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 184:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 185:/usr/lib/avr/include/avr/power.h ****   </tr>
 186:/usr/lib/avr/include/avr/power.h **** 
 187:/usr/lib/avr/include/avr/power.h ****   <tr>
 188:/usr/lib/avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 189:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 190:/usr/lib/avr/include/avr/power.h ****   </tr>
 191:/usr/lib/avr/include/avr/power.h **** 
 192:/usr/lib/avr/include/avr/power.h ****   <tr>
 193:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_enable()</td>
 194:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 0 .</td>
 195:/usr/lib/avr/include/avr/power.h ****   </tr>
 196:/usr/lib/avr/include/avr/power.h **** 
 197:/usr/lib/avr/include/avr/power.h ****   <tr>
 198:/usr/lib/avr/include/avr/power.h ****     <td>power_ram0_disable()</td>
 199:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 0. </td>
 200:/usr/lib/avr/include/avr/power.h ****   </tr>
 201:/usr/lib/avr/include/avr/power.h **** 
 202:/usr/lib/avr/include/avr/power.h ****   <tr>
 203:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_enable()</td>
 204:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 1 .</td>
 205:/usr/lib/avr/include/avr/power.h ****   </tr>
 206:/usr/lib/avr/include/avr/power.h **** 
 207:/usr/lib/avr/include/avr/power.h ****   <tr>
 208:/usr/lib/avr/include/avr/power.h ****     <td>power_ram1_disable()</td>
 209:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 1. </td>
 210:/usr/lib/avr/include/avr/power.h ****   </tr>
 211:/usr/lib/avr/include/avr/power.h **** 
 212:/usr/lib/avr/include/avr/power.h ****   <tr>
 213:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_enable()</td>
 214:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 2 .</td>
 215:/usr/lib/avr/include/avr/power.h ****   </tr>
 216:/usr/lib/avr/include/avr/power.h **** 
 217:/usr/lib/avr/include/avr/power.h ****   <tr>
 218:/usr/lib/avr/include/avr/power.h ****     <td>power_ram2_disable()</td>
 219:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 2. </td>
 220:/usr/lib/avr/include/avr/power.h ****   </tr>
 221:/usr/lib/avr/include/avr/power.h **** 
 222:/usr/lib/avr/include/avr/power.h ****   <tr>
 223:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_enable()</td>
 224:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SRAM block 3 .</td>
 225:/usr/lib/avr/include/avr/power.h ****   </tr>
 226:/usr/lib/avr/include/avr/power.h **** 
 227:/usr/lib/avr/include/avr/power.h ****   <tr>
 228:/usr/lib/avr/include/avr/power.h ****     <td>power_ram3_disable()</td>
 229:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SRAM block 3. </td>
 230:/usr/lib/avr/include/avr/power.h ****   </tr>
 231:/usr/lib/avr/include/avr/power.h **** 
 232:/usr/lib/avr/include/avr/power.h ****   <tr>
 233:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_disable()</td>
 234:/usr/lib/avr/include/avr/power.h ****     <td>Disable the RTC module</td>
 235:/usr/lib/avr/include/avr/power.h ****   </tr>
 236:/usr/lib/avr/include/avr/power.h **** 
 237:/usr/lib/avr/include/avr/power.h ****   <tr>
 238:/usr/lib/avr/include/avr/power.h ****     <td>power_rtc_enable()</td>
 239:/usr/lib/avr/include/avr/power.h ****     <td>Enable the RTC module</td>
 240:/usr/lib/avr/include/avr/power.h ****   </tr>
 241:/usr/lib/avr/include/avr/power.h **** 
 242:/usr/lib/avr/include/avr/power.h ****   <tr>
 243:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 244:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 245:/usr/lib/avr/include/avr/power.h ****   </tr>
 246:/usr/lib/avr/include/avr/power.h **** 
 247:/usr/lib/avr/include/avr/power.h ****   <tr>
 248:/usr/lib/avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 249:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 250:/usr/lib/avr/include/avr/power.h ****   </tr>
 251:/usr/lib/avr/include/avr/power.h **** 
 252:/usr/lib/avr/include/avr/power.h ****   <tr>
 253:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_disable()</td>
 254:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortC</td>
 255:/usr/lib/avr/include/avr/power.h ****   </tr>
 256:/usr/lib/avr/include/avr/power.h **** 
 257:/usr/lib/avr/include/avr/power.h ****   <tr>
 258:/usr/lib/avr/include/avr/power.h ****     <td>power_spic_enable()</td>
 259:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortC</td>
 260:/usr/lib/avr/include/avr/power.h ****   </tr>
 261:/usr/lib/avr/include/avr/power.h **** 
 262:/usr/lib/avr/include/avr/power.h ****   <tr>
 263:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_disable()</td>
 264:/usr/lib/avr/include/avr/power.h ****     <td>Disable the SPI module on PortD</td>
 265:/usr/lib/avr/include/avr/power.h ****   </tr>
 266:/usr/lib/avr/include/avr/power.h **** 
 267:/usr/lib/avr/include/avr/power.h ****   <tr>
 268:/usr/lib/avr/include/avr/power.h ****     <td>power_spid_enable()</td>
 269:/usr/lib/avr/include/avr/power.h ****     <td>Enable the SPI module on PortD</td>
 270:/usr/lib/avr/include/avr/power.h ****   </tr>
 271:/usr/lib/avr/include/avr/power.h **** 
 272:/usr/lib/avr/include/avr/power.h ****   <tr>
 273:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_disable()</td>
 274:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortC</td>
 275:/usr/lib/avr/include/avr/power.h ****   </tr>
 276:/usr/lib/avr/include/avr/power.h **** 
 277:/usr/lib/avr/include/avr/power.h ****   <tr>
 278:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0c_enable()</td>
 279:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortC</td>
 280:/usr/lib/avr/include/avr/power.h ****   </tr>
 281:/usr/lib/avr/include/avr/power.h **** 
 282:/usr/lib/avr/include/avr/power.h ****   <tr>
 283:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_disable()</td>
 284:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortD</td>
 285:/usr/lib/avr/include/avr/power.h ****   </tr>
 286:/usr/lib/avr/include/avr/power.h **** 
 287:/usr/lib/avr/include/avr/power.h ****   <tr>
 288:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0d_enable()</td>
 289:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortD</td>
 290:/usr/lib/avr/include/avr/power.h ****   </tr>
 291:/usr/lib/avr/include/avr/power.h **** 
 292:/usr/lib/avr/include/avr/power.h ****   <tr>
 293:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_disable()</td>
 294:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortE</td>
 295:/usr/lib/avr/include/avr/power.h ****   </tr>
 296:/usr/lib/avr/include/avr/power.h **** 
 297:/usr/lib/avr/include/avr/power.h ****   <tr>
 298:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0e_enable()</td>
 299:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortE</td>
 300:/usr/lib/avr/include/avr/power.h ****   </tr>
 301:/usr/lib/avr/include/avr/power.h **** 
 302:/usr/lib/avr/include/avr/power.h ****   <tr>
 303:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_disable()</td>
 304:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC0 module on PortF</td>
 305:/usr/lib/avr/include/avr/power.h ****   </tr>
 306:/usr/lib/avr/include/avr/power.h **** 
 307:/usr/lib/avr/include/avr/power.h ****   <tr>
 308:/usr/lib/avr/include/avr/power.h ****     <td>power_tc0f_enable()</td>
 309:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC0 module on PortF</td>
 310:/usr/lib/avr/include/avr/power.h ****   </tr>
 311:/usr/lib/avr/include/avr/power.h **** 
 312:/usr/lib/avr/include/avr/power.h ****   <tr>
 313:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_disable()</td>
 314:/usr/lib/avr/include/avr/power.h ****     <td>Disable the TC1 module on PortC</td>
 315:/usr/lib/avr/include/avr/power.h ****   </tr>
 316:/usr/lib/avr/include/avr/power.h **** 
 317:/usr/lib/avr/include/avr/power.h ****   <tr>
 318:/usr/lib/avr/include/avr/power.h ****     <td>power_tc1c_enable()</td>
 319:/usr/lib/avr/include/avr/power.h ****     <td>Enable the TC1 module on PortC</td>
 320:/usr/lib/avr/include/avr/power.h ****   </tr>
 321:/usr/lib/avr/include/avr/power.h **** 
 322:/usr/lib/avr/include/avr/power.h ****   <tr>
 323:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_disable()</td>
 324:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortC</td>
 325:/usr/lib/avr/include/avr/power.h ****   </tr>
 326:/usr/lib/avr/include/avr/power.h **** 
 327:/usr/lib/avr/include/avr/power.h ****   <tr>
 328:/usr/lib/avr/include/avr/power.h ****     <td>power_twic_enable()</td>
 329:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortC</td>
 330:/usr/lib/avr/include/avr/power.h ****   </tr>
 331:/usr/lib/avr/include/avr/power.h **** 
 332:/usr/lib/avr/include/avr/power.h ****   <tr>
 333:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_disable()</td>
 334:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module on PortE</td>
 335:/usr/lib/avr/include/avr/power.h ****   </tr>
 336:/usr/lib/avr/include/avr/power.h **** 
 337:/usr/lib/avr/include/avr/power.h ****   <tr>
 338:/usr/lib/avr/include/avr/power.h ****     <td>power_twie_enable()</td>
 339:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module on PortE</td>
 340:/usr/lib/avr/include/avr/power.h ****   </tr>
 341:/usr/lib/avr/include/avr/power.h **** 
 342:/usr/lib/avr/include/avr/power.h ****   <tr>
 343:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 344:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 345:/usr/lib/avr/include/avr/power.h ****   </tr>
 346:/usr/lib/avr/include/avr/power.h **** 
 347:/usr/lib/avr/include/avr/power.h ****   <tr>
 348:/usr/lib/avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 349:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 350:/usr/lib/avr/include/avr/power.h ****   </tr>
 351:/usr/lib/avr/include/avr/power.h **** 
 352:/usr/lib/avr/include/avr/power.h ****   <tr>
 353:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 354:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 355:/usr/lib/avr/include/avr/power.h ****   </tr>
 356:/usr/lib/avr/include/avr/power.h **** 
 357:/usr/lib/avr/include/avr/power.h ****   <tr>
 358:/usr/lib/avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 359:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 360:/usr/lib/avr/include/avr/power.h ****   </tr>
 361:/usr/lib/avr/include/avr/power.h **** 
 362:/usr/lib/avr/include/avr/power.h ****   <tr>
 363:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 364:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 365:/usr/lib/avr/include/avr/power.h ****   </tr>
 366:/usr/lib/avr/include/avr/power.h **** 
 367:/usr/lib/avr/include/avr/power.h ****   <tr>
 368:/usr/lib/avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 369:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 370:/usr/lib/avr/include/avr/power.h ****   </tr>
 371:/usr/lib/avr/include/avr/power.h **** 
 372:/usr/lib/avr/include/avr/power.h ****   <tr>
 373:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 374:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 375:/usr/lib/avr/include/avr/power.h ****   </tr>
 376:/usr/lib/avr/include/avr/power.h **** 
 377:/usr/lib/avr/include/avr/power.h ****   <tr>
 378:/usr/lib/avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 379:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 380:/usr/lib/avr/include/avr/power.h ****   </tr>
 381:/usr/lib/avr/include/avr/power.h **** 
 382:/usr/lib/avr/include/avr/power.h ****   <tr>
 383:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 384:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 385:/usr/lib/avr/include/avr/power.h ****   </tr>
 386:/usr/lib/avr/include/avr/power.h **** 
 387:/usr/lib/avr/include/avr/power.h ****   <tr>
 388:/usr/lib/avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 389:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 390:/usr/lib/avr/include/avr/power.h ****   </tr>
 391:/usr/lib/avr/include/avr/power.h **** 
 392:/usr/lib/avr/include/avr/power.h ****   <tr>
 393:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 394:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 395:/usr/lib/avr/include/avr/power.h ****   </tr>
 396:/usr/lib/avr/include/avr/power.h **** 
 397:/usr/lib/avr/include/avr/power.h ****   <tr>
 398:/usr/lib/avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 399:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 400:/usr/lib/avr/include/avr/power.h ****   </tr>
 401:/usr/lib/avr/include/avr/power.h **** 
 402:/usr/lib/avr/include/avr/power.h ****   <tr>
 403:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 404:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 405:/usr/lib/avr/include/avr/power.h ****   </tr>
 406:/usr/lib/avr/include/avr/power.h **** 
 407:/usr/lib/avr/include/avr/power.h ****   <tr>
 408:/usr/lib/avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 409:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 410:/usr/lib/avr/include/avr/power.h ****   </tr>
 411:/usr/lib/avr/include/avr/power.h **** 
 412:/usr/lib/avr/include/avr/power.h ****   <tr>
 413:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 414:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 415:/usr/lib/avr/include/avr/power.h ****   </tr>
 416:/usr/lib/avr/include/avr/power.h **** 
 417:/usr/lib/avr/include/avr/power.h ****   <tr>
 418:/usr/lib/avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 419:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 420:/usr/lib/avr/include/avr/power.h ****   </tr>
 421:/usr/lib/avr/include/avr/power.h **** 
 422:/usr/lib/avr/include/avr/power.h ****   <tr>
 423:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 424:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 425:/usr/lib/avr/include/avr/power.h ****   </tr>
 426:/usr/lib/avr/include/avr/power.h **** 
 427:/usr/lib/avr/include/avr/power.h ****   <tr>
 428:/usr/lib/avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 429:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 430:/usr/lib/avr/include/avr/power.h ****   </tr>
 431:/usr/lib/avr/include/avr/power.h **** 
 432:/usr/lib/avr/include/avr/power.h ****   <tr>
 433:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 434:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 435:/usr/lib/avr/include/avr/power.h ****   </tr>
 436:/usr/lib/avr/include/avr/power.h **** 
 437:/usr/lib/avr/include/avr/power.h ****   <tr>
 438:/usr/lib/avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 439:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 440:/usr/lib/avr/include/avr/power.h ****   </tr>
 441:/usr/lib/avr/include/avr/power.h **** 
 442:/usr/lib/avr/include/avr/power.h ****   <tr>
 443:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 444:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 445:/usr/lib/avr/include/avr/power.h ****   </tr>
 446:/usr/lib/avr/include/avr/power.h **** 
 447:/usr/lib/avr/include/avr/power.h ****   <tr>
 448:/usr/lib/avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 449:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 450:/usr/lib/avr/include/avr/power.h ****   </tr>
 451:/usr/lib/avr/include/avr/power.h **** 
 452:/usr/lib/avr/include/avr/power.h ****   <tr>
 453:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 454:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 455:/usr/lib/avr/include/avr/power.h ****   </tr>
 456:/usr/lib/avr/include/avr/power.h **** 
 457:/usr/lib/avr/include/avr/power.h ****   <tr>
 458:/usr/lib/avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 459:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 460:/usr/lib/avr/include/avr/power.h ****   </tr>
 461:/usr/lib/avr/include/avr/power.h **** 
 462:/usr/lib/avr/include/avr/power.h ****   <tr>
 463:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_disable()</td>
 464:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortC</td>
 465:/usr/lib/avr/include/avr/power.h ****   </tr>
 466:/usr/lib/avr/include/avr/power.h **** 
 467:/usr/lib/avr/include/avr/power.h ****   <tr>
 468:/usr/lib/avr/include/avr/power.h ****     <td>power_usartc0_enable()</td>
 469:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortC</td>
 470:/usr/lib/avr/include/avr/power.h ****   </tr>
 471:/usr/lib/avr/include/avr/power.h **** 
 472:/usr/lib/avr/include/avr/power.h ****   <tr>
 473:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_disable()</td>
 474:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortD</td>
 475:/usr/lib/avr/include/avr/power.h ****   </tr>
 476:/usr/lib/avr/include/avr/power.h **** 
 477:/usr/lib/avr/include/avr/power.h ****   <tr>
 478:/usr/lib/avr/include/avr/power.h ****     <td>power_usartd0_enable()</td>
 479:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortD</td>
 480:/usr/lib/avr/include/avr/power.h ****   </tr>
 481:/usr/lib/avr/include/avr/power.h **** 
 482:/usr/lib/avr/include/avr/power.h ****   <tr>
 483:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_disable()</td>
 484:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortE</td>
 485:/usr/lib/avr/include/avr/power.h ****   </tr>
 486:/usr/lib/avr/include/avr/power.h **** 
 487:/usr/lib/avr/include/avr/power.h ****   <tr>
 488:/usr/lib/avr/include/avr/power.h ****     <td>power_usarte0_enable()</td>
 489:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortE</td>
 490:/usr/lib/avr/include/avr/power.h ****   </tr>
 491:/usr/lib/avr/include/avr/power.h **** 
 492:/usr/lib/avr/include/avr/power.h ****   <tr>
 493:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_disable()</td>
 494:/usr/lib/avr/include/avr/power.h ****     <td> Disable the USART0 module on PortF</td>
 495:/usr/lib/avr/include/avr/power.h ****   </tr>
 496:/usr/lib/avr/include/avr/power.h **** 
 497:/usr/lib/avr/include/avr/power.h ****   <tr>
 498:/usr/lib/avr/include/avr/power.h ****     <td>power_usartf0_enable()</td>
 499:/usr/lib/avr/include/avr/power.h ****     <td> Enable the USART0 module on PortF</td>
 500:/usr/lib/avr/include/avr/power.h ****   </tr>
 501:/usr/lib/avr/include/avr/power.h **** 
 502:/usr/lib/avr/include/avr/power.h ****   <tr>
 503:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 504:/usr/lib/avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 505:/usr/lib/avr/include/avr/power.h ****   </tr>
 506:/usr/lib/avr/include/avr/power.h **** 
 507:/usr/lib/avr/include/avr/power.h ****   <tr>
 508:/usr/lib/avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 509:/usr/lib/avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 510:/usr/lib/avr/include/avr/power.h ****   </tr>
 511:/usr/lib/avr/include/avr/power.h **** 
 512:/usr/lib/avr/include/avr/power.h ****   <tr>
 513:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 514:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 515:/usr/lib/avr/include/avr/power.h ****   </tr>
 516:/usr/lib/avr/include/avr/power.h **** 
 517:/usr/lib/avr/include/avr/power.h ****   <tr>
 518:/usr/lib/avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 519:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 520:/usr/lib/avr/include/avr/power.h ****   </tr>
 521:/usr/lib/avr/include/avr/power.h **** 
 522:/usr/lib/avr/include/avr/power.h ****   <tr>
 523:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 524:/usr/lib/avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 525:/usr/lib/avr/include/avr/power.h ****   </tr>
 526:/usr/lib/avr/include/avr/power.h **** 
 527:/usr/lib/avr/include/avr/power.h ****   <tr>
 528:/usr/lib/avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 529:/usr/lib/avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 530:/usr/lib/avr/include/avr/power.h ****   </tr>
 531:/usr/lib/avr/include/avr/power.h **** 
 532:/usr/lib/avr/include/avr/power.h ****   <tr>
 533:/usr/lib/avr/include/avr/power.h ****     <td>power_all_enable()</td>
 534:/usr/lib/avr/include/avr/power.h ****     <td>Enable all modules.</td>
 535:/usr/lib/avr/include/avr/power.h ****   </tr>
 536:/usr/lib/avr/include/avr/power.h **** 
 537:/usr/lib/avr/include/avr/power.h ****   <tr>
 538:/usr/lib/avr/include/avr/power.h ****     <td>power_all_disable()</td>
 539:/usr/lib/avr/include/avr/power.h ****     <td>Disable all modules.</td>
 540:/usr/lib/avr/include/avr/power.h ****   </tr>
 541:/usr/lib/avr/include/avr/power.h **** </table>
 542:/usr/lib/avr/include/avr/power.h **** </center>
 543:/usr/lib/avr/include/avr/power.h **** </small>
 544:/usr/lib/avr/include/avr/power.h **** 
 545:/usr/lib/avr/include/avr/power.h **** @} */
 546:/usr/lib/avr/include/avr/power.h **** 
 547:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRADC)
 548:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 549:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 550:/usr/lib/avr/include/avr/power.h **** #endif
 551:/usr/lib/avr/include/avr/power.h **** 
 552:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRCAN)
 553:/usr/lib/avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
 554:/usr/lib/avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
 555:/usr/lib/avr/include/avr/power.h **** #endif
 556:/usr/lib/avr/include/avr/power.h **** 
 557:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLCD)
 558:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 559:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 560:/usr/lib/avr/include/avr/power.h **** #endif
 561:/usr/lib/avr/include/avr/power.h **** 
 562:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRLIN)
 563:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
 564:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
 565:/usr/lib/avr/include/avr/power.h **** #endif
 566:/usr/lib/avr/include/avr/power.h **** 
 567:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC)
 568:/usr/lib/avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
 569:/usr/lib/avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
 570:/usr/lib/avr/include/avr/power.h **** #endif
 571:/usr/lib/avr/include/avr/power.h **** 
 572:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC0)
 573:/usr/lib/avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 574:/usr/lib/avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 575:/usr/lib/avr/include/avr/power.h **** #endif
 576:/usr/lib/avr/include/avr/power.h **** 
 577:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC1)
 578:/usr/lib/avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 579:/usr/lib/avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 580:/usr/lib/avr/include/avr/power.h **** #endif
 581:/usr/lib/avr/include/avr/power.h **** 
 582:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSC2)
 583:/usr/lib/avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 584:/usr/lib/avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 585:/usr/lib/avr/include/avr/power.h **** #endif
 586:/usr/lib/avr/include/avr/power.h **** 
 587:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRPSCR)
 588:/usr/lib/avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 589:/usr/lib/avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 590:/usr/lib/avr/include/avr/power.h **** #endif
 591:/usr/lib/avr/include/avr/power.h **** 
 592:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRSPI)
 593:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 594:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 595:/usr/lib/avr/include/avr/power.h **** #endif
 596:/usr/lib/avr/include/avr/power.h **** 
 597:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM0)
 598:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 599:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 600:/usr/lib/avr/include/avr/power.h **** #endif
 601:/usr/lib/avr/include/avr/power.h **** 
 602:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM1)
 603:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 604:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 605:/usr/lib/avr/include/avr/power.h **** #endif
 606:/usr/lib/avr/include/avr/power.h **** 
 607:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTIM2)
 608:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
 609:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
 610:/usr/lib/avr/include/avr/power.h **** #endif
 611:/usr/lib/avr/include/avr/power.h **** 
 612:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRTWI)
 613:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
 614:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
 615:/usr/lib/avr/include/avr/power.h **** #endif
 616:/usr/lib/avr/include/avr/power.h **** 
 617:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART)
 618:/usr/lib/avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 619:/usr/lib/avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 620:/usr/lib/avr/include/avr/power.h **** #endif
 621:/usr/lib/avr/include/avr/power.h **** 
 622:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART0)
 623:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 624:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 625:/usr/lib/avr/include/avr/power.h **** #endif
 626:/usr/lib/avr/include/avr/power.h **** 
 627:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSART1)
 628:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()   (PRR &= (uint8_t)~(1 << PRUSART1))
 629:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()  (PRR |= (uint8_t)(1 << PRUSART1))
 630:/usr/lib/avr/include/avr/power.h **** #endif
 631:/usr/lib/avr/include/avr/power.h **** 
 632:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR_PRUSI)
 633:/usr/lib/avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
 634:/usr/lib/avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
 635:/usr/lib/avr/include/avr/power.h **** #endif
 636:/usr/lib/avr/include/avr/power.h **** 
 637:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRADC)
 638:/usr/lib/avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 639:/usr/lib/avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 640:/usr/lib/avr/include/avr/power.h **** #endif
 641:/usr/lib/avr/include/avr/power.h **** 
 642:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCO)
 643:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_enable()     (PRR0 &= (uint8_t)~(1 << PRCO))
 644:/usr/lib/avr/include/avr/power.h **** #define power_clock_output_disable()    (PRR0 |= (uint8_t)(1 << PRCO))
 645:/usr/lib/avr/include/avr/power.h **** #endif
 646:/usr/lib/avr/include/avr/power.h **** 
 647:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCRC)
 648:/usr/lib/avr/include/avr/power.h **** #define power_crc_enable()              (PRR0 &= (uint8_t)~(1 << PRCRC))
 649:/usr/lib/avr/include/avr/power.h **** #define power_crc_disable()             (PRR0 |= (uint8_t)(1 << PRCRC))
 650:/usr/lib/avr/include/avr/power.h **** #endif
 651:/usr/lib/avr/include/avr/power.h **** 
 652:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRCU)
 653:/usr/lib/avr/include/avr/power.h **** #define power_crypto_enable()           (PRR0 &= (uint8_t)~(1 << PRCU))
 654:/usr/lib/avr/include/avr/power.h **** #define power_crypto_disable()          (PRR0 |= (uint8_t)(1 << PRCU))
 655:/usr/lib/avr/include/avr/power.h **** #endif
 656:/usr/lib/avr/include/avr/power.h **** 
 657:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRDS)
 658:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_enable()         (PRR0 &= (uint8_t)~(1 << PRDS))
 659:/usr/lib/avr/include/avr/power.h **** #define power_irdriver_disable()        (PRR0 |= (uint8_t)(1 << PRDS))
 660:/usr/lib/avr/include/avr/power.h **** #endif
 661:/usr/lib/avr/include/avr/power.h **** 
 662:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLFR)
 663:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR0 &= (uint8_t)~(1 << PRLFR))
 664:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR0 |= (uint8_t)(1 << PRLFR))
 665:/usr/lib/avr/include/avr/power.h **** #endif
 666:/usr/lib/avr/include/avr/power.h **** 
 667:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLFRS)
 668:/usr/lib/avr/include/avr/power.h **** #define power_lfrs_enable()             (PRR0 &= (uint8_t)~(1 << PRLFRS))
 669:/usr/lib/avr/include/avr/power.h **** #define power_lfrs_disable()            (PRR0 |= (uint8_t)(1 << PRLFRS))
 670:/usr/lib/avr/include/avr/power.h **** #endif
 671:/usr/lib/avr/include/avr/power.h **** 
 672:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRLIN)
 673:/usr/lib/avr/include/avr/power.h **** #define power_lin_enable()              (PRR0 &= (uint8_t)~(1 << PRLIN))
 674:/usr/lib/avr/include/avr/power.h **** #define power_lin_disable()             (PRR0 |= (uint8_t)(1 << PRLIN))
 675:/usr/lib/avr/include/avr/power.h **** #endif
 676:/usr/lib/avr/include/avr/power.h **** 
 677:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRPGA)
 678:/usr/lib/avr/include/avr/power.h **** #define power_pga_enable()              (PRR0 &= (uint8_t)~(1 << PRPGA))
 679:/usr/lib/avr/include/avr/power.h **** #define power_pga_disable()             (PRR0 |= (uint8_t)(1 << PRPGA))
 680:/usr/lib/avr/include/avr/power.h **** #endif
 681:/usr/lib/avr/include/avr/power.h **** 
 682:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRRXDC)
 683:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_enable()  (PRR0 &= (uint8_t)~(1 << PRRXDC))
 684:/usr/lib/avr/include/avr/power.h **** #define power_receive_dsp_control_disable() (PRR0 |= (uint8_t)(1 << PRRXDC))
 685:/usr/lib/avr/include/avr/power.h **** #endif
 686:/usr/lib/avr/include/avr/power.h **** 
 687:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRSPI)
 688:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()              (PRR0 &= (uint8_t)~(1 << PRSPI))
 689:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()             (PRR0 |= (uint8_t)(1 << PRSPI))
 690:/usr/lib/avr/include/avr/power.h **** #endif
 691:/usr/lib/avr/include/avr/power.h **** 
 692:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT0)
 693:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRT0))
 694:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRT0))
 695:/usr/lib/avr/include/avr/power.h **** #endif
 696:/usr/lib/avr/include/avr/power.h **** 
 697:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM0)
 698:/usr/lib/avr/include/avr/power.h **** #define power_timer0_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM0))
 699:/usr/lib/avr/include/avr/power.h **** #define power_timer0_disable()          (PRR0 |= (uint8_t)(1 << PRTIM0))
 700:/usr/lib/avr/include/avr/power.h **** #endif
 701:/usr/lib/avr/include/avr/power.h **** 
 702:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT1)
 703:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRT1))
 704:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRT1))
 705:/usr/lib/avr/include/avr/power.h **** #endif
 706:/usr/lib/avr/include/avr/power.h **** 
 707:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM1)
 708:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM1))
 709:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR0 |= (uint8_t)(1 << PRTIM1))
 710:/usr/lib/avr/include/avr/power.h **** #endif
 711:/usr/lib/avr/include/avr/power.h **** 
 712:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT2)
 713:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRT2))
 714:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRT2))
 715:/usr/lib/avr/include/avr/power.h **** #endif
 716:/usr/lib/avr/include/avr/power.h **** 
 717:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTIM2)
 718:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR0 &= (uint8_t)~(1 << PRTIM2))
 719:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR0 |= (uint8_t)(1 << PRTIM2))
 720:/usr/lib/avr/include/avr/power.h **** #endif
 721:/usr/lib/avr/include/avr/power.h **** 
 722:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRT3)
 723:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR0 &= (uint8_t)~(1 << PRT3))
 724:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR0 |= (uint8_t)(1 << PRT3))
 725:/usr/lib/avr/include/avr/power.h **** #endif
 726:/usr/lib/avr/include/avr/power.h **** 
 727:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTM)
 728:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_enable()   (PRR0 &= (uint8_t)~(1 << PRTM))
 729:/usr/lib/avr/include/avr/power.h **** #define power_timermodulator_disable()  (PRR0 |= (uint8_t)(1 << PRTM))
 730:/usr/lib/avr/include/avr/power.h **** #endif
 731:/usr/lib/avr/include/avr/power.h **** 
 732:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTWI)
 733:/usr/lib/avr/include/avr/power.h **** #define power_twi_enable()              (PRR0 &= (uint8_t)~(1 << PRTWI))
 734:/usr/lib/avr/include/avr/power.h **** #define power_twi_disable()             (PRR0 |= (uint8_t)(1 << PRTWI))
 735:/usr/lib/avr/include/avr/power.h **** #endif
 736:/usr/lib/avr/include/avr/power.h **** 
 737:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTWI1)
 738:/usr/lib/avr/include/avr/power.h **** #define power_twi1_enable()             (PRR0 &= (uint8_t)~(1 << PRTWI1))
 739:/usr/lib/avr/include/avr/power.h **** #define power_twi1_disable()            (PRR0 |= (uint8_t)(1 << PRTWI1))
 740:/usr/lib/avr/include/avr/power.h **** #endif
 741:/usr/lib/avr/include/avr/power.h **** 
 742:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRTXDC)
 743:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_enable()   (PRR0 &= (uint8_t)~(1 << PRTXDC))
 744:/usr/lib/avr/include/avr/power.h **** #define power_transmit_dsp_control_disable()  (PRR0 |= (uint8_t)(1 << PRTXDC))
 745:/usr/lib/avr/include/avr/power.h **** #endif
 746:/usr/lib/avr/include/avr/power.h **** 
 747:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART0)
 748:/usr/lib/avr/include/avr/power.h **** #define power_usart0_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART0))
 749:/usr/lib/avr/include/avr/power.h **** #define power_usart0_disable()          (PRR0 |= (uint8_t)(1 << PRUSART0))
 750:/usr/lib/avr/include/avr/power.h **** #endif
 751:/usr/lib/avr/include/avr/power.h **** 
 752:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRUSART1)
 753:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR0 &= (uint8_t)~(1 << PRUSART1))
 754:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR0 |= (uint8_t)(1 << PRUSART1))
 755:/usr/lib/avr/include/avr/power.h **** #endif
 756:/usr/lib/avr/include/avr/power.h **** 
 757:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVADC)
 758:/usr/lib/avr/include/avr/power.h **** #define power_vadc_enable()             (PRR0 &= (uint8_t)~(1 << PRVADC))
 759:/usr/lib/avr/include/avr/power.h **** #define power_vadc_disable()            (PRR0 |= (uint8_t)(1 << PRVADC))
 760:/usr/lib/avr/include/avr/power.h **** #endif
 761:/usr/lib/avr/include/avr/power.h **** 
 762:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVM)
 763:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_enable()  (PRR0 &= (uint8_t)~(1 << PRVM))
 764:/usr/lib/avr/include/avr/power.h **** #define power_voltage_monitor_disable() (PRR0 |= (uint8_t)(1 << PRVM))
 765:/usr/lib/avr/include/avr/power.h **** #endif
 766:/usr/lib/avr/include/avr/power.h **** 
 767:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR0_PRVRM)
 768:/usr/lib/avr/include/avr/power.h **** #define power_vrm_enable()              (PRR0 &= (uint8_t)~(1 << PRVRM))
 769:/usr/lib/avr/include/avr/power.h **** #define power_vrm_disable()             (PRR0 |= (uint8_t)(1 << PRVRM))
 770:/usr/lib/avr/include/avr/power.h **** #endif
 771:/usr/lib/avr/include/avr/power.h **** 
 772:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRAES)
 773:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PRR1 &= (uint8_t)~(1 << PRAES))
 774:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PRR1 |= (uint8_t)(1 << PRAES))
 775:/usr/lib/avr/include/avr/power.h **** #endif
 776:/usr/lib/avr/include/avr/power.h **** 
 777:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRCI)
 778:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_enable()       (PRR1 &= (uint8_t)~(1 << PRCI))
 779:/usr/lib/avr/include/avr/power.h **** #define power_cinterface_disable()      (PRR1 |= (uint8_t)(1 << PRCI))
 780:/usr/lib/avr/include/avr/power.h **** #endif
 781:/usr/lib/avr/include/avr/power.h **** 
 782:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRHSSPI)
 783:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_enable()            (PRR1 &= (uint8_t)~(1 << PRHSSPI))
 784:/usr/lib/avr/include/avr/power.h **** #define power_hsspi_disable()           (PRR1 |= (uint8_t)(1 << PRHSSPI))
 785:/usr/lib/avr/include/avr/power.h **** #endif
 786:/usr/lib/avr/include/avr/power.h **** 
 787:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRKB)
 788:/usr/lib/avr/include/avr/power.h **** #define power_kb_enable()               (PRR1 &= (uint8_t)~(1 << PRKB))
 789:/usr/lib/avr/include/avr/power.h **** #define power_kb_disable()              (PRR1 |= (uint8_t)(1 << PRKB))
 790:/usr/lib/avr/include/avr/power.h **** #endif
 791:/usr/lib/avr/include/avr/power.h **** 
 792:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRLFPH)
 793:/usr/lib/avr/include/avr/power.h **** #define power_lfph_enable()             (PRR1 &= (uint8_t)~(1 << PRLFPH))
 794:/usr/lib/avr/include/avr/power.h **** #define power_lfph_disable()            (PRR1 |= (uint8_t)(1 << PRLFPH))
 795:/usr/lib/avr/include/avr/power.h **** #endif
 796:/usr/lib/avr/include/avr/power.h **** 
 797:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRLFR)
 798:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_enable()       (PRR1 &= (uint8_t)~(1 << PRLFR))            
 799:/usr/lib/avr/include/avr/power.h **** #define power_lfreceiver_disable()      (PRR1 |= (uint8_t)(1 << PRLFR))            
 800:/usr/lib/avr/include/avr/power.h **** #endif
 801:/usr/lib/avr/include/avr/power.h **** 
 802:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRLFTP)
 803:/usr/lib/avr/include/avr/power.h **** #define power_lftp_enable()             (PRR1 &= (uint8_t)~(1 << PRLFTP))
 804:/usr/lib/avr/include/avr/power.h **** #define power_lftp_disable()            (PRR1 |= (uint8_t)(1 << PRLFTP))
 805:/usr/lib/avr/include/avr/power.h **** #endif
 806:/usr/lib/avr/include/avr/power.h **** 
 807:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRSCI)
 808:/usr/lib/avr/include/avr/power.h **** #define power_sci_enable()              (PRR1 &= (uint8_t)~(1 << PRSCI))
 809:/usr/lib/avr/include/avr/power.h **** #define power_sci_disable()             (PRR1 |= (uint8_t)(1 << PRSCI))
 810:/usr/lib/avr/include/avr/power.h **** #endif
 811:/usr/lib/avr/include/avr/power.h **** 
 812:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRSPI)
 813:/usr/lib/avr/include/avr/power.h **** #define power_spi_enable()              (PRR1 &= (uint8_t)~(1 << PRSPI))
 814:/usr/lib/avr/include/avr/power.h **** #define power_spi_disable()             (PRR1 |= (uint8_t)(1 << PRSPI))
 815:/usr/lib/avr/include/avr/power.h **** #endif
 816:/usr/lib/avr/include/avr/power.h **** 
 817:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT1)
 818:/usr/lib/avr/include/avr/power.h **** #define power_timer1_enable()           (PRR1 &= (uint8_t)~(1 << PRT1))
 819:/usr/lib/avr/include/avr/power.h **** #define power_timer1_disable()          (PRR1 |= (uint8_t)(1 << PRT1))
 820:/usr/lib/avr/include/avr/power.h **** #endif
 821:/usr/lib/avr/include/avr/power.h **** 
 822:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT2)
 823:/usr/lib/avr/include/avr/power.h **** #define power_timer2_enable()           (PRR1 &= (uint8_t)~(1 << PRT2))
 824:/usr/lib/avr/include/avr/power.h **** #define power_timer2_disable()          (PRR1 |= (uint8_t)(1 << PRT2))
 825:/usr/lib/avr/include/avr/power.h **** #endif
 826:/usr/lib/avr/include/avr/power.h **** 
 827:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT3)
 828:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRT3))
 829:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRT3))
 830:/usr/lib/avr/include/avr/power.h **** #endif
 831:/usr/lib/avr/include/avr/power.h **** 
 832:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT4)
 833:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRT4))
 834:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRT4))
 835:/usr/lib/avr/include/avr/power.h **** #endif
 836:/usr/lib/avr/include/avr/power.h **** 
 837:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRT5)
 838:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRT5))
 839:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRT5))
 840:/usr/lib/avr/include/avr/power.h **** #endif
 841:/usr/lib/avr/include/avr/power.h **** 
 842:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM3)
 843:/usr/lib/avr/include/avr/power.h **** #define power_timer3_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM3))
 844:/usr/lib/avr/include/avr/power.h **** #define power_timer3_disable()          (PRR1 |= (uint8_t)(1 << PRTIM3))
 845:/usr/lib/avr/include/avr/power.h **** #endif
 846:/usr/lib/avr/include/avr/power.h **** 
 847:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM4)
 848:/usr/lib/avr/include/avr/power.h **** #define power_timer4_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM4))
 849:/usr/lib/avr/include/avr/power.h **** #define power_timer4_disable()          (PRR1 |= (uint8_t)(1 << PRTIM4))
 850:/usr/lib/avr/include/avr/power.h **** #endif
 851:/usr/lib/avr/include/avr/power.h **** 
 852:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTIM5)
 853:/usr/lib/avr/include/avr/power.h **** #define power_timer5_enable()           (PRR1 &= (uint8_t)~(1 << PRTIM5))
 854:/usr/lib/avr/include/avr/power.h **** #define power_timer5_disable()          (PRR1 |= (uint8_t)(1 << PRTIM5))
 855:/usr/lib/avr/include/avr/power.h **** #endif
 856:/usr/lib/avr/include/avr/power.h **** 
 857:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRTRX24)
 858:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_enable()      (PRR1 &= (uint8_t)~(1 << PRTRX24))
 859:/usr/lib/avr/include/avr/power.h **** #define power_transceiver_disable()     (PRR1 |= (uint8_t)(1 << PRTRX24))
 860:/usr/lib/avr/include/avr/power.h **** #endif
 861:/usr/lib/avr/include/avr/power.h **** 
 862:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART1)
 863:/usr/lib/avr/include/avr/power.h **** #define power_usart1_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART1))
 864:/usr/lib/avr/include/avr/power.h **** #define power_usart1_disable()          (PRR1 |= (uint8_t)(1 << PRUSART1))
 865:/usr/lib/avr/include/avr/power.h **** #endif
 866:/usr/lib/avr/include/avr/power.h **** 
 867:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART2)
 868:/usr/lib/avr/include/avr/power.h **** #define power_usart2_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART2))
 869:/usr/lib/avr/include/avr/power.h **** #define power_usart2_disable()          (PRR1 |= (uint8_t)(1 << PRUSART2))
 870:/usr/lib/avr/include/avr/power.h **** #endif
 871:/usr/lib/avr/include/avr/power.h **** 
 872:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSART3)
 873:/usr/lib/avr/include/avr/power.h **** #define power_usart3_enable()           (PRR1 &= (uint8_t)~(1 << PRUSART3))
 874:/usr/lib/avr/include/avr/power.h **** #define power_usart3_disable()          (PRR1 |= (uint8_t)(1 << PRUSART3))
 875:/usr/lib/avr/include/avr/power.h **** #endif
 876:/usr/lib/avr/include/avr/power.h **** 
 877:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSB)
 878:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PRR1 &= (uint8_t)~(1 << PRUSB))
 879:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PRR1 |= (uint8_t)(1 << PRUSB))
 880:/usr/lib/avr/include/avr/power.h **** #endif
 881:/usr/lib/avr/include/avr/power.h **** 
 882:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR1_PRUSBH)
 883:/usr/lib/avr/include/avr/power.h **** #define power_usbh_enable()             (PRR1 &= (uint8_t)~(1 << PRUSBH))
 884:/usr/lib/avr/include/avr/power.h **** #define power_usbh_disable()            (PRR1 |= (uint8_t)(1 << PRUSBH))
 885:/usr/lib/avr/include/avr/power.h **** #endif
 886:/usr/lib/avr/include/avr/power.h **** 
 887:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRDF)
 888:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_enable()        (PRR2 &= (uint8_t)~(1 << PRDF))
 889:/usr/lib/avr/include/avr/power.h **** #define power_data_fifo_disable()       (PRR2 |= (uint8_t)(1 << PRDF))
 890:/usr/lib/avr/include/avr/power.h **** #endif
 891:/usr/lib/avr/include/avr/power.h **** 
 892:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRIDS)
 893:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_enable()          (PRR2 &= (uint8_t)~(1 << PRIDS))
 894:/usr/lib/avr/include/avr/power.h **** #define power_id_scan_disable()         (PRR2 |= (uint8_t)(1 << PRIDS))
 895:/usr/lib/avr/include/avr/power.h **** #endif
 896:/usr/lib/avr/include/avr/power.h **** 
 897:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM0)
 898:/usr/lib/avr/include/avr/power.h **** #define power_ram0_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM0))
 899:/usr/lib/avr/include/avr/power.h **** #define power_ram0_disable()            (PRR2 |= (uint8_t)(1 << PRRAM0))
 900:/usr/lib/avr/include/avr/power.h **** #endif
 901:/usr/lib/avr/include/avr/power.h **** 
 902:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM1)
 903:/usr/lib/avr/include/avr/power.h **** #define power_ram1_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM1))
 904:/usr/lib/avr/include/avr/power.h **** #define power_ram1_disable()            (PRR2 |= (uint8_t)(1 << PRRAM1))
 905:/usr/lib/avr/include/avr/power.h **** #endif
 906:/usr/lib/avr/include/avr/power.h **** 
 907:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM2)
 908:/usr/lib/avr/include/avr/power.h **** #define power_ram2_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM2))
 909:/usr/lib/avr/include/avr/power.h **** #define power_ram2_disable()            (PRR2 |= (uint8_t)(1 << PRRAM2))
 910:/usr/lib/avr/include/avr/power.h **** #endif
 911:/usr/lib/avr/include/avr/power.h **** 
 912:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRAM3)
 913:/usr/lib/avr/include/avr/power.h **** #define power_ram3_enable()             (PRR2 &= (uint8_t)~(1 << PRRAM3))
 914:/usr/lib/avr/include/avr/power.h **** #define power_ram3_disable()            (PRR2 |= (uint8_t)(1 << PRRAM3))
 915:/usr/lib/avr/include/avr/power.h **** #endif
 916:/usr/lib/avr/include/avr/power.h **** 
 917:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRRS)
 918:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_enable()      (PRR2 &= (uint8_t)~(1 << PRRS))
 919:/usr/lib/avr/include/avr/power.h **** #define power_rssi_buffer_disable()     (PRR2 |= (uint8_t)(1 << PRRS))
 920:/usr/lib/avr/include/avr/power.h **** #endif
 921:/usr/lib/avr/include/avr/power.h **** 
 922:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSF)
 923:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_enable()       (PRR2 &= (uint8_t)~(1 << PRSF))
 924:/usr/lib/avr/include/avr/power.h **** #define power_preamble_rssi_fifo_disable()      (PRR2 |= (uint8_t)(1 << PRSF))
 925:/usr/lib/avr/include/avr/power.h **** #endif
 926:/usr/lib/avr/include/avr/power.h **** 
 927:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSPI2)
 928:/usr/lib/avr/include/avr/power.h **** #define power_spi2_enable()             (PRR2 &= (uint8_t)~(1 << PRSPI2))
 929:/usr/lib/avr/include/avr/power.h **** #define power_spi2_disable()            (PRR2 |= (uint8_t)(1 << PRSPI2))
 930:/usr/lib/avr/include/avr/power.h **** #endif
 931:/usr/lib/avr/include/avr/power.h **** 
 932:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRSSM)
 933:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_enable()  (PRR2 &= (uint8_t)~(1 << PRSSM))
 934:/usr/lib/avr/include/avr/power.h **** #define power_sequencer_state_machine_disable() (PRR2 |= (uint8_t)(1 << PRSSM))
 935:/usr/lib/avr/include/avr/power.h **** #endif
 936:/usr/lib/avr/include/avr/power.h **** 
 937:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRTM)
 938:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_enable()     (PRR2 &= (uint8_t)~(1 << PRTM))
 939:/usr/lib/avr/include/avr/power.h **** #define power_tx_modulator_disable()    (PRR2 |= (uint8_t)(1 << PRTM))
 940:/usr/lib/avr/include/avr/power.h **** #endif
 941:/usr/lib/avr/include/avr/power.h **** 
 942:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRTWI2)
 943:/usr/lib/avr/include/avr/power.h **** #define power_twi2_enable()             (PRR2 &= (uint8_t)~(1 << PRTWI2))
 944:/usr/lib/avr/include/avr/power.h **** #define power_twi2_disable()            (PRR2 |= (uint8_t)(1 << PRTWI2))
 945:/usr/lib/avr/include/avr/power.h **** #endif
 946:/usr/lib/avr/include/avr/power.h **** 
 947:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXA)
 948:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_enable()      (PRR2 &= (uint8_t)~(1 << PRXA))
 949:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_A_disable()     (PRR2 |= (uint8_t)(1 << PRXA))
 950:/usr/lib/avr/include/avr/power.h **** #endif
 951:/usr/lib/avr/include/avr/power.h **** 
 952:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRR2_PRXB)
 953:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_enable()      (PRR2 &= (uint8_t)~(1 << PRXB))
 954:/usr/lib/avr/include/avr/power.h **** #define power_rx_buffer_B_disable()     (PRR2 |= (uint8_t)(1 << PRXB))
 955:/usr/lib/avr/include/avr/power.h **** #endif
 956:/usr/lib/avr/include/avr/power.h **** 
 957:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_AES)
 958:/usr/lib/avr/include/avr/power.h **** #define power_aes_enable()              (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 959:/usr/lib/avr/include/avr/power.h **** #define power_aes_disable()             (PR_PRGEN |= (uint8_t)PR_AES_bm)
 960:/usr/lib/avr/include/avr/power.h **** #endif
 961:/usr/lib/avr/include/avr/power.h **** 
 962:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_DMA)
 963:/usr/lib/avr/include/avr/power.h **** #define power_dma_enable()              (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 964:/usr/lib/avr/include/avr/power.h **** #define power_dma_disable()             (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 965:/usr/lib/avr/include/avr/power.h **** #endif
 966:/usr/lib/avr/include/avr/power.h **** 
 967:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EBI)
 968:/usr/lib/avr/include/avr/power.h **** #define power_ebi_enable()              (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 969:/usr/lib/avr/include/avr/power.h **** #define power_ebi_disable()             (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 970:/usr/lib/avr/include/avr/power.h **** #endif
 971:/usr/lib/avr/include/avr/power.h **** 
 972:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EDMA)
 973:/usr/lib/avr/include/avr/power.h **** #define power_edma_enable()             (PR_PRGEN &= (uint8_t)~(PR_EDMA_bm))
 974:/usr/lib/avr/include/avr/power.h **** #define power_edma_disable()            (PR_PRGEN |= (uint8_t)PR_EDMA_bm)
 975:/usr/lib/avr/include/avr/power.h **** #endif
 976:/usr/lib/avr/include/avr/power.h **** 
 977:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_EVSYS)
 978:/usr/lib/avr/include/avr/power.h **** #define power_evsys_enable()            (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 979:/usr/lib/avr/include/avr/power.h **** #define power_evsys_disable()           (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 980:/usr/lib/avr/include/avr/power.h **** #endif
 981:/usr/lib/avr/include/avr/power.h **** 
 982:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_LCD)
 983:/usr/lib/avr/include/avr/power.h **** #define power_lcd_enable()              (PR_PRGEN &= (uint8_t)~(PR_LCD_bm))
 984:/usr/lib/avr/include/avr/power.h **** #define power_lcd_disable()             (PR_PRGEN |= (uint8_t)PR_LCD_bm)
 985:/usr/lib/avr/include/avr/power.h **** #endif
 986:/usr/lib/avr/include/avr/power.h **** 
 987:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_RTC)
 988:/usr/lib/avr/include/avr/power.h **** #define power_rtc_enable()              (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 989:/usr/lib/avr/include/avr/power.h **** #define power_rtc_disable()             (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 990:/usr/lib/avr/include/avr/power.h **** #endif
 991:/usr/lib/avr/include/avr/power.h **** 
 992:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_USB)
 993:/usr/lib/avr/include/avr/power.h **** #define power_usb_enable()              (PR_PRGEN &= (uint8_t)~(PR_USB_bm))
 994:/usr/lib/avr/include/avr/power.h **** #define power_usb_disable()             (PR_PRGEN &= (uint8_t)(PR_USB_bm))
 995:/usr/lib/avr/include/avr/power.h **** #endif
 996:/usr/lib/avr/include/avr/power.h **** 
 997:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRGEN_XCL)
 998:/usr/lib/avr/include/avr/power.h **** #define power_xcl_enable()              (PR_PRGEN &= (uint8_t)~(PR_XCL_bm))
 999:/usr/lib/avr/include/avr/power.h **** #define power_xcl_disable()             (PR_PRGEN |= (uint8_t)PR_XCL_bm)
1000:/usr/lib/avr/include/avr/power.h **** #endif
1001:/usr/lib/avr/include/avr/power.h **** 
1002:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_AC)
1003:/usr/lib/avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
1004:/usr/lib/avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
1005:/usr/lib/avr/include/avr/power.h **** #endif
1006:/usr/lib/avr/include/avr/power.h **** 
1007:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_ADC)
1008:/usr/lib/avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
1009:/usr/lib/avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
1010:/usr/lib/avr/include/avr/power.h **** #endif
1011:/usr/lib/avr/include/avr/power.h **** 
1012:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPA_DAC)
1013:/usr/lib/avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
1014:/usr/lib/avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
1015:/usr/lib/avr/include/avr/power.h **** #endif
1016:/usr/lib/avr/include/avr/power.h **** 
1017:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_AC)
1018:/usr/lib/avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
1019:/usr/lib/avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
1020:/usr/lib/avr/include/avr/power.h **** #endif
1021:/usr/lib/avr/include/avr/power.h **** 
1022:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_ADC)
1023:/usr/lib/avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
1024:/usr/lib/avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
1025:/usr/lib/avr/include/avr/power.h **** #endif
1026:/usr/lib/avr/include/avr/power.h **** 
1027:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPB_DAC)
1028:/usr/lib/avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
1029:/usr/lib/avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
1030:/usr/lib/avr/include/avr/power.h **** #endif
1031:/usr/lib/avr/include/avr/power.h **** 
1032:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_HIRES)
1033:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
1034:/usr/lib/avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
1035:/usr/lib/avr/include/avr/power.h **** #endif
1036:/usr/lib/avr/include/avr/power.h **** 
1037:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_SPI)
1038:/usr/lib/avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
1039:/usr/lib/avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
1040:/usr/lib/avr/include/avr/power.h **** #endif
1041:/usr/lib/avr/include/avr/power.h **** 
1042:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC0)
1043:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
1044:/usr/lib/avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
1045:/usr/lib/avr/include/avr/power.h **** #endif
1046:/usr/lib/avr/include/avr/power.h **** 
1047:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC1)
1048:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
1049:/usr/lib/avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
1050:/usr/lib/avr/include/avr/power.h **** #endif
1051:/usr/lib/avr/include/avr/power.h **** 
1052:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC4)
1053:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC4_bm))
1054:/usr/lib/avr/include/avr/power.h **** #define power_tc4c_disable()    (PR_PRPC  |= (uint8_t)PR_TC4_bm)
1055:/usr/lib/avr/include/avr/power.h **** #endif
1056:/usr/lib/avr/include/avr/power.h **** 
1057:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TC5)
1058:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_enable()     (PR_PRPC  &= (uint8_t)~(PR_TC5_bm))
1059:/usr/lib/avr/include/avr/power.h **** #define power_tc5c_disable()    (PR_PRPC  |= (uint8_t)PR_TC5_bm)
1060:/usr/lib/avr/include/avr/power.h **** #endif
1061:/usr/lib/avr/include/avr/power.h **** 
1062:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_TWI)
1063:/usr/lib/avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
1064:/usr/lib/avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
1065:/usr/lib/avr/include/avr/power.h **** #endif
1066:/usr/lib/avr/include/avr/power.h **** 
1067:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART0)
1068:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
1069:/usr/lib/avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
1070:/usr/lib/avr/include/avr/power.h **** #endif
1071:/usr/lib/avr/include/avr/power.h **** 
1072:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPC_USART1)
1073:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
1074:/usr/lib/avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
1075:/usr/lib/avr/include/avr/power.h **** #endif
1076:/usr/lib/avr/include/avr/power.h **** 
1077:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_HIRES)
1078:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
1079:/usr/lib/avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
1080:/usr/lib/avr/include/avr/power.h **** #endif
1081:/usr/lib/avr/include/avr/power.h **** 
1082:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_SPI)
1083:/usr/lib/avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
1084:/usr/lib/avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
1085:/usr/lib/avr/include/avr/power.h **** #endif
1086:/usr/lib/avr/include/avr/power.h **** 
1087:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC0)
1088:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
1089:/usr/lib/avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
1090:/usr/lib/avr/include/avr/power.h **** #endif
1091:/usr/lib/avr/include/avr/power.h **** 
1092:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC1)
1093:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
1094:/usr/lib/avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
1095:/usr/lib/avr/include/avr/power.h **** #endif
1096:/usr/lib/avr/include/avr/power.h **** 
1097:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TC5)
1098:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_enable()     (PR_PRPD  &= (uint8_t)~(PR_TC5_bm))
1099:/usr/lib/avr/include/avr/power.h **** #define power_tc5d_disable()    (PR_PRPD  |= (uint8_t)PR_TC5_bm)
1100:/usr/lib/avr/include/avr/power.h **** #endif
1101:/usr/lib/avr/include/avr/power.h **** 
1102:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_TWI)
1103:/usr/lib/avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
1104:/usr/lib/avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
1105:/usr/lib/avr/include/avr/power.h **** #endif
1106:/usr/lib/avr/include/avr/power.h **** 
1107:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART0)
1108:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
1109:/usr/lib/avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
1110:/usr/lib/avr/include/avr/power.h **** #endif
1111:/usr/lib/avr/include/avr/power.h **** 
1112:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPD_USART1)
1113:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
1114:/usr/lib/avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
1115:/usr/lib/avr/include/avr/power.h **** #endif
1116:/usr/lib/avr/include/avr/power.h **** 
1117:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_HIRES)
1118:/usr/lib/avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
1119:/usr/lib/avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
1120:/usr/lib/avr/include/avr/power.h **** #endif
1121:/usr/lib/avr/include/avr/power.h **** 
1122:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_SPI)
1123:/usr/lib/avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
1124:/usr/lib/avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
1125:/usr/lib/avr/include/avr/power.h **** #endif
1126:/usr/lib/avr/include/avr/power.h **** 
1127:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC0)
1128:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
1129:/usr/lib/avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
1130:/usr/lib/avr/include/avr/power.h **** #endif
1131:/usr/lib/avr/include/avr/power.h **** 
1132:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TC1)
1133:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
1134:/usr/lib/avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
1135:/usr/lib/avr/include/avr/power.h **** #endif
1136:/usr/lib/avr/include/avr/power.h **** 
1137:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_TWI)
1138:/usr/lib/avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
1139:/usr/lib/avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
1140:/usr/lib/avr/include/avr/power.h **** #endif
1141:/usr/lib/avr/include/avr/power.h **** 
1142:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART0)
1143:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
1144:/usr/lib/avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
1145:/usr/lib/avr/include/avr/power.h **** #endif
1146:/usr/lib/avr/include/avr/power.h **** 
1147:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPE_USART1)
1148:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
1149:/usr/lib/avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
1150:/usr/lib/avr/include/avr/power.h **** #endif
1151:/usr/lib/avr/include/avr/power.h **** 
1152:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_HIRES)
1153:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
1154:/usr/lib/avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
1155:/usr/lib/avr/include/avr/power.h **** #endif
1156:/usr/lib/avr/include/avr/power.h **** 
1157:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_SPI)
1158:/usr/lib/avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
1159:/usr/lib/avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
1160:/usr/lib/avr/include/avr/power.h **** #endif
1161:/usr/lib/avr/include/avr/power.h **** 
1162:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC0)
1163:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
1164:/usr/lib/avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
1165:/usr/lib/avr/include/avr/power.h **** #endif
1166:/usr/lib/avr/include/avr/power.h **** 
1167:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TC1)
1168:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
1169:/usr/lib/avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
1170:/usr/lib/avr/include/avr/power.h **** #endif
1171:/usr/lib/avr/include/avr/power.h **** 
1172:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_TWI)
1173:/usr/lib/avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
1174:/usr/lib/avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
1175:/usr/lib/avr/include/avr/power.h **** #endif
1176:/usr/lib/avr/include/avr/power.h **** 
1177:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART0)
1178:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
1179:/usr/lib/avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
1180:/usr/lib/avr/include/avr/power.h **** #endif
1181:/usr/lib/avr/include/avr/power.h **** 
1182:/usr/lib/avr/include/avr/power.h **** #if defined(__AVR_HAVE_PRPF_USART1)
1183:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
1184:/usr/lib/avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
1185:/usr/lib/avr/include/avr/power.h **** #endif
1186:/usr/lib/avr/include/avr/power.h **** 
1187:/usr/lib/avr/include/avr/power.h **** static __inline void
1188:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1189:/usr/lib/avr/include/avr/power.h **** __power_all_enable()
1190:/usr/lib/avr/include/avr/power.h **** {
1191:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1192:/usr/lib/avr/include/avr/power.h ****     PRR &= (uint8_t)~(__AVR_HAVE_PRR);
1193:/usr/lib/avr/include/avr/power.h **** #endif
1194:/usr/lib/avr/include/avr/power.h **** 
1195:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR0
1196:/usr/lib/avr/include/avr/power.h ****     PRR0 &= (uint8_t)~(__AVR_HAVE_PRR0);
1197:/usr/lib/avr/include/avr/power.h **** #endif
1198:/usr/lib/avr/include/avr/power.h **** 
1199:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR1
1200:/usr/lib/avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(__AVR_HAVE_PRR1);
1201:/usr/lib/avr/include/avr/power.h **** #endif
1202:/usr/lib/avr/include/avr/power.h **** 
1203:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR2
1204:/usr/lib/avr/include/avr/power.h ****    PRR2 &= (uint8_t)~(__AVR_HAVE_PRR2);
1205:/usr/lib/avr/include/avr/power.h **** #endif
1206:/usr/lib/avr/include/avr/power.h **** 
1207:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRGEN
1208:/usr/lib/avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(__AVR_HAVE_PRGEN);
1209:/usr/lib/avr/include/avr/power.h **** #endif
1210:/usr/lib/avr/include/avr/power.h **** 
1211:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPA
1212:/usr/lib/avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(__AVR_HAVE_PRPA);
1213:/usr/lib/avr/include/avr/power.h **** #endif
1214:/usr/lib/avr/include/avr/power.h **** 
1215:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPB
1216:/usr/lib/avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(__AVR_HAVE_PRPB);
1217:/usr/lib/avr/include/avr/power.h **** #endif
1218:/usr/lib/avr/include/avr/power.h **** 
1219:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPC
1220:/usr/lib/avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(__AVR_HAVE_PRPC);
1221:/usr/lib/avr/include/avr/power.h **** #endif
1222:/usr/lib/avr/include/avr/power.h **** 
1223:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPD
1224:/usr/lib/avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(__AVR_HAVE_PRPD);
1225:/usr/lib/avr/include/avr/power.h **** #endif
1226:/usr/lib/avr/include/avr/power.h **** 
1227:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPE
1228:/usr/lib/avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(__AVR_HAVE_PRPE);
1229:/usr/lib/avr/include/avr/power.h **** #endif
1230:/usr/lib/avr/include/avr/power.h **** 
1231:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRPF
1232:/usr/lib/avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(__AVR_HAVE_PRPF);
1233:/usr/lib/avr/include/avr/power.h **** #endif
1234:/usr/lib/avr/include/avr/power.h **** }
1235:/usr/lib/avr/include/avr/power.h **** 
1236:/usr/lib/avr/include/avr/power.h **** static __inline void
1237:/usr/lib/avr/include/avr/power.h **** __attribute__ ((__always_inline__))
1238:/usr/lib/avr/include/avr/power.h **** __power_all_disable()
1239:/usr/lib/avr/include/avr/power.h **** {
1240:/usr/lib/avr/include/avr/power.h **** #ifdef __AVR_HAVE_PRR
1241:/usr/lib/avr/include/avr/power.h ****     PRR |= (uint8_t)(__AVR_HAVE_PRR);
  25               		.loc 2 1241 0
  26 0000 80B5      		in r24,0x20
  27 0002 8F60      		ori r24,lo8(15)
  28 0004 80BD      		out 0x20,r24
  29               	.LBE9:
  30               	.LBE8:
  11:main.c        ****    power_all_disable();
  12:main.c        ****    power_timer1_enable();
  31               		.loc 1 12 0
  32 0006 80B5      		in r24,0x20
  33 0008 877F      		andi r24,lo8(-9)
  34 000a 80BD      		out 0x20,r24
  13:main.c        ****     
  14:main.c        ****     /*for (uint8_t i=0;i<12;i++){
  15:main.c        ****         level[i]=63;
  16:main.c        ****     }*/
  17:main.c        ****     
  18:main.c        ****       // Set up Timer/Counter1 to multiplex the LEDs
  19:main.c        ****     TCCR1 = 1<<CTC1 | 2<<CS10;          // Divide by 2
  35               		.loc 1 19 0
  36 000c 82E8      		ldi r24,lo8(-126)
  37 000e 80BF      		out 0x30,r24
  20:main.c        ****     GTCCR = 0;                          // No PWM
  38               		.loc 1 20 0
  39 0010 1CBC      		out 0x2c,__zero_reg__
  21:main.c        ****     OCR1A = 0;
  40               		.loc 1 21 0
  41 0012 1EBC      		out 0x2e,__zero_reg__
  22:main.c        ****     OCR1C = 250-1;                      // 16kHz
  42               		.loc 1 22 0
  43 0014 89EF      		ldi r24,lo8(-7)
  44 0016 8DBD      		out 0x2d,r24
  23:main.c        ****     TIMSK = TIMSK | 1<<OCIE1A;          // Compare Match A interrupt
  45               		.loc 1 23 0
  46 0018 89B7      		in r24,0x39
  47 001a 8064      		ori r24,lo8(64)
  48 001c 89BF      		out 0x39,r24
  24:main.c        ****    sei();
  49               		.loc 1 24 0
  50               	/* #APP */
  51               	 ;  24 "main.c" 1
  52 001e 7894      		sei
  53               	 ;  0 "" 2
  54               	/* #NOAPP */
  55               	.L3:
  56               	.LBB10:
  25:main.c        ****     while(1){
  26:main.c        ****        /*for (uint8_t i=0;i<12;i++){
  27:main.c        ****         level[i]=63;
  28:main.c        ****         }
  29:main.c        ****         _delay_ms(1500);
  30:main.c        ****         
  31:main.c        ****        for (uint8_t i=0;i<12;i++){
  32:main.c        ****         level[i]=0;
  33:main.c        ****         }
  34:main.c        ****         _delay_ms(1500);*/
  35:main.c        ****         
  36:main.c        ****          uint8_t temp = level[11];
  57               		.loc 1 36 0
  58 0020 8091 0000 		lds r24,level+11
  59               	.LVL0:
  60 0024 E0E0      		ldi r30,lo8(level+11)
  61 0026 F0E0      		ldi r31,hi8(level+11)
  62               	.LVL1:
  63               	.L2:
  64               	.LBB11:
  37:main.c        ****         for (int i=11; i>0; i--) level[i] = level[i-1];
  65               		.loc 1 37 0 discriminator 3
  66 0028 9291      		ld r25,-Z
  67               	.LVL2:
  68 002a 9183      		std Z+1,r25
  69               	.LVL3:
  70 002c 20E0      		ldi r18,hi8(level)
  71 002e E030      		cpi r30,lo8(level)
  72 0030 F207      		cpc r31,r18
  73 0032 01F4      		brne .L2
  74               	.LBE11:
  38:main.c        ****         level[0] = temp;
  75               		.loc 1 38 0
  76 0034 8093 0000 		sts level,r24
  77               	.LVL4:
  78               	.LBB12:
  79               	.LBB13:
  80               		.file 3 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  81               		.loc 3 187 0
  82 0038 8FE7      		ldi r24,lo8(79999)
  83 003a 98E3      		ldi r25,hi8(79999)
  84 003c 21E0      		ldi r18,hlo8(79999)
  85 003e 8150      	1:	subi r24,1
  86 0040 9040      		sbci r25,0
  87 0042 2040      		sbci r18,0
  88 0044 01F4      		brne 1b
  89               	.LVL5:
  90 0046 00C0      		rjmp .
  91 0048 0000      		nop
  92 004a 00C0      		rjmp .L3
  93               	.LBE13:
  94               	.LBE12:
  95               	.LBE10:
  96               		.cfi_endproc
  97               	.LFE9:
  99               		.text
 100               	.global	__vector_3
 102               	__vector_3:
 103               	.LFB10:
  39:main.c        ****          _delay_ms(50);
  40:main.c        ****     }
  41:main.c        ****     return 0;
  42:main.c        **** }     
  43:main.c        **** 
  44:main.c        **** ISR(TIM1_COMPA_vect) {
 104               		.loc 1 44 0
 105               		.cfi_startproc
 106 0000 1F92      		push r1
 107               	.LCFI0:
 108               		.cfi_def_cfa_offset 3
 109               		.cfi_offset 1, -2
 110 0002 0F92      		push r0
 111               	.LCFI1:
 112               		.cfi_def_cfa_offset 4
 113               		.cfi_offset 0, -3
 114 0004 0FB6      		in r0,__SREG__
 115 0006 0F92      		push r0
 116 0008 1124      		clr __zero_reg__
 117 000a 2F93      		push r18
 118               	.LCFI2:
 119               		.cfi_def_cfa_offset 5
 120               		.cfi_offset 18, -4
 121 000c 3F93      		push r19
 122               	.LCFI3:
 123               		.cfi_def_cfa_offset 6
 124               		.cfi_offset 19, -5
 125 000e 4F93      		push r20
 126               	.LCFI4:
 127               		.cfi_def_cfa_offset 7
 128               		.cfi_offset 20, -6
 129 0010 5F93      		push r21
 130               	.LCFI5:
 131               		.cfi_def_cfa_offset 8
 132               		.cfi_offset 21, -7
 133 0012 6F93      		push r22
 134               	.LCFI6:
 135               		.cfi_def_cfa_offset 9
 136               		.cfi_offset 22, -8
 137 0014 7F93      		push r23
 138               	.LCFI7:
 139               		.cfi_def_cfa_offset 10
 140               		.cfi_offset 23, -9
 141 0016 8F93      		push r24
 142               	.LCFI8:
 143               		.cfi_def_cfa_offset 11
 144               		.cfi_offset 24, -10
 145 0018 9F93      		push r25
 146               	.LCFI9:
 147               		.cfi_def_cfa_offset 12
 148               		.cfi_offset 25, -11
 149 001a EF93      		push r30
 150               	.LCFI10:
 151               		.cfi_def_cfa_offset 13
 152               		.cfi_offset 30, -12
 153 001c FF93      		push r31
 154               	.LCFI11:
 155               		.cfi_def_cfa_offset 14
 156               		.cfi_offset 31, -13
 157               	/* prologue: Signal */
 158               	/* frame size = 0 */
 159               	/* stack size = 13 */
 160               	.L__stack_usage = 13
  45:main.c        ****   static uint8_t first, ramp, column, bits, colbit;
  46:main.c        ****   ramp = (ramp+1) & 0x3F;             // Count from 0 to 63
 161               		.loc 1 46 0
 162 001e 9091 0000 		lds r25,ramp.1635
 163 0022 9F5F      		subi r25,lo8(-(1))
 164 0024 9F73      		andi r25,lo8(63)
 165 0026 9093 0000 		sts ramp.1635,r25
  47:main.c        ****   if (ramp == 0) {
 166               		.loc 1 47 0
 167 002a 9111      		cpse r25,__zero_reg__
 168 002c 00C0      		rjmp .L7
  48:main.c        ****     bits = 0x07;                      // All on
 169               		.loc 1 48 0
 170 002e 87E0      		ldi r24,lo8(7)
 171 0030 8093 0000 		sts bits.1637,r24
  49:main.c        ****     column = (column + 1) & 0x03;
 172               		.loc 1 49 0
 173 0034 2091 0000 		lds r18,column.1636
 174 0038 2F5F      		subi r18,lo8(-(1))
 175 003a 2370      		andi r18,lo8(3)
 176 003c 2093 0000 		sts column.1636,r18
  50:main.c        ****     first = column * 3;               // First LED in this column
 177               		.loc 1 50 0
 178 0040 822F      		mov r24,r18
 179 0042 63E0      		ldi r22,lo8(3)
 180 0044 00D0      		rcall __mulqi3
 181 0046 8093 0000 		sts first.1634,r24
  51:main.c        ****     colbit = 1<<column;
 182               		.loc 1 51 0
 183 004a 41E0      		ldi r20,lo8(1)
 184 004c 50E0      		ldi r21,0
 185 004e BA01      		movw r22,r20
 186 0050 00C0      		rjmp 2f
 187               		1:
 188 0052 660F      		lsl r22
 189 0054 771F      		rol r23
 190               		2:
 191 0056 2A95      		dec r18
 192 0058 02F4      		brpl 1b
 193 005a 6093 0000 		sts colbit.1638,r22
 194               	.L7:
  52:main.c        ****   }
  53:main.c        ****   if (level[first] == ramp) bits = bits & 0x06;
 195               		.loc 1 53 0
 196 005e E091 0000 		lds r30,first.1634
 197 0062 F0E0      		ldi r31,0
 198 0064 E050      		subi r30,lo8(-(level))
 199 0066 F040      		sbci r31,hi8(-(level))
 200 0068 8081      		ld r24,Z
 201 006a 9813      		cpse r25,r24
 202 006c 00C0      		rjmp .L8
 203               		.loc 1 53 0 is_stmt 0 discriminator 1
 204 006e 8091 0000 		lds r24,bits.1637
 205 0072 8670      		andi r24,lo8(6)
 206 0074 8093 0000 		sts bits.1637,r24
 207               	.L8:
  54:main.c        ****   if (level[first+1] == ramp) bits = bits & 0x05;
 208               		.loc 1 54 0 is_stmt 1
 209 0078 8181      		ldd r24,Z+1
 210 007a 9813      		cpse r25,r24
 211 007c 00C0      		rjmp .L9
 212               		.loc 1 54 0 is_stmt 0 discriminator 1
 213 007e 8091 0000 		lds r24,bits.1637
 214 0082 8570      		andi r24,lo8(5)
 215 0084 8093 0000 		sts bits.1637,r24
 216               	.L9:
  55:main.c        ****   if (level[first+2] == ramp) bits = bits & 0x03;
 217               		.loc 1 55 0 is_stmt 1
 218 0088 8281      		ldd r24,Z+2
 219 008a 9813      		cpse r25,r24
 220 008c 00C0      		rjmp .L10
 221               		.loc 1 55 0 is_stmt 0 discriminator 1
 222 008e 8091 0000 		lds r24,bits.1637
 223 0092 8370      		andi r24,lo8(3)
 224 0094 8093 0000 		sts bits.1637,r24
 225               	.L10:
  56:main.c        ****   uint8_t mask = colbit - 1;
 226               		.loc 1 56 0 is_stmt 1
 227 0098 4091 0000 		lds r20,colbit.1638
 228 009c 6FEF      		ldi r22,lo8(-1)
 229 009e 640F      		add r22,r20
 230               	.LVL6:
  57:main.c        ****   uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 231               		.loc 1 57 0
 232 00a0 5091 0000 		lds r21,bits.1637
 233 00a4 862F      		mov r24,r22
 234 00a6 90E0      		ldi r25,0
 235 00a8 8095      		com r24
 236 00aa 9095      		com r25
 237 00ac 252F      		mov r18,r21
 238 00ae 30E0      		ldi r19,0
 239 00b0 8223      		and r24,r18
 240 00b2 9323      		and r25,r19
 241 00b4 880F      		lsl r24
 242 00b6 991F      		rol r25
 243 00b8 5623      		and r21,r22
 244 00ba 852B      		or r24,r21
 245               	.LVL7:
  58:main.c        ****   DDRB = (DDRB & 0xF0) | outputs | colbit;
 246               		.loc 1 58 0
 247 00bc 97B3      		in r25,0x17
 248 00be 907F      		andi r25,lo8(-16)
 249 00c0 492B      		or r20,r25
 250 00c2 482B      		or r20,r24
 251 00c4 47BB      		out 0x17,r20
  59:main.c        ****   PORTB = (PORTB & 0xF0) | outputs;
 252               		.loc 1 59 0
 253 00c6 98B3      		in r25,0x18
 254 00c8 907F      		andi r25,lo8(-16)
 255 00ca 892B      		or r24,r25
 256               	.LVL8:
 257 00cc 88BB      		out 0x18,r24
 258               	/* epilogue start */
  60:main.c        **** }
 259               		.loc 1 60 0
 260 00ce FF91      		pop r31
 261 00d0 EF91      		pop r30
 262 00d2 9F91      		pop r25
 263 00d4 8F91      		pop r24
 264 00d6 7F91      		pop r23
 265 00d8 6F91      		pop r22
 266               	.LVL9:
 267 00da 5F91      		pop r21
 268 00dc 4F91      		pop r20
 269 00de 3F91      		pop r19
 270 00e0 2F91      		pop r18
 271 00e2 0F90      		pop r0
 272 00e4 0FBE      		out __SREG__,r0
 273 00e6 0F90      		pop r0
 274 00e8 1F90      		pop r1
 275 00ea 1895      		reti
 276               		.cfi_endproc
 277               	.LFE10:
 279               		.local	colbit.1638
 280               		.comm	colbit.1638,1,1
 281               		.local	first.1634
 282               		.comm	first.1634,1,1
 283               		.local	column.1636
 284               		.comm	column.1636,1,1
 285               		.local	bits.1637
 286               		.comm	bits.1637,1,1
 287               		.local	ramp.1635
 288               		.comm	ramp.1635,1,1
 289               	.global	level
 290               		.data
 293               	level:
 294 0000 01        		.byte	1
 295 0001 01        		.byte	1
 296 0002 03        		.byte	3
 297 0003 07        		.byte	7
 298 0004 0F        		.byte	15
 299 0005 1F        		.byte	31
 300 0006 3F        		.byte	63
 301 0007 1F        		.byte	31
 302 0008 0F        		.byte	15
 303 0009 07        		.byte	7
 304 000a 03        		.byte	3
 305 000b 01        		.byte	1
 306               	.global	cnt
 307               		.section .bss
 310               	cnt:
 311 0000 0000      		.zero	2
 312               		.text
 313               	.Letext0:
 314               		.file 4 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNexVUQ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccNexVUQ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccNexVUQ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccNexVUQ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccNexVUQ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccNexVUQ.s:13     .text.startup:0000000000000000 main
     /tmp/ccNexVUQ.s:293    .data:0000000000000000 level
     /tmp/ccNexVUQ.s:102    .text:0000000000000000 __vector_3
     /tmp/ccNexVUQ.s:286    .bss:0000000000000006 ramp.1635
     /tmp/ccNexVUQ.s:284    .bss:0000000000000005 bits.1637
     /tmp/ccNexVUQ.s:282    .bss:0000000000000004 column.1636
     /tmp/ccNexVUQ.s:280    .bss:0000000000000003 first.1634
                             .bss:0000000000000002 colbit.1638
     /tmp/ccNexVUQ.s:310    .bss:0000000000000000 cnt

UNDEFINED SYMBOLS
__mulqi3
__do_copy_data
__do_clear_bss
