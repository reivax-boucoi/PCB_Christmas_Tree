
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800078  00800078  000002f4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c2  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c9  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b9  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d9  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000154  00000000  00000000  00001345  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	6e c0       	rjmp	.+220    	; 0xe4 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e4       	ldi	r30, 0x48	; 72
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a8 37       	cpi	r26, 0x78	; 120
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a8 e7       	ldi	r26, 0x78	; 120
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 38       	cpi	r26, 0x81	; 129
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	bf d0       	rcall	.+382    	; 0x1d0 <main>
  52:	f8 c0       	rjmp	.+496    	; 0x244 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_10>:
    uint16_t res=ADCL;
    res|=(ADCH<<8);
    blinkMode=2753/res-3;   //Vcc=1024*1.1/ADC
}*/

ISR(TIM0_COMPA_vect) {
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	2f 93       	push	r18
  62:	3f 93       	push	r19
  64:	8f 93       	push	r24
  66:	9f 93       	push	r25
  68:	ef 93       	push	r30
  6a:	ff 93       	push	r31
    cnt++;
  6c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <cnt>
  70:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <cnt+0x1>
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <cnt+0x1>
  7a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <cnt>
    if(cnt>11){
  7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <cnt>
  82:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <cnt+0x1>
  86:	0c 97       	sbiw	r24, 0x0c	; 12
  88:	50 f0       	brcs	.+20     	; 0x9e <__vector_10+0x48>
        cnt=0;
  8a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <cnt+0x1>
  8e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <cnt>
        pstate^=(1<<DEBUG_FLAG);
  92:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__data_end>
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	89 27       	eor	r24, r25
  9a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
        //if(pstate&(1<<DEBUG_FLAG))pstate|=(1<<ADC_FLAG);   
    }
    level[order[cnt]]=(cnt<=blinkMode)?63:0;
  9e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <cnt>
  a2:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <cnt+0x1>
  a6:	e0 5a       	subi	r30, 0xA0	; 160
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	e0 81       	ld	r30, Z
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <cnt>
  b2:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <cnt+0x1>
  b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <blinkMode>
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	82 17       	cp	r24, r18
  be:	93 07       	cpc	r25, r19
  c0:	10 f4       	brcc	.+4      	; 0xc6 <__vector_10+0x70>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <__vector_10+0x72>
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	e4 59       	subi	r30, 0x94	; 148
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	80 83       	st	Z, r24
    
}
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_3>:


ISR(TIM1_COMPA_vect) {
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
  static uint8_t first, ramp, column, bits, colbit;
  ramp = (ramp+1) & 0x3F;
 102:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <ramp.1638>
 106:	9f 5f       	subi	r25, 0xFF	; 255
 108:	9f 73       	andi	r25, 0x3F	; 63
 10a:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <ramp.1638>
  if (ramp == 0) {
 10e:	91 11       	cpse	r25, r1
 110:	18 c0       	rjmp	.+48     	; 0x142 <__vector_3+0x5e>
    bits = 0x07;
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <bits.1640>
    column = (column + 1) & 0x03;
 118:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <column.1639>
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	23 70       	andi	r18, 0x03	; 3
 120:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <column.1639>
    first = column * 3;
 124:	82 2f       	mov	r24, r18
 126:	63 e0       	ldi	r22, 0x03	; 3
 128:	84 d0       	rcall	.+264    	; 0x232 <__mulqi3>
 12a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <first.1637>
    colbit = 1<<column;
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	ba 01       	movw	r22, r20
 134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_3+0x56>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	2a 95       	dec	r18
 13c:	e2 f7       	brpl	.-8      	; 0x136 <__vector_3+0x52>
 13e:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <colbit.1641>
  }
  if (level[first] == ramp) bits = bits & 0x06;
 142:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <first.1637>
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e4 59       	subi	r30, 0x94	; 148
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 81       	ld	r24, Z
 14e:	98 13       	cpse	r25, r24
 150:	05 c0       	rjmp	.+10     	; 0x15c <__vector_3+0x78>
 152:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <bits.1640>
 156:	86 70       	andi	r24, 0x06	; 6
 158:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <bits.1640>
  if (level[first+1] == ramp) bits = bits & 0x05;
 15c:	81 81       	ldd	r24, Z+1	; 0x01
 15e:	98 13       	cpse	r25, r24
 160:	05 c0       	rjmp	.+10     	; 0x16c <__vector_3+0x88>
 162:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <bits.1640>
 166:	85 70       	andi	r24, 0x05	; 5
 168:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <bits.1640>
  if (level[first+2] == ramp) bits = bits & 0x03;
 16c:	82 81       	ldd	r24, Z+2	; 0x02
 16e:	98 13       	cpse	r25, r24
 170:	05 c0       	rjmp	.+10     	; 0x17c <__vector_3+0x98>
 172:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <bits.1640>
 176:	83 70       	andi	r24, 0x03	; 3
 178:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <bits.1640>
  uint8_t mask = colbit - 1;
 17c:	40 91 7c 00 	lds	r20, 0x007C	; 0x80007c <colbit.1641>
 180:	6f ef       	ldi	r22, 0xFF	; 255
 182:	64 0f       	add	r22, r20
  uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 184:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <bits.1640>
 188:	86 2f       	mov	r24, r22
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	80 95       	com	r24
 18e:	90 95       	com	r25
 190:	25 2f       	mov	r18, r21
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	82 23       	and	r24, r18
 196:	93 23       	and	r25, r19
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	56 23       	and	r21, r22
 19e:	85 2b       	or	r24, r21
  DDRB = (DDRB & 0xF0) | outputs | colbit;
 1a0:	97 b3       	in	r25, 0x17	; 23
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	49 2b       	or	r20, r25
 1a6:	48 2b       	or	r20, r24
 1a8:	47 bb       	out	0x17, r20	; 23
  PORTB = (PORTB & 0xF0) | outputs;
 1aa:	98 b3       	in	r25, 0x18	; 24
 1ac:	90 7f       	andi	r25, 0xF0	; 240
 1ae:	89 2b       	or	r24, r25
 1b0:	88 bb       	out	0x18, r24	; 24
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <main>:
uint8_t blinkMode = FADE;
uint8_t pstate=0;
int main(void){
      
    //Timer1 for LED charlieplexing
    TCCR1=(1<<CTC1)|(1<<CS10);        //Divide clock by 1, was 2<<CS10
 1d0:	81 e8       	ldi	r24, 0x81	; 129
 1d2:	80 bf       	out	0x30, r24	; 48
    GTCCR=0;                          //No PWM
 1d4:	1c bc       	out	0x2c, r1	; 44
    OCR1A=0;                          //No PWM
 1d6:	1e bc       	out	0x2e, r1	; 46
    OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
 1d8:	89 ef       	ldi	r24, 0xF9	; 249
 1da:	8d bd       	out	0x2d, r24	; 45
    TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
 1dc:	89 b7       	in	r24, 0x39	; 57
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	89 bf       	out	0x39, r24	; 57
    
    TCCR0A=(1<<WGM01);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	8a bd       	out	0x2a, r24	; 42
    OCR0A=255;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	89 bd       	out	0x29, r24	; 41
    TCCR0B=(1<<CS02)|(1<<CS00);
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	83 bf       	out	0x33, r24	; 51
    TIMSK|=(1<<OCIE0A);
 1ee:	89 b7       	in	r24, 0x39	; 57
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	89 bf       	out	0x39, r24	; 57
    /*
    ADMUX=(1<<MUX3)|(1<<MUX2);
    ADCSRA |= (1<<ADEN) | (1<<ADIE);
    */
    
    sei();                              //Enable interrupts
 1f4:	78 94       	sei
    while(1){
        
        if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
 1f6:	b4 9b       	sbis	0x16, 4	; 22
 1f8:	12 c0       	rjmp	.+36     	; 0x21e <main+0x4e>
 1fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 1fe:	80 ff       	sbrs	r24, 0
 200:	0e c0       	rjmp	.+28     	; 0x21e <main+0x4e>
            pstate&=~(1<<TOUCH_FLAG);
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
            blinkMode++;
 208:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <blinkMode>
 20c:	8f 5f       	subi	r24, 0xFF	; 255
            if(blinkMode>11)blinkMode=0;
 20e:	8c 30       	cpi	r24, 0x0C	; 12
 210:	18 f4       	brcc	.+6      	; 0x218 <main+0x48>
    sei();                              //Enable interrupts
    while(1){
        
        if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
            pstate&=~(1<<TOUCH_FLAG);
            blinkMode++;
 212:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <blinkMode>
 216:	ef cf       	rjmp	.-34     	; 0x1f6 <main+0x26>
            if(blinkMode>11)blinkMode=0;
 218:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <blinkMode>
 21c:	ec cf       	rjmp	.-40     	; 0x1f6 <main+0x26>
        }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 21e:	b4 99       	sbic	0x16, 4	; 22
 220:	ea cf       	rjmp	.-44     	; 0x1f6 <main+0x26>
 222:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 226:	80 fd       	sbrc	r24, 0
 228:	e6 cf       	rjmp	.-52     	; 0x1f6 <main+0x26>
            pstate|=(1<<TOUCH_FLAG);            
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 230:	e2 cf       	rjmp	.-60     	; 0x1f6 <main+0x26>

00000232 <__mulqi3>:
 232:	00 24       	eor	r0, r0

00000234 <__mulqi3_loop>:
 234:	80 fd       	sbrc	r24, 0
 236:	06 0e       	add	r0, r22
 238:	66 0f       	add	r22, r22
 23a:	11 f0       	breq	.+4      	; 0x240 <__mulqi3_exit>
 23c:	86 95       	lsr	r24
 23e:	d1 f7       	brne	.-12     	; 0x234 <__mulqi3_loop>

00000240 <__mulqi3_exit>:
 240:	80 2d       	mov	r24, r0
 242:	08 95       	ret

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
