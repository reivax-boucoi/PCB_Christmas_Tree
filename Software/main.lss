
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800070  00800070  00000346  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072a  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ab  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000225  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000347  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b2  00000000  00000000  000016b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	61 c0       	rjmp	.+194    	; 0xca <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 ea       	ldi	r30, 0xA2	; 162
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 37       	cpi	r26, 0x70	; 112
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e7       	ldi	r26, 0x70	; 112
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a9 38       	cpi	r26, 0x89	; 137
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	b2 d0       	rcall	.+356    	; 0x1b6 <main>
  52:	25 c1       	rjmp	.+586    	; 0x29e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <srand>:

static	long	randx;
static	char	randf;

void srand(unsigned x){
	randx = x;
  56:	a0 e0       	ldi	r26, 0x00	; 0
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <randx>
  5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <randx+0x1>
  62:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <randx+0x2>
  66:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <randx+0x3>
	randf = 1;
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <randf>
  70:	08 95       	ret

00000072 <rand>:
}

int rand(void){
	if(!randf)srand(1);
  72:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <randf>
  76:	81 11       	cpse	r24, r1
  78:	03 c0       	rjmp	.+6      	; 0x80 <rand+0xe>
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	eb df       	rcall	.-42     	; 0x56 <srand>
	return((int)((randx = randx*1103515245L + 12345)>>16) & 077777);
  80:	2d e6       	ldi	r18, 0x6D	; 109
  82:	3e e4       	ldi	r19, 0x4E	; 78
  84:	46 ec       	ldi	r20, 0xC6	; 198
  86:	51 e4       	ldi	r21, 0x41	; 65
  88:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <randx>
  8c:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <randx+0x1>
  90:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <randx+0x2>
  94:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <randx+0x3>
  98:	e9 d0       	rcall	.+466    	; 0x26c <__mulsi3>
  9a:	67 5c       	subi	r22, 0xC7	; 199
  9c:	7f 4c       	sbci	r23, 0xCF	; 207
  9e:	8f 4f       	sbci	r24, 0xFF	; 255
  a0:	9f 4f       	sbci	r25, 0xFF	; 255
  a2:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <randx>
  a6:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <randx+0x1>
  aa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <randx+0x2>
  ae:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <randx+0x3>
}
  b2:	9f 77       	andi	r25, 0x7F	; 127
  b4:	08 95       	ret

000000b6 <__vector_10>:
}*/
volatile uint8_t speed=4;
volatile uint8_t duty=3;
volatile uint8_t index=0;

ISR(TIM0_COMPA_vect) {
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
            break;
    }*/
 

    
}
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_3>:


ISR(TIM1_COMPA_vect) {
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
  static uint8_t first, ramp, column, bits, colbit;
  ramp = (ramp+1) & 0x3F;
  e8:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <ramp.1651>
  ec:	9f 5f       	subi	r25, 0xFF	; 255
  ee:	9f 73       	andi	r25, 0x3F	; 63
  f0:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <ramp.1651>
  if (ramp == 0) {
  f4:	91 11       	cpse	r25, r1
  f6:	18 c0       	rjmp	.+48     	; 0x128 <__vector_3+0x5e>
    bits = 0x07;
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <bits.1653>
    column = (column + 1) & 0x03;
  fe:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <column.1652>
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	23 70       	andi	r18, 0x03	; 3
 106:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <column.1652>
    first = column * 3;
 10a:	82 2f       	mov	r24, r18
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	a5 d0       	rcall	.+330    	; 0x25a <__mulqi3>
 110:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <first.1650>
    colbit = 1<<column;
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	ba 01       	movw	r22, r20
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__vector_3+0x56>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	2a 95       	dec	r18
 122:	e2 f7       	brpl	.-8      	; 0x11c <__vector_3+0x52>
 124:	60 93 73 00 	sts	0x0073, r22	; 0x800073 <colbit.1654>
  }
  if (level[first] == ramp) bits = bits & 0x06;
 128:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <first.1650>
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e3 58       	subi	r30, 0x83	; 131
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	80 81       	ld	r24, Z
 134:	98 13       	cpse	r25, r24
 136:	05 c0       	rjmp	.+10     	; 0x142 <__vector_3+0x78>
 138:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <bits.1653>
 13c:	86 70       	andi	r24, 0x06	; 6
 13e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <bits.1653>
  if (level[first+1] == ramp) bits = bits & 0x05;
 142:	81 81       	ldd	r24, Z+1	; 0x01
 144:	98 13       	cpse	r25, r24
 146:	05 c0       	rjmp	.+10     	; 0x152 <__vector_3+0x88>
 148:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <bits.1653>
 14c:	85 70       	andi	r24, 0x05	; 5
 14e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <bits.1653>
  if (level[first+2] == ramp) bits = bits & 0x03;
 152:	82 81       	ldd	r24, Z+2	; 0x02
 154:	98 13       	cpse	r25, r24
 156:	05 c0       	rjmp	.+10     	; 0x162 <__vector_3+0x98>
 158:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <bits.1653>
 15c:	83 70       	andi	r24, 0x03	; 3
 15e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <bits.1653>
  uint8_t mask = colbit - 1;
 162:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <colbit.1654>
 166:	6f ef       	ldi	r22, 0xFF	; 255
 168:	64 0f       	add	r22, r20
  uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 16a:	50 91 76 00 	lds	r21, 0x0076	; 0x800076 <bits.1653>
 16e:	86 2f       	mov	r24, r22
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	80 95       	com	r24
 174:	90 95       	com	r25
 176:	25 2f       	mov	r18, r21
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	82 23       	and	r24, r18
 17c:	93 23       	and	r25, r19
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	56 23       	and	r21, r22
 184:	85 2b       	or	r24, r21
  DDRB = (DDRB & 0xF0) | outputs | colbit;
 186:	97 b3       	in	r25, 0x17	; 23
 188:	90 7f       	andi	r25, 0xF0	; 240
 18a:	49 2b       	or	r20, r25
 18c:	48 2b       	or	r20, r24
 18e:	47 bb       	out	0x17, r20	; 23
  PORTB = (PORTB & 0xF0) | outputs;
 190:	98 b3       	in	r25, 0x18	; 24
 192:	90 7f       	andi	r25, 0xF0	; 240
 194:	89 2b       	or	r24, r25
 196:	88 bb       	out	0x18, r24	; 24
}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:


int main(void){
      
    //Timer1 for LED charlieplexing
    TCCR1=(1<<CTC1)|(1<<CS10);        //Divide clock by 1, was 2<<CS10
 1b6:	81 e8       	ldi	r24, 0x81	; 129
 1b8:	80 bf       	out	0x30, r24	; 48
    GTCCR=0;                          //No PWM
 1ba:	1c bc       	out	0x2c, r1	; 44
    OCR1A=0;                          //No PWM
 1bc:	1e bc       	out	0x2e, r1	; 46
    OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
 1be:	89 ef       	ldi	r24, 0xF9	; 249
 1c0:	8d bd       	out	0x2d, r24	; 45
    TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
 1c2:	89 b7       	in	r24, 0x39	; 57
 1c4:	80 64       	ori	r24, 0x40	; 64
 1c6:	89 bf       	out	0x39, r24	; 57
    
    TCCR0A=(1<<WGM01);
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	8a bd       	out	0x2a, r24	; 42
    OCR0A=255;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	89 bd       	out	0x29, r24	; 41
    TCCR0B=(1<<CS02)|(1<<CS00);
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	83 bf       	out	0x33, r24	; 51
    TIMSK|=(1<<OCIE0A);
 1d4:	89 b7       	in	r24, 0x39	; 57
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	89 bf       	out	0x39, r24	; 57
    /*
    ADMUX=(1<<MUX3)|(1<<MUX2);
    ADCSRA |= (1<<ADEN) | (1<<ADIE);
    */
    
    sei();                              //Enable interrupts
 1da:	78 94       	sei
    uint8_t t=0;
    uint8_t w=5;
    uint8_t h=t+w;
 1dc:	95 e0       	ldi	r25, 0x05	; 5
    ADMUX=(1<<MUX3)|(1<<MUX2);
    ADCSRA |= (1<<ADEN) | (1<<ADIE);
    */
    
    sei();                              //Enable interrupts
    uint8_t t=0;
 1de:	20 e0       	ldi	r18, 0x00	; 0
            pstate&=~(1<<ADC_FLAG);   
            ADCSRA |= (1<<ADSC);
        }*/
        _delay_ms(50);
        level[order[t]]=0; 
        level[order[h]]=63;
 1e0:	3f e3       	ldi	r19, 0x3F	; 63
    uint8_t t=0;
    uint8_t w=5;
    uint8_t h=t+w;
    while(1){
        
        if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
 1e2:	b4 9b       	sbis	0x16, 4	; 22
 1e4:	0d c0       	rjmp	.+26     	; 0x200 <main+0x4a>
 1e6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pstate>
 1ea:	80 ff       	sbrs	r24, 0
 1ec:	09 c0       	rjmp	.+18     	; 0x200 <main+0x4a>
            pstate&=~(1<<TOUCH_FLAG);   
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
            if(blinkMode>2)blinkMode=0;
 1f0:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <blinkMode>
 1f4:	43 30       	cpi	r20, 0x03	; 3
 1f6:	10 f0       	brcs	.+4      	; 0x1fc <main+0x46>
 1f8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <blinkMode>
            pstate|=(1<<DIR_FLAG);           
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <main+0x58>
        }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
 200:	b4 99       	sbic	0x16, 4	; 22
 202:	07 c0       	rjmp	.+14     	; 0x212 <main+0x5c>
 204:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pstate>
 208:	80 fd       	sbrc	r24, 0
 20a:	03 c0       	rjmp	.+6      	; 0x212 <main+0x5c>
            pstate|=(1<<TOUCH_FLAG);            
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <pstate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	4f e7       	ldi	r20, 0x7F	; 127
 214:	58 e3       	ldi	r21, 0x38	; 56
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	41 50       	subi	r20, 0x01	; 1
 21a:	50 40       	sbci	r21, 0x00	; 0
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x62>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x6c>
 222:	00 00       	nop
        if(pstate&(1<<ADC_FLAG)){
            pstate&=~(1<<ADC_FLAG);   
            ADCSRA |= (1<<ADSC);
        }*/
        _delay_ms(50);
        level[order[t]]=0; 
 224:	e2 2f       	mov	r30, r18
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	ee 59       	subi	r30, 0x9E	; 158
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	e0 81       	ld	r30, Z
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e3 58       	subi	r30, 0x83	; 131
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	10 82       	st	Z, r1
        level[order[h]]=63;
 236:	e9 2f       	mov	r30, r25
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ee 59       	subi	r30, 0x9E	; 158
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	e0 81       	ld	r30, Z
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	e3 58       	subi	r30, 0x83	; 131
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	30 83       	st	Z, r19
        t++;
 248:	2f 5f       	subi	r18, 0xFF	; 255
        if(t>11)t=0;
 24a:	2c 30       	cpi	r18, 0x0C	; 12
 24c:	08 f0       	brcs	.+2      	; 0x250 <main+0x9a>
 24e:	20 e0       	ldi	r18, 0x00	; 0
        h++;
 250:	9f 5f       	subi	r25, 0xFF	; 255
        if(h>11)h=0;
 252:	9c 30       	cpi	r25, 0x0C	; 12
 254:	30 f2       	brcs	.-116    	; 0x1e2 <main+0x2c>
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	c4 cf       	rjmp	.-120    	; 0x1e2 <main+0x2c>

0000025a <__mulqi3>:
 25a:	00 24       	eor	r0, r0

0000025c <__mulqi3_loop>:
 25c:	80 fd       	sbrc	r24, 0
 25e:	06 0e       	add	r0, r22
 260:	66 0f       	add	r22, r22
 262:	11 f0       	breq	.+4      	; 0x268 <__mulqi3_exit>
 264:	86 95       	lsr	r24
 266:	d1 f7       	brne	.-12     	; 0x25c <__mulqi3_loop>

00000268 <__mulqi3_exit>:
 268:	80 2d       	mov	r24, r0
 26a:	08 95       	ret

0000026c <__mulsi3>:
 26c:	ee 27       	eor	r30, r30
 26e:	ff 27       	eor	r31, r31

00000270 <__mulsi3_helper>:
 270:	aa 27       	eor	r26, r26
 272:	bb 27       	eor	r27, r27
 274:	08 c0       	rjmp	.+16     	; 0x286 <__mulsi3_helper+0x16>
 276:	a2 0f       	add	r26, r18
 278:	b3 1f       	adc	r27, r19
 27a:	e4 1f       	adc	r30, r20
 27c:	f5 1f       	adc	r31, r21
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	44 1f       	adc	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	77 95       	ror	r23
 28c:	67 95       	ror	r22
 28e:	98 f3       	brcs	.-26     	; 0x276 <__mulsi3_helper+0x6>
 290:	70 40       	sbci	r23, 0x00	; 0
 292:	a9 f7       	brne	.-22     	; 0x27e <__mulsi3_helper+0xe>
 294:	00 97       	sbiw	r24, 0x00	; 0
 296:	99 f7       	brne	.-26     	; 0x27e <__mulsi3_helper+0xe>
 298:	bd 01       	movw	r22, r26
 29a:	cf 01       	movw	r24, r30
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
