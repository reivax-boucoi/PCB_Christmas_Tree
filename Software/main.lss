
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000388  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800070  00800070  0000042c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000633  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d0  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a6  00000000  00000000  00000fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ef  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000171  00000000  00000000  000015ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__vector_2>
   6:	6e c0       	rjmp	.+220    	; 0xe4 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e8       	ldi	r30, 0x88	; 136
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 37       	cpi	r26, 0x70	; 112
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e7       	ldi	r26, 0x70	; 112
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 38       	cpi	r26, 0x83	; 131
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	6d d1       	rcall	.+730    	; 0x32c <main>
  52:	98 c1       	rjmp	.+816    	; 0x384 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_2>:
}*/
/*
ISR(TIM0_COMPA_vect) {
    
}*/
ISR(PCINT0_vect){
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
  62:	9f 93       	push	r25
  64:	ef 93       	push	r30
  66:	ff 93       	push	r31
    if((PINB&(1<<PINB4)) && (pstate&(1<<TOUCH_FLAG))){
  68:	b4 9b       	sbis	0x16, 4	; 22
  6a:	28 c0       	rjmp	.+80     	; 0xbc <__vector_2+0x66>
  6c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  70:	80 ff       	sbrs	r24, 0
  72:	24 c0       	rjmp	.+72     	; 0xbc <__vector_2+0x66>
        pstate&=~(1<<TOUCH_FLAG);   
  74:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  78:	8e 7f       	andi	r24, 0xFE	; 254
  7a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
        blinkMode++;
  7e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <blinkMode>
  82:	8f 5f       	subi	r24, 0xFF	; 255
  84:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <blinkMode>
        if(blinkMode>=NB_MODES)blinkMode=0;
  88:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <blinkMode>
  8c:	84 30       	cpi	r24, 0x04	; 4
  8e:	10 f0       	brcs	.+4      	; 0x94 <__vector_2+0x3e>
  90:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <blinkMode>
        brightness=0;
  94:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <brightness>
        pstate|=(1<<DIR_FLAG);
  98:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
        index=0;
  a2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
        for(uint8_t i=0;i<12;i++){
            level[i]=0;
  aa:	fc 01       	movw	r30, r24
  ac:	e9 58       	subi	r30, 0x89	; 137
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	10 82       	st	Z, r1
  b2:	01 96       	adiw	r24, 0x01	; 1
        blinkMode++;
        if(blinkMode>=NB_MODES)blinkMode=0;
        brightness=0;
        pstate|=(1<<DIR_FLAG);
        index=0;
        for(uint8_t i=0;i<12;i++){
  b4:	8c 30       	cpi	r24, 0x0C	; 12
  b6:	91 05       	cpc	r25, r1
  b8:	c1 f7       	brne	.-16     	; 0xaa <__vector_2+0x54>
  ba:	0b c0       	rjmp	.+22     	; 0xd2 <__vector_2+0x7c>
            level[i]=0;
        }
    }else if(!(PINB&(1<<PINB4)) && !(pstate&(1<<TOUCH_FLAG))){
  bc:	b4 99       	sbic	0x16, 4	; 22
  be:	09 c0       	rjmp	.+18     	; 0xd2 <__vector_2+0x7c>
  c0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  c4:	80 fd       	sbrc	r24, 0
  c6:	05 c0       	rjmp	.+10     	; 0xd2 <__vector_2+0x7c>
        pstate|=(1<<TOUCH_FLAG);            
  c8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
    }
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_3>:


ISR(TIM1_COMPA_vect) {
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
    static uint8_t first, ramp, column, bits, colbit;
    ramp = (ramp+1) & 0x07;
 102:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <ramp.1644>
 106:	9f 5f       	subi	r25, 0xFF	; 255
 108:	97 70       	andi	r25, 0x07	; 7
 10a:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <ramp.1644>
    if (ramp == 0) {
 10e:	91 11       	cpse	r25, r1
 110:	18 c0       	rjmp	.+48     	; 0x142 <__vector_3+0x5e>
        bits = 0x07;
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <bits.1646>
        column = (column + 1) & 0x03;
 118:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <column.1645>
 11c:	2f 5f       	subi	r18, 0xFF	; 255
 11e:	23 70       	andi	r18, 0x03	; 3
 120:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <column.1645>
        first = column * 3;
 124:	82 2f       	mov	r24, r18
 126:	63 e0       	ldi	r22, 0x03	; 3
 128:	24 d1       	rcall	.+584    	; 0x372 <__mulqi3>
 12a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <first.1643>
        colbit = 1<<column;
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	ba 01       	movw	r22, r20
 134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_3+0x56>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	2a 95       	dec	r18
 13c:	e2 f7       	brpl	.-8      	; 0x136 <__vector_3+0x52>
 13e:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <colbit.1647>
    }
    if (level[first] == ramp) bits = bits & 0x06;
 142:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <first.1643>
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	e9 58       	subi	r30, 0x89	; 137
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	80 81       	ld	r24, Z
 150:	98 13       	cpse	r25, r24
 152:	05 c0       	rjmp	.+10     	; 0x15e <__vector_3+0x7a>
 154:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <bits.1646>
 158:	86 70       	andi	r24, 0x06	; 6
 15a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <bits.1646>
    if (level[first+1] == ramp) bits = bits & 0x05;
 15e:	f9 01       	movw	r30, r18
 160:	e8 58       	subi	r30, 0x88	; 136
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	98 13       	cpse	r25, r24
 168:	05 c0       	rjmp	.+10     	; 0x174 <__vector_3+0x90>
 16a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <bits.1646>
 16e:	85 70       	andi	r24, 0x05	; 5
 170:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <bits.1646>
    if (level[first+2] == ramp) bits = bits & 0x03;
 174:	f9 01       	movw	r30, r18
 176:	e7 58       	subi	r30, 0x87	; 135
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 81       	ld	r24, Z
 17c:	98 13       	cpse	r25, r24
 17e:	05 c0       	rjmp	.+10     	; 0x18a <__vector_3+0xa6>
 180:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <bits.1646>
 184:	83 70       	andi	r24, 0x03	; 3
 186:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <bits.1646>
    uint8_t mask = colbit - 1;
 18a:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <colbit.1647>
 18e:	6f ef       	ldi	r22, 0xFF	; 255
 190:	64 0f       	add	r22, r20
    uint8_t outputs = (bits & mask) | (bits & ~mask)<<1;
 192:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <bits.1646>
 196:	86 2f       	mov	r24, r22
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	80 95       	com	r24
 19c:	90 95       	com	r25
 19e:	25 2f       	mov	r18, r21
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	82 23       	and	r24, r18
 1a4:	93 23       	and	r25, r19
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	56 23       	and	r21, r22
 1ac:	85 2b       	or	r24, r21
    DDRB = (DDRB & 0xF0) | outputs | colbit;
 1ae:	97 b3       	in	r25, 0x17	; 23
 1b0:	90 7f       	andi	r25, 0xF0	; 240
 1b2:	49 2b       	or	r20, r25
 1b4:	48 2b       	or	r20, r24
 1b6:	47 bb       	out	0x17, r20	; 23
    PORTB = (PORTB & 0xF0) | outputs;
 1b8:	98 b3       	in	r25, 0x18	; 24
 1ba:	90 7f       	andi	r25, 0xF0	; 240
 1bc:	89 2b       	or	r24, r25
 1be:	88 bb       	out	0x18, r24	; 24
    
    cnt++;
 1c0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cnt>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <cnt>
    if(cnt==speed){
 1ca:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cnt>
 1ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <speed>
 1d2:	98 13       	cpse	r25, r24
 1d4:	9c c0       	rjmp	.+312    	; 0x30e <__stack+0xaf>
        cnt=0;
 1d6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt>
    switch(blinkMode){
 1da:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <blinkMode>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <__vector_3+0x100>
 1e2:	6e c0       	rjmp	.+220    	; 0x2c0 <__stack+0x61>
 1e4:	08 f4       	brcc	.+2      	; 0x1e8 <__vector_3+0x104>
 1e6:	55 c0       	rjmp	.+170    	; 0x292 <__stack+0x33>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	09 f0       	breq	.+2      	; 0x1ee <__vector_3+0x10a>
 1ec:	90 c0       	rjmp	.+288    	; 0x30e <__stack+0xaf>
        
        case SCROLL:
            if(pstate&(1<<DIR_FLAG)){
 1ee:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
                level[order[index]]=brightness++;
 1f2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ec 59       	subi	r30, 0x9C	; 156
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	e0 81       	ld	r30, Z
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
    if(cnt==speed){
        cnt=0;
    switch(blinkMode){
        
        case SCROLL:
            if(pstate&(1<<DIR_FLAG)){
 200:	82 ff       	sbrs	r24, 2
 202:	24 c0       	rjmp	.+72     	; 0x24c <__vector_3+0x168>
                level[order[index]]=brightness++;
 204:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <brightness>
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	98 0f       	add	r25, r24
 20c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <brightness>
 210:	e9 58       	subi	r30, 0x89	; 137
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	80 83       	st	Z, r24
                if(brightness>7){
 216:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <brightness>
 21a:	88 30       	cpi	r24, 0x08	; 8
 21c:	08 f4       	brcc	.+2      	; 0x220 <__vector_3+0x13c>
 21e:	77 c0       	rjmp	.+238    	; 0x30e <__stack+0xaf>
                    brightness=0;
 220:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <brightness>
                    index++;
 224:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    if(index>11){
 22e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 232:	8c 30       	cpi	r24, 0x0C	; 12
 234:	08 f4       	brcc	.+2      	; 0x238 <__vector_3+0x154>
 236:	6b c0       	rjmp	.+214    	; 0x30e <__stack+0xaf>
                        index=11;
 238:	8b e0       	ldi	r24, 0x0B	; 11
 23a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                        brightness=7;
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <brightness>
                        pstate&=~(1<<DIR_FLAG);
 244:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	20 c0       	rjmp	.+64     	; 0x28c <__stack+0x2d>
                    }
                }
            }else{
                level[order[index]]=brightness--;
 24c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <brightness>
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	98 0f       	add	r25, r24
 254:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <brightness>
 258:	e9 58       	subi	r30, 0x89	; 137
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	80 83       	st	Z, r24
                if(brightness==0){
 25e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <brightness>
 262:	81 11       	cpse	r24, r1
 264:	54 c0       	rjmp	.+168    	; 0x30e <__stack+0xaf>
                    brightness=7;
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <brightness>
                    index--;
 26c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 270:	81 50       	subi	r24, 0x01	; 1
 272:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    if(index==0){
 276:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27a:	81 11       	cpse	r24, r1
 27c:	48 c0       	rjmp	.+144    	; 0x30e <__stack+0xaf>
                        index=0;
 27e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
                        brightness=0;
 282:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <brightness>
                        pstate|=(1<<DIR_FLAG);
 286:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 28a:	84 60       	ori	r24, 0x04	; 4
 28c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 290:	3e c0       	rjmp	.+124    	; 0x30e <__stack+0xaf>
                }
            }
            break;
            
        case ALL:
            level[order[index]]=brightness;
 292:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ec 59       	subi	r30, 0x9C	; 156
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	e0 81       	ld	r30, Z
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <brightness>
 2a4:	e9 58       	subi	r30, 0x89	; 137
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	80 83       	st	Z, r24
            brightness=(brightness+1)&0x07;
 2aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <brightness>
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	87 70       	andi	r24, 0x07	; 7
 2b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <brightness>
            if(brightness==0){
 2b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <brightness>
 2ba:	88 23       	and	r24, r24
 2bc:	e9 f0       	breq	.+58     	; 0x2f8 <__stack+0x99>
 2be:	27 c0       	rjmp	.+78     	; 0x30e <__stack+0xaf>
                if(index>11)index=0;
            }
            break;
            
        case PIXIE:
            switch(++brightness){
 2c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <brightness>
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <brightness>
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	61 f0       	breq	.+24     	; 0x2e6 <__stack+0x87>
 2ce:	8a 30       	cpi	r24, 0x0A	; 10
 2d0:	89 f0       	breq	.+34     	; 0x2f4 <__stack+0x95>
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	e1 f4       	brne	.+56     	; 0x30e <__stack+0xaf>
                case 1:
                    level[index]=7;
 2d6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e9 58       	subi	r30, 0x89	; 137
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	87 e0       	ldi	r24, 0x07	; 7
 2e2:	80 83       	st	Z, r24
                break;
 2e4:	14 c0       	rjmp	.+40     	; 0x30e <__stack+0xaf>
                case 2:
                    level[index]=0;
 2e6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	e9 58       	subi	r30, 0x89	; 137
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	10 82       	st	Z, r1
                break;
 2f2:	0d c0       	rjmp	.+26     	; 0x30e <__stack+0xaf>
                case 10:
                    brightness=0;
 2f4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <brightness>
                    index++;
 2f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    if(index>11)index=0;
 302:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 306:	8c 30       	cpi	r24, 0x0C	; 12
 308:	10 f0       	brcs	.+4      	; 0x30e <__stack+0xaf>
 30a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
            break;
        default:
            break;
        }
    }
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <main>:


int main(void){
      
    //Timer1 for LED charlieplexing
    TCCR1=(1<<CTC1)|(1<<CS12);//|(1<<CS10);//|(1<<CS11);        //Divide clock by 1, was 2<<CS10
 32c:	84 e8       	ldi	r24, 0x84	; 132
 32e:	80 bf       	out	0x30, r24	; 48
    GTCCR=0;                          //No PWM
 330:	1c bc       	out	0x2c, r1	; 44
    OCR1A=0;                          //No PWM
 332:	1e bc       	out	0x2e, r1	; 46
    OCR1C=250-1;                      //16kHz for good POV (16k/64/12=20Hz)
 334:	89 ef       	ldi	r24, 0xF9	; 249
 336:	8d bd       	out	0x2d, r24	; 45
    TIMSK|=(1<<OCIE1A);                 //Compare Match A interrupt
 338:	89 b7       	in	r24, 0x39	; 57
 33a:	80 64       	ori	r24, 0x40	; 64
 33c:	89 bf       	out	0x39, r24	; 57
    */
    /*
    ADMUX=(1<<MUX3)|(1<<MUX2);
    ADCSRA |= (1<<ADEN) | (1<<ADIE);
    */
    PCMSK|=(1<<PCINT4);
 33e:	ac 9a       	sbi	0x15, 4	; 21
    GIMSK|=(1<<PCIE);
 340:	8b b7       	in	r24, 0x3b	; 59
 342:	80 62       	ori	r24, 0x20	; 32
 344:	8b bf       	out	0x3b, r24	; 59
    
    ADCSRA&=~(1<<ADEN);
 346:	37 98       	cbi	0x06, 7	; 6
    power_adc_disable();
 348:	80 b5       	in	r24, 0x20	; 32
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	80 bd       	out	0x20, r24	; 32
    power_timer0_disable();
 34e:	80 b5       	in	r24, 0x20	; 32
 350:	84 60       	ori	r24, 0x04	; 4
 352:	80 bd       	out	0x20, r24	; 32
    power_usi_disable();
 354:	80 b5       	in	r24, 0x20	; 32
 356:	82 60       	ori	r24, 0x02	; 2
 358:	80 bd       	out	0x20, r24	; 32
    
    sei();                              //Enable interrupts
 35a:	78 94       	sei
    while(1){
        
        set_sleep_mode(SLEEP_MODE_IDLE);
 35c:	85 b7       	in	r24, 0x35	; 53
 35e:	87 7e       	andi	r24, 0xE7	; 231
 360:	85 bf       	out	0x35, r24	; 53
        sleep_mode();
 362:	85 b7       	in	r24, 0x35	; 53
 364:	80 62       	ori	r24, 0x20	; 32
 366:	85 bf       	out	0x35, r24	; 53
 368:	88 95       	sleep
 36a:	85 b7       	in	r24, 0x35	; 53
 36c:	8f 7d       	andi	r24, 0xDF	; 223
 36e:	85 bf       	out	0x35, r24	; 53
 370:	f5 cf       	rjmp	.-22     	; 0x35c <main+0x30>

00000372 <__mulqi3>:
 372:	00 24       	eor	r0, r0

00000374 <__mulqi3_loop>:
 374:	80 fd       	sbrc	r24, 0
 376:	06 0e       	add	r0, r22
 378:	66 0f       	add	r22, r22
 37a:	11 f0       	breq	.+4      	; 0x380 <__mulqi3_exit>
 37c:	86 95       	lsr	r24
 37e:	d1 f7       	brne	.-12     	; 0x374 <__mulqi3_loop>

00000380 <__mulqi3_exit>:
 380:	80 2d       	mov	r24, r0
 382:	08 95       	ret

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
